{
  "api/Petrosik.Enums.GeneralDirections.html": {
    "href": "api/Petrosik.Enums.GeneralDirections.html",
    "title": "Enum GeneralDirections | Petrosik.Utility",
    "summary": "Enum GeneralDirections Namespace Petrosik.Enums Assembly PetrosikUtility.dll [Serializable] [Flags] public enum GeneralDirections Extension Methods Extensions.IsUnityNull(object) Fields None = 0 Up = 1 Down = 2 Left = 4 Right = 8 Fowards = 16 Backwards = 32"
  },
  "api/Petrosik.Enums.InfoType.html": {
    "href": "api/Petrosik.Enums.InfoType.html",
    "title": "Enum InfoType | Petrosik.Utility",
    "summary": "Enum InfoType Namespace Petrosik.Enums Assembly PetrosikUtility.dll [Serializable] public enum InfoType Extension Methods Extensions.IsUnityNull(object) Fields Info = 0 Warn = 1 Error = 2 Important = 3"
  },
  "api/Petrosik.Enums.PathOccupancy.html": {
    "href": "api/Petrosik.Enums.PathOccupancy.html",
    "title": "Enum PathOccupancy | Petrosik.Utility",
    "summary": "Enum PathOccupancy Namespace Petrosik.Enums Assembly PetrosikUtility.dll [Serializable] public enum PathOccupancy Extension Methods Extensions.IsUnityNull(object) Fields Blocked = 0 Clear = 1 LowP = 2 MediumP = 4 HighP = 8 Path = 128"
  },
  "api/Petrosik.Enums.Rarity.html": {
    "href": "api/Petrosik.Enums.Rarity.html",
    "title": "Enum Rarity | Petrosik.Utility",
    "summary": "Enum Rarity Namespace Petrosik.Enums Assembly PetrosikUtility.dll More common = bigger number [Serializable] public enum Rarity Extension Methods Extensions.IsUnityNull(object) Fields None = 0 Artifact = 1 Legendary = 2 Epic = 4 Rare = 10 Uncommon = 21 Common = 45"
  },
  "api/Petrosik.Enums.SQLOptions.html": {
    "href": "api/Petrosik.Enums.SQLOptions.html",
    "title": "Enum SQLOptions | Petrosik.Utility",
    "summary": "Enum SQLOptions Namespace Petrosik.Enums Assembly PetrosikUtility.dll [Serializable] public enum SQLOptions Extension Methods Extensions.IsUnityNull(object) Fields Save = 0 Load = 1 SaveAll = 2 LoadAll = 3 Delete = 4 Update = 5 Sync = 6"
  },
  "api/Petrosik.Enums.VersioningActionType.html": {
    "href": "api/Petrosik.Enums.VersioningActionType.html",
    "title": "Enum VersioningActionType | Petrosik.Utility",
    "summary": "Enum VersioningActionType Namespace Petrosik.Enums Assembly PetrosikUtility.dll public enum VersioningActionType Warning AddMethod, RemoveMethod, ModifyMethod are not implemented! Extension Methods Extensions.IsUnityNull(object) Fields None = -1 ModifyValue = 0 AddProperty = 1 RemoveProperty = 2 ModifyProperty = 3 AddMethod = 4 RemoveMethod = 5 ModifyMethod = 6"
  },
  "api/Petrosik.Enums.html": {
    "href": "api/Petrosik.Enums.html",
    "title": "Namespace Petrosik.Enums | Petrosik.Utility",
    "summary": "Namespace Petrosik.Enums Enums GeneralDirections InfoType PathOccupancy Rarity More common = bigger number SQLOptions VersioningActionType AddMethod, RemoveMethod, ModifyMethod are not implemented!"
  },
  "api/Petrosik.ImageSharpUtility.Extensions.html": {
    "href": "api/Petrosik.ImageSharpUtility.Extensions.html",
    "title": "Class Extensions | Petrosik.Utility",
    "summary": "Class Extensions Namespace Petrosik.ImageSharpUtility Assembly PetrosikUtility.dll public static class Extensions Inheritance object Extensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ConvertToAvatar(IImageProcessingContext) Rounds off edges of the image public static IImageProcessingContext ConvertToAvatar(this IImageProcessingContext context) Parameters context IImageProcessingContext Returns IImageProcessingContext Cutout(IImageProcessingContext, IPath[]) Should cut out the shapes(paths) from the original image public static IImageProcessingContext Cutout(this IImageProcessingContext context, IPath[] paths) Parameters context IImageProcessingContext paths IPath[] Returns IImageProcessingContext Select(IImageProcessingContext, IPath[]) Should keep the shapes(paths) from the original image public static IImageProcessingContext Select(this IImageProcessingContext context, IPath[] paths) Parameters context IImageProcessingContext paths IPath[] Returns IImageProcessingContext Tint(IImageProcessingContext, Rgba32, float) Tints the image to the color, weight cannot be more than 1 otherwise it inverses the colors public static IImageProcessingContext Tint(this IImageProcessingContext context, Rgba32 color, float weight = 1) Parameters context IImageProcessingContext color Rgba32 weight float 0 to 1, 0 original color only, 1 tint color only Returns IImageProcessingContext Tint1(Image, Rgba32, float) Tints the image to the color, weight cannot be more than 1 otherwise it inverses the colors public static Image Tint1(this Image img, Rgba32 color, float weight = 1) Parameters img Image color Rgba32 weight float 0 to 1, 0 original color only, 1 tint color only Returns Image"
  },
  "api/Petrosik.ImageSharpUtility.html": {
    "href": "api/Petrosik.ImageSharpUtility.html",
    "title": "Namespace Petrosik.ImageSharpUtility | Petrosik.Utility",
    "summary": "Namespace Petrosik.ImageSharpUtility Classes Extensions"
  },
  "api/Petrosik.Pathfinding.AStar.html": {
    "href": "api/Petrosik.Pathfinding.AStar.html",
    "title": "Class AStar | Petrosik.Utility",
    "summary": "Class AStar Namespace Petrosik.Pathfinding Assembly PetrosikUtility.dll Slightly modifed A* Cardinal directions only, no diagonals Supports pathfinding for tile traversability public class AStar : GridBase Inheritance object GridBase AStar Inherited Members GridBase.GridScale GridBase.SearchRange GridBase.MaxSegmentCount GridBase.GridSize GridBase.Grid GridBase.LoadedObstacles GridBase.AddObstacle(ObstacleObject) GridBase.RemoveObstacle(ObstacleObject) GridBase.RemoveObstacleAt(int) GridBase.ClearObstalces() GridBase.MoveObstalce(int, int) GridBase.AddSingle(int, int, PathOccupancy) GridBase.GetPathColor(PathOccupancy) GridBase.GetGridPosition(PointF) GridBase.GetWorldPosition(PointF) GridBase.ExportPaths() GridBase.InportPaths(string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Extensions.IsUnityNull(object) Constructors AStar(GraphicsPath, int, float, int) public AStar(GraphicsPath BaseClearArea, int GridScale = 20, float SearchRange = 20, int MaxSegmentCount = 40) Parameters BaseClearArea GraphicsPath Size of the grid(world units) GridScale int How many path units are in 1 world unit SearchRange float How far should pathfinding search by default(world units) MaxSegmentCount int After how many path units should the path make new \"node\" in the output. (0 for no limit) Methods CheckDirectLine(PointF, PointF) public bool CheckDirectLine(PointF from, PointF to) Parameters from PointF to PointF Returns bool GetPath(PointF, PointF, float) Returns List of coordinates for path to target, searchrange is public override List<PointF>? GetPath(PointF From, PointF To, float SearchRange = 0) Parameters From PointF World's Units To PointF World's Units SearchRange float How far to search in world's units (0 for default limit) Returns List<PointF> GetRawPath(PointF, PointF, float, bool) Simple Raw Pathing method public override LinkedList<PointF>? GetRawPath(PointF From, PointF To, float SearchRange = 0, bool WorldSpace = true) Parameters From PointF World's Units To PointF World's Units SearchRange float How far to search in world's units (0 for default limit) WorldSpace bool Should the positions be converted to world positions Returns LinkedList<PointF>"
  },
  "api/Petrosik.Pathfinding.GridBase.html": {
    "href": "api/Petrosik.Pathfinding.GridBase.html",
    "title": "Class GridBase | Petrosik.Utility",
    "summary": "Class GridBase Namespace Petrosik.Pathfinding Assembly PetrosikUtility.dll public class GridBase Inheritance object GridBase Derived AStar PseudoAStar Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Extensions.IsUnityNull(object) Fields Grid public PathOccupancy[,] Grid Field Value PathOccupancy[,] GridScale How many path units are in 1 world unit public int GridScale Field Value int MaxSegmentCount After how many path units should the path make new \"node\" in the output. (0 for no limit) public int MaxSegmentCount Field Value int SearchRange How far should pathfinding search by default(world units) public float SearchRange Field Value float Properties GridSize Size of the current grid public Size GridSize { get; protected set; } Property Value Size LoadedObstacles public ImmutableList<ObstacleObject> LoadedObstacles { get; } Property Value ImmutableList<ObstacleObject> Methods AddObstacle(ObstacleObject) Adds obstacle object to the list that creates the grid public void AddObstacle(ObstacleObject Obstacle) Parameters Obstacle ObstacleObject AddSingle(int, int, PathOccupancy) Adds single pixel worth obstacle public void AddSingle(int X, int Y, PathOccupancy Type) Warning Use Sparingly, will slow down grid building Parameters X int Y int Type PathOccupancy ClearObstalces() Clears all obstacles Also removes what you set as BaseClearArea when creating this GridBase public void ClearObstalces() ExportPaths() Exports Obstacles into Json format public string ExportPaths() Returns string GetGridPosition(PointF) Returns position on the grid from world position public PointF GetGridPosition(PointF Pos) Parameters Pos PointF Returns PointF GetPath(PointF, PointF, float) Returns List of coordinates for path to target, searchrange is public virtual List<PointF>? GetPath(PointF From, PointF To, float SearchRange = 0) Parameters From PointF World's Units To PointF World's Units SearchRange float How far to search in world's units (0 for default limit) Returns List<PointF> GetPathColor(PathOccupancy) Returns color interpretation of the tile public Color GetPathColor(PathOccupancy Tile) Tip PathOccupancy.Blocked => Color.Red PathOccupancy.Clear => Color.DarkGreen PathOccupancy.LowP => Color.Green PathOccupancy.MediumP => Color.Yellow PathOccupancy.HighP => Color.Magenta PathOccupancy.Path => Color.White Parameters Tile PathOccupancy Returns Color GetRawPath(PointF, PointF, float, bool) Simple Raw Pathing method public virtual LinkedList<PointF>? GetRawPath(PointF From, PointF To, float SearchRange = 0, bool WorldSpace = true) Parameters From PointF World's Units To PointF World's Units SearchRange float How far to search in world's units (0 for default limit) WorldSpace bool Should the positions be converted to world positions Returns LinkedList<PointF> GetWorldPosition(PointF) Returns position in world from grid position public PointF GetWorldPosition(PointF Pos) Parameters Pos PointF Returns PointF InportPaths(string) Inports Obstacles from Json text public void InportPaths(string text) Parameters text string Exceptions ArgumentException Happens when text is not Json format MoveObstalce(int, int) Moves obstacle on Index Up or Down in the list based on Offset public void MoveObstalce(int Index, int Offset = 1) Tip Moves Down, - Moves Up Parameters Index int Offset int Moves Down, - Moves Up Exceptions IndexOutOfRangeException Occurs when Index + Offset is outside of range of the obstacle list RemoveObstacle(ObstacleObject) Removes obstacle object from the list that creates the grid public void RemoveObstacle(ObstacleObject Obstacle) Parameters Obstacle ObstacleObject RemoveObstacleAt(int) Removes obstacle object at position on the list that creates the grid public void RemoveObstacleAt(int Index) Parameters Index int"
  },
  "api/Petrosik.Pathfinding.ObstacleObject.html": {
    "href": "api/Petrosik.Pathfinding.ObstacleObject.html",
    "title": "Struct ObstacleObject | Petrosik.Utility",
    "summary": "Struct ObstacleObject Namespace Petrosik.Pathfinding Assembly PetrosikUtility.dll Simple struct that exists only to hold info about PathOccupancy type and GraphicsPath shape. This gets later converted into the Grid in GridBase public struct ObstacleObject Inherited Members ValueType.Equals(object) object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Extension Methods Extensions.IsUnityNull(object) Constructors ObstacleObject() Do not use this one, it will just throw a error [Obsolete] public ObstacleObject() Exceptions InvalidOperationException Fields Shape public GraphicsPath Shape Field Value GraphicsPath Type public PathOccupancy Type Field Value PathOccupancy Methods GetHashCode() Returns the hash code for this instance. public override int GetHashCode() Returns int A 32-bit signed integer that is the hash code for this instance. ToString() Returns the fully qualified type name of this instance. public override string ToString() Returns string The fully qualified type name."
  },
  "api/Petrosik.Pathfinding.PseudoAStar.html": {
    "href": "api/Petrosik.Pathfinding.PseudoAStar.html",
    "title": "Class PseudoAStar | Petrosik.Utility",
    "summary": "Class PseudoAStar Namespace Petrosik.Pathfinding Assembly PetrosikUtility.dll Modified A* algorithm, faster in some cases but unstable and sometimes doesn't return any path. Good for open space not mazes Cardinal directions only, no diagonals Desn't support pathfinding for tile traversability public class PseudoAStar : GridBase Inheritance object GridBase PseudoAStar Inherited Members GridBase.GridScale GridBase.SearchRange GridBase.MaxSegmentCount GridBase.GridSize GridBase.Grid GridBase.LoadedObstacles GridBase.AddObstacle(ObstacleObject) GridBase.RemoveObstacle(ObstacleObject) GridBase.RemoveObstacleAt(int) GridBase.ClearObstalces() GridBase.MoveObstalce(int, int) GridBase.AddSingle(int, int, PathOccupancy) GridBase.GetPathColor(PathOccupancy) GridBase.GetGridPosition(PointF) GridBase.GetWorldPosition(PointF) GridBase.ExportPaths() GridBase.InportPaths(string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Extensions.IsUnityNull(object) Methods CheckDirectPath(PointF, PointF) Checks path in direct line if it's acessible public bool CheckDirectPath(PointF from, PointF to) Parameters from PointF to PointF Returns bool GetPath(PointF, PointF, float) Returns List of coordinates for path to target, searchrange is public override List<PointF>? GetPath(PointF from, PointF to, float searchrange = 0) Parameters from PointF to PointF searchrange float Returns List<PointF> GetRawPath(PointF, PointF, float, bool) Simple Raw Pathing method public override LinkedList<PointF>? GetRawPath(PointF from, PointF to, float searchrange, bool WorldSpace = true) Parameters from PointF to PointF searchrange float WorldSpace bool Should the positions be converted to world positions Returns LinkedList<PointF> PrefDirCheck(PointF, PointF, int[,], out PointF) public bool PrefDirCheck(PointF currentpos, PointF to, int[,] numberpath, out PointF prefdir) Parameters currentpos PointF to PointF numberpath int[,] prefdir PointF Returns bool"
  },
  "api/Petrosik.Pathfinding.html": {
    "href": "api/Petrosik.Pathfinding.html",
    "title": "Namespace Petrosik.Pathfinding | Petrosik.Utility",
    "summary": "Namespace Petrosik.Pathfinding Classes AStar Slightly modifed A* Cardinal directions only, no diagonals Supports pathfinding for tile traversability GridBase PseudoAStar Modified A* algorithm, faster in some cases but unstable and sometimes doesn't return any path. Good for open space not mazes Cardinal directions only, no diagonals Desn't support pathfinding for tile traversability Structs ObstacleObject Simple struct that exists only to hold info about PathOccupancy type and GraphicsPath shape. This gets later converted into the Grid in GridBase"
  },
  "api/Petrosik.Sql.SqlManager.html": {
    "href": "api/Petrosik.Sql.SqlManager.html",
    "title": "Class SqlManager | Petrosik.Utility",
    "summary": "Class SqlManager Namespace Petrosik.Sql Assembly PetrosikUtility.dll public class SqlManager Inheritance object SqlManager Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Extensions.IsUnityNull(object) Methods ExecuteCommand(string, object?) Tries to execute the Command with the params public int? ExecuteCommand(string Command, object? param) Parameters Command string param object Returns int? ExecuteQuarry<TKey, TValue>(string, object?) Tries to execute the QuarryCommand with the params public IEnumerable<object> ExecuteQuarry<TKey, TValue>(string Command, object? param) Parameters Command string param object Returns IEnumerable<object> Type Parameters TKey TValue LoadAll<TKey, TValue>(string, Func<object, TValue>) Loads entire table Needs the table and the output type to have Id property!!!! public Dictionary<TKey, TValue>? LoadAll<TKey, TValue>(string tableName, Func<object, TValue> dataConverter) Parameters tableName string dataConverter Func<object, TValue> Returns Dictionary<TKey, TValue> Type Parameters TKey TValue Load<TId, TData>(TId, string, Func<object, TData>) Loads single entry from table Needs the table and the output type to have Id property!!!! public TData Load<TId, TData>(TId id, string tableName, Func<object, TData> entityConverter) Parameters id TId tableName string entityConverter Func<object, TData> Returns TData Type Parameters TId TData Remove<Tkey>(Tkey, string) Removes entry from database Uses delete as the db command public void Remove<Tkey>(Tkey Id, string tableName) Parameters Id Tkey tableName string Type Parameters Tkey SaveAll<TData>(IEnumerable<TData>, string) Saves list of entries to database Uses insert as the db command public void SaveAll<TData>(IEnumerable<TData> data, string tableName) Parameters data IEnumerable<TData> tableName string Type Parameters TData Save<TData>(TData, string) Saves single entry to the database Uses insert as the db command public void Save<TData>(TData data, string tableName) Parameters data TData tableName string Type Parameters TData SetPath(string, bool) Sets path to the .db file public void SetPath(string path, bool ignoreCheck = false) Parameters path string ignoreCheck bool Ignore if the .db file doesn't exist SqlMainManager<Tkey, TValue, TDBValue>(SQLOptions, string, Tkey?, TValue?, IEnumerable<TValue>, Func<object, TValue>?, Func<TValue, TDBValue>?) Basic SqlManager,while it should be functional, it is mainly an EXAMPLE and it probably shoulnd NOT be used!!! public IEnumerable<TValue>? SqlMainManager<Tkey, TValue, TDBValue>(SQLOptions opt, string tableName, Tkey? Id = default, TValue? data = default, IEnumerable<TValue> datalist = null, Func<object, TValue>? converter = null, Func<TValue, TDBValue>? converterToDB = null) Parameters opt SQLOptions tableName string Id Tkey data TValue datalist IEnumerable<TValue> converter Func<object, TValue> converts from db object to TValue converterToDB Func<TValue, TDBValue> converts from TValue to db object Returns IEnumerable<TValue> Type Parameters Tkey Key in the db TValue Data TDBValue DB friendly data UpdateOrUpsertList<TData>(IEnumerable<TData>, string) Updates multiple entries in database Uses insert or replace as the db command public void UpdateOrUpsertList<TData>(IEnumerable<TData> data, string tableName) Parameters data IEnumerable<TData> tableName string Type Parameters TData UpdateOrUpsert<TData>(TData, string) Updates entry in database Uses insert or replace as the db command public void UpdateOrUpsert<TData>(TData data, string tableName) Parameters data TData tableName string Type Parameters TData Update<TData>(TData, string) Updates entry in database Uses update as the db command public void Update<TData>(TData user, string tableName) Parameters user TData tableName string Type Parameters TData"
  },
  "api/Petrosik.Sql.html": {
    "href": "api/Petrosik.Sql.html",
    "title": "Namespace Petrosik.Sql | Petrosik.Utility",
    "summary": "Namespace Petrosik.Sql Classes SqlManager"
  },
  "api/Petrosik.UnityUtility.ChancePart-1.html": {
    "href": "api/Petrosik.UnityUtility.ChancePart-1.html",
    "title": "Class ChancePart<T> | Petrosik.Utility",
    "summary": "Class ChancePart<T> Namespace Petrosik.UnityUtility Assembly PetrosikUtility.dll [Serializable] public class ChancePart<T> where T : notnull Type Parameters T Inheritance object ChancePart<T> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods Extensions.IsUnityNull(object) Fields Chance Perecentage for spawn rate public float Chance Field Value float Object public T Object Field Value T Rarity public Rarity Rarity Field Value Rarity Methods Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/Petrosik.UnityUtility.ChanceTable-1.html": {
    "href": "api/Petrosik.UnityUtility.ChanceTable-1.html",
    "title": "Class ChanceTable<T> | Petrosik.Utility",
    "summary": "Class ChanceTable<T> Namespace Petrosik.UnityUtility Assembly PetrosikUtility.dll Chance table or loot table allows to add and then pull items with rarities, the items are weighted and have calculated pull values based on the amount of items in the pool + it's rarity [Serializable] public class ChanceTable<T> : IEnumerable<ChancePart<T>>, IEnumerable, IEnumerator<ChancePart<T>>, IEnumerator, IDisposable where T : notnull Type Parameters T Inheritance object ChanceTable<T> Implements IEnumerable<ChancePart<T>> IEnumerable IEnumerator<ChancePart<T>> IEnumerator IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Extensions.IsUnityNull(object) Properties Count public int Count { get; } Property Value int Current Gets the element in the collection at the current position of the enumerator. public ChancePart<T> Current { get; } Property Value ChancePart<T> The element in the collection at the current position of the enumerator. RaritysCount Count of each rarity inside the table public Dictionary<Rarity, int> RaritysCount { get; } Property Value Dictionary<Rarity, int> TableAvrgRarity Average rarity of the table public Rarity TableAvrgRarity { get; } Property Value Rarity Methods Add(Rarity, T) Adds the item with the rarity to the table public void Add(Rarity Rarity, T item) Parameters Rarity Rarity item T Clear() Clears the table public void Clear() Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public void Dispose() Exists(T) public bool Exists(T item) Parameters item T Returns bool GetEnumerator() Returns an enumerator that iterates through the collection. public IEnumerator<ChancePart<T>> GetEnumerator() Returns IEnumerator<ChancePart<T>> An enumerator that can be used to iterate through the collection. GetItem(bool, bool) Returns random item from the table based on its weighted value public T? GetItem(bool UseUnityRandom = false, bool RemoveAfterPull = false) Parameters UseUnityRandom bool Should the method use system random or unity random RemoveAfterPull bool Should the item be removed from the table after pull Returns T GetItemWithRarity(List<Rarity>, bool, bool) Returns random item from the table that is insinde the range based on its weighted value public T? GetItemWithRarity(List<Rarity> Range, bool UseUnityRandom = false, bool RemoveAfterPull = false) Parameters Range List<Rarity> UseUnityRandom bool Should the method use system random or unity random RemoveAfterPull bool Should the item be removed from the table after pull Returns T MoveNext() Advances the enumerator to the next element of the collection. public bool MoveNext() Returns bool true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection. Exceptions InvalidOperationException The collection was modified after the enumerator was created. Remove(T) Removes the item from the table public bool Remove(T item) Parameters item T Returns bool RemoveAt(int) public void RemoveAt(int i) Parameters i int Reset() Sets the enumerator to its initial position, which is before the first element in the collection. public void Reset() Exceptions InvalidOperationException The collection was modified after the enumerator was created. NotSupportedException The enumerator does not support being reset."
  },
  "api/Petrosik.UnityUtility.ColorConvert.Extensions.html": {
    "href": "api/Petrosik.UnityUtility.ColorConvert.Extensions.html",
    "title": "Class Extensions | Petrosik.Utility",
    "summary": "Class Extensions Namespace Petrosik.UnityUtility.ColorConvert Assembly PetrosikUtility.dll public static class Extensions Inheritance object Extensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Convert(Color) Converts System.Drawing color to UnityEngine color public static Color Convert(this Color c) Parameters c Color Returns Color Convert(Color) Converts UnityEngine color to System.Drawing color public static Color Convert(this Color c) Parameters c Color Returns Color"
  },
  "api/Petrosik.UnityUtility.ColorConvert.html": {
    "href": "api/Petrosik.UnityUtility.ColorConvert.html",
    "title": "Namespace Petrosik.UnityUtility.ColorConvert | Petrosik.Utility",
    "summary": "Namespace Petrosik.UnityUtility.ColorConvert Classes Extensions"
  },
  "api/Petrosik.UnityUtility.Extensions.html": {
    "href": "api/Petrosik.UnityUtility.Extensions.html",
    "title": "Class Extensions | Petrosik.Utility",
    "summary": "Class Extensions Namespace Petrosik.UnityUtility Assembly PetrosikUtility.dll All basic Modifications/Extensions public static class Extensions Inheritance object Extensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Abs(Vector2) Returns abs vector value public static Vector2 Abs(this Vector2 v) Parameters v Vector2 Returns Vector2 Abs(Vector3) Returns abs vector value (same as for Vector2) public static Vector3 Abs(this Vector3 v) Parameters v Vector3 Returns Vector3 AlignToAxis(Vector2) Aligns vector v to be either 1,0,-1 on either axis if the axis is >= 0.5f Multiple Axis can have values (ie [1,-1,0]) public static Vector2 AlignToAxis(this Vector2 v) Parameters v Vector2 Returns Vector2 AlignToAxis(Vector3) Aligns vector v to be either 1,0,-1 on either axis if the axis is >= 0.5f Multiple Axis can have values (ie [1,-1,0]) public static Vector3 AlignToAxis(this Vector3 v) Parameters v Vector3 Returns Vector3 Average(Vector2) Takes all values from v sum's them up and divides them by 2 public static float Average(this Vector2 v) Parameters v Vector2 Returns float Average(Vector2Int) Takes all values from v sum's them up and divides them by 2 public static float Average(this Vector2Int v) Parameters v Vector2Int Returns float Average(Vector3) Takes all values from v sum's them up and divides them by 3 public static float Average(this Vector3 v) Parameters v Vector3 Returns float Average(Vector3Int) Takes all values from v sum's them up and divides them by 3 public static float Average(this Vector3Int v) Parameters v Vector3Int Returns float Ceiling(Vector2) public static Vector2 Ceiling(this Vector2 v) Parameters v Vector2 Returns Vector2 Ceiling(Vector3) public static Vector3 Ceiling(this Vector3 v) Parameters v Vector3 Returns Vector3 Clamp(Vector2, float, float) Clamps all axis to between min and max, same as Mathf.Clamp() public static Vector2 Clamp(this Vector2 v, float min, float max) Parameters v Vector2 min float max float Returns Vector2 Clamp(Vector3, float, float) Clamps all axis to between min and max, same as Mathf.Clamp() public static Vector3 Clamp(this Vector3 v, float min, float max) Parameters v Vector3 min float max float Returns Vector3 CleanList(List<GameObject>) Tries to clean the list from all null GameObjects public static void CleanList(this List<GameObject> l) Parameters l List<GameObject> Convert(Vector2) Returns new Vector3(v.x, 0f, v.y) public static Vector3 Convert(this Vector2 v) Parameters v Vector2 Returns Vector3 DestroyChildren(GameObject, List<string>?, bool) public static void DestroyChildren(this GameObject obj, List<string>? namelist = null, bool whitelist = false) Parameters obj GameObject namelist List<string> whitelist bool Direction(Vector2, Vector2) Returns direction from v1 to v2 normalized public static Vector2 Direction(this Vector2 v1, Vector2 v2) Parameters v1 Vector2 v2 Vector2 Returns Vector2 Direction(Vector3, Vector3) Returns direction from v1 to v2 normalized public static Vector3 Direction(this Vector3 v1, Vector3 v2) Parameters v1 Vector3 v2 Vector3 Returns Vector3 DistanceIY(Vector3, Vector3) Returns distance while ignoring y values public static float DistanceIY(this Vector3 a, Vector3 b) Parameters a Vector3 b Vector3 Returns float Floor(Vector2) public static Vector2 Floor(this Vector2 v) Parameters v Vector2 Returns Vector2 Floor(Vector3) public static Vector3 Floor(this Vector3 v) Parameters v Vector3 Returns Vector3 IsUnityNull(object) Check if obj is unity obj and is not null public static bool IsUnityNull(this object obj) Parameters obj object Returns bool Rotate(Vector2, float) Rotates and returns vector by set amount of degres public static Vector2 Rotate(this Vector2 v, float delta) Parameters v Vector2 Original Vector delta float Degres Returns Vector2 Round(Vector2, int) Rounding to the specific number of digits public static Vector2 Round(this Vector2 v, int digits) Parameters v Vector2 digits int Returns Vector2 Round(Vector3, int) Rounding to the specific number of digits public static Vector3 Round(this Vector3 v, int digits) Parameters v Vector3 digits int Returns Vector3 Sum(Vector2) public static float Sum(this Vector2 v) Parameters v Vector2 Returns float Sum(Vector2Int) Gets sum of the x and y public static int Sum(this Vector2Int v) Parameters v Vector2Int Returns int Sum(Vector3) public static float Sum(this Vector3 v) Parameters v Vector3 Returns float Sum(Vector3Int) Gets sum of the x, y, z public static int Sum(this Vector3Int v) Parameters v Vector3Int Returns int"
  },
  "api/Petrosik.UnityUtility.Utility.html": {
    "href": "api/Petrosik.UnityUtility.Utility.html",
    "title": "Class Utility | Petrosik.Utility",
    "summary": "Class Utility Namespace Petrosik.UnityUtility Assembly PetrosikUtility.dll Contains all unity specific utility stuff public static class Utility Inheritance object Utility Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods BlendColors(Color, Color) Should blend colors additevely public static Color BlendColors(Color basec, Color additivec) Parameters basec Color Original color additivec Color Color that will be added Returns Color DistanceIY(Vector3, Vector3) Returns distance while ignoring y values public static float DistanceIY(Vector3 a, Vector3 b) Parameters a Vector3 b Vector3 Returns float GetRandomDirection() Returns random direction without using unity's random public static Vector2 GetRandomDirection() Returns Vector2 Perlin2D(int, int, float, bool) Creates a 2D perlin public static float[,] Perlin2D(int xsize, int ysize, float scale = 6, bool convertToPercent = false) Parameters xsize int ysize int scale float bigger scale number more detail convertToPercent bool Should convert the values to % Returns float[,]"
  },
  "api/Petrosik.UnityUtility.html": {
    "href": "api/Petrosik.UnityUtility.html",
    "title": "Namespace Petrosik.UnityUtility | Petrosik.Utility",
    "summary": "Namespace Petrosik.UnityUtility Classes ChancePart<T> ChanceTable<T> Chance table or loot table allows to add and then pull items with rarities, the items are weighted and have calculated pull values based on the amount of items in the pool + it's rarity Extensions All basic Modifications/Extensions Utility Contains all unity specific utility stuff"
  },
  "api/Petrosik.Utility.BiDictionary-2.html": {
    "href": "api/Petrosik.Utility.BiDictionary-2.html",
    "title": "Class BiDictionary<TKey, TValue> | Petrosik.Utility",
    "summary": "Class BiDictionary<TKey, TValue> Namespace Petrosik.Utility Assembly PetrosikUtility.dll Wrapper for dictionary making it able to list by either key or value in O(1) time, it's possible because it contains two dictionaries that stores both pair versions public class BiDictionary<TKey, TValue> : IDictionary<TKey, TValue>, ICollection<KeyValuePair<TKey, TValue>>, IEnumerable<KeyValuePair<TKey, TValue>>, IEnumerable where TKey : notnull where TValue : notnull Type Parameters TKey TValue Inheritance object BiDictionary<TKey, TValue> Implements IDictionary<TKey, TValue> ICollection<KeyValuePair<TKey, TValue>> IEnumerable<KeyValuePair<TKey, TValue>> IEnumerable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Extensions.IsUnityNull(object) Constructors BiDictionary() public BiDictionary() BiDictionary(Dictionary<TKey, TValue>) Copies all values in Dictionary and makes them listable public BiDictionary(Dictionary<TKey, TValue> Dictionary) Parameters Dictionary Dictionary<TKey, TValue> Properties Count Gets the number of elements contained in the ICollection<T>. public int Count { get; } Property Value int The number of elements contained in the ICollection<T>. IsReadOnly Gets a value indicating whether the ICollection<T> is read-only. public bool IsReadOnly { get; } Property Value bool true if the ICollection<T> is read-only; otherwise, false. this[TKey] Gets or sets the element with the specified key. public TValue this[TKey key] { get; set; } Parameters key TKey The key of the element to get or set. Property Value TValue The element with the specified key. Exceptions ArgumentNullException key is null. KeyNotFoundException The property is retrieved and key is not found. NotSupportedException The property is set and the IDictionary<TKey, TValue> is read-only. this[TValue] public TKey this[TValue key] { get; set; } Parameters key TValue Property Value TKey Keys Gets an ICollection<T> containing the keys of the IDictionary<TKey, TValue>. public ICollection<TKey> Keys { get; } Property Value ICollection<TKey> An ICollection<T> containing the keys of the object that implements IDictionary<TKey, TValue>. ReverseKeys public ICollection<TValue> ReverseKeys { get; } Property Value ICollection<TValue> ReverseValues public ICollection<TKey> ReverseValues { get; } Property Value ICollection<TKey> Values Gets an ICollection<T> containing the values in the IDictionary<TKey, TValue>. public ICollection<TValue> Values { get; } Property Value ICollection<TValue> An ICollection<T> containing the values in the object that implements IDictionary<TKey, TValue>. Methods Add(KeyValuePair<TKey, TValue>) Adds an item to the ICollection<T>. public void Add(KeyValuePair<TKey, TValue> item) Parameters item KeyValuePair<TKey, TValue> The object to add to the ICollection<T>. Exceptions NotSupportedException The ICollection<T> is read-only. Add(KeyValuePair<TValue, TKey>) public void Add(KeyValuePair<TValue, TKey> item) Parameters item KeyValuePair<TValue, TKey> Add(TKey, TValue) Adds an element with the provided key and value to the IDictionary<TKey, TValue>. public void Add(TKey key, TValue value) Parameters key TKey The object to use as the key of the element to add. value TValue The object to use as the value of the element to add. Exceptions ArgumentNullException key is null. ArgumentException An element with the same key already exists in the IDictionary<TKey, TValue>. NotSupportedException The IDictionary<TKey, TValue> is read-only. Add(TValue, TKey) public void Add(TValue key, TKey value) Parameters key TValue value TKey Clear() Removes all items from the ICollection<T>. public void Clear() Exceptions NotSupportedException The ICollection<T> is read-only. Contains(KeyValuePair<TKey, TValue>) Determines whether the ICollection<T> contains a specific value. public bool Contains(KeyValuePair<TKey, TValue> item) Parameters item KeyValuePair<TKey, TValue> The object to locate in the ICollection<T>. Returns bool true if item is found in the ICollection<T>; otherwise, false. Contains(KeyValuePair<TValue, TKey>) public bool Contains(KeyValuePair<TValue, TKey> item) Parameters item KeyValuePair<TValue, TKey> Returns bool ContainsKey(TKey) Determines whether the IDictionary<TKey, TValue> contains an element with the specified key. public bool ContainsKey(TKey key) Parameters key TKey The key to locate in the IDictionary<TKey, TValue>. Returns bool true if the IDictionary<TKey, TValue> contains an element with the key; otherwise, false. Exceptions ArgumentNullException key is null. ContainsKey(TValue) public bool ContainsKey(TValue key) Parameters key TValue Returns bool CopyTo(KeyValuePair<TKey, TValue>[], int) Copies the elements of the ICollection<T> to an Array, starting at a particular Array index. public void CopyTo(KeyValuePair<TKey, TValue>[] array, int arrayIndex) Parameters array KeyValuePair<TKey, TValue>[] The one-dimensional Array that is the destination of the elements copied from ICollection<T>. The Array must have zero-based indexing. arrayIndex int The zero-based index in array at which copying begins. Exceptions ArgumentNullException array is null. ArgumentOutOfRangeException arrayIndex is less than 0. ArgumentException The number of elements in the source ICollection<T> is greater than the available space from arrayIndex to the end of the destination array. CopyTo(KeyValuePair<TValue, TKey>[], int) public void CopyTo(KeyValuePair<TValue, TKey>[] array, int arrayIndex) Parameters array KeyValuePair<TValue, TKey>[] arrayIndex int GetEnumerator() Returns an enumerator that iterates through the collection. public IEnumerator<KeyValuePair<TKey, TValue>> GetEnumerator() Returns IEnumerator<KeyValuePair<TKey, TValue>> An enumerator that can be used to iterate through the collection. GetReverseEnumerator() public IEnumerator<KeyValuePair<TValue, TKey>> GetReverseEnumerator() Returns IEnumerator<KeyValuePair<TValue, TKey>> Remove(KeyValuePair<TKey, TValue>) Removes the first occurrence of a specific object from the ICollection<T>. public bool Remove(KeyValuePair<TKey, TValue> item) Parameters item KeyValuePair<TKey, TValue> The object to remove from the ICollection<T>. Returns bool true if item was successfully removed from the ICollection<T>; otherwise, false. This method also returns false if item is not found in the original ICollection<T>. Exceptions NotSupportedException The ICollection<T> is read-only. Remove(KeyValuePair<TValue, TKey>) public bool Remove(KeyValuePair<TValue, TKey> item) Parameters item KeyValuePair<TValue, TKey> Returns bool Remove(TKey) Removes the element with the specified key from the IDictionary<TKey, TValue>. public bool Remove(TKey key) Parameters key TKey The key of the element to remove. Returns bool true if the element is successfully removed; otherwise, false. This method also returns false if key was not found in the original IDictionary<TKey, TValue>. Exceptions ArgumentNullException key is null. NotSupportedException The IDictionary<TKey, TValue> is read-only. Remove(TValue) public bool Remove(TValue key) Parameters key TValue Returns bool TryGetValue(TKey, out TValue) Gets the value associated with the specified key. public bool TryGetValue(TKey key, out TValue value) Parameters key TKey The key whose value to get. value TValue When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the value parameter. This parameter is passed uninitialized. Returns bool true if the object that implements IDictionary<TKey, TValue> contains an element with the specified key; otherwise, false. Exceptions ArgumentNullException key is null. TryGetValue(TValue, out TKey) public bool TryGetValue(TValue key, out TKey value) Parameters key TValue value TKey Returns bool"
  },
  "api/Petrosik.Utility.ChancePart-1.html": {
    "href": "api/Petrosik.Utility.ChancePart-1.html",
    "title": "Class ChancePart<T> | Petrosik.Utility",
    "summary": "Class ChancePart<T> Namespace Petrosik.Utility Assembly PetrosikUtility.dll [Serializable] public class ChancePart<T> where T : notnull Type Parameters T Inheritance object ChancePart<T> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods Extensions.IsUnityNull(object) Fields Chance Perecentage for spawn rate public float Chance Field Value float Object public T Object Field Value T Rarity public Rarity Rarity Field Value Rarity Methods Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/Petrosik.Utility.ChanceTable-1.html": {
    "href": "api/Petrosik.Utility.ChanceTable-1.html",
    "title": "Class ChanceTable<T> | Petrosik.Utility",
    "summary": "Class ChanceTable<T> Namespace Petrosik.Utility Assembly PetrosikUtility.dll Chance table or loot table allows to add and then pull items with rarities, the items are weighted and have calculated pull values based on the amount of items in the pool + it's rarity [Serializable] public class ChanceTable<T> : IEnumerable<ChancePart<T>>, IEnumerable, IEnumerator<ChancePart<T>>, IEnumerator, IDisposable where T : notnull Type Parameters T Inheritance object ChanceTable<T> Implements IEnumerable<ChancePart<T>> IEnumerable IEnumerator<ChancePart<T>> IEnumerator IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Extensions.IsUnityNull(object) Properties Count public int Count { get; } Property Value int Current Gets the element in the collection at the current position of the enumerator. public ChancePart<T> Current { get; } Property Value ChancePart<T> The element in the collection at the current position of the enumerator. RaritysCount Count of each rarity inside the table public Dictionary<Rarity, int> RaritysCount { get; } Property Value Dictionary<Rarity, int> TableAvrgRarity Average rarity of the table public Rarity TableAvrgRarity { get; } Property Value Rarity Methods Add(Rarity, T) Adds the item with the rarity to the table public void Add(Rarity Rarity, T item) Parameters Rarity Rarity item T Clear() Clears the table public void Clear() Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public void Dispose() Exists(T) public bool Exists(T item) Parameters item T Returns bool GetEnumerator() Returns an enumerator that iterates through the collection. public IEnumerator<ChancePart<T>> GetEnumerator() Returns IEnumerator<ChancePart<T>> An enumerator that can be used to iterate through the collection. GetItem(bool) Returns random item from the table based on its weighted value public T? GetItem(bool RemoveAfterPull = false) Parameters RemoveAfterPull bool Should the item be removed from the table after pull Returns T GetItemWithRarity(List<Rarity>, bool) Returns random item from the table that is insinde the range based on its weighted value public T? GetItemWithRarity(List<Rarity> Range, bool RemoveAfterPull = false) Parameters Range List<Rarity> RemoveAfterPull bool Should the item be removed from the table after pull Returns T MoveNext() Advances the enumerator to the next element of the collection. public bool MoveNext() Returns bool true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection. Exceptions InvalidOperationException The collection was modified after the enumerator was created. Remove(T) Removes the item from the table public bool Remove(T item) Parameters item T Returns bool RemoveAt(int) public void RemoveAt(int i) Parameters i int Reset() Sets the enumerator to its initial position, which is before the first element in the collection. public void Reset() Exceptions InvalidOperationException The collection was modified after the enumerator was created. NotSupportedException The enumerator does not support being reset."
  },
  "api/Petrosik.Utility.DetRandom.html": {
    "href": "api/Petrosik.Utility.DetRandom.html",
    "title": "Class DetRandom | Petrosik.Utility",
    "summary": "Class DetRandom Namespace Petrosik.Utility Assembly PetrosikUtility.dll (deterministic friendly) Random with exposed Seed and number of actions(Pulls) taken. public class DetRandom Tip Works very similar to normal Random Inheritance object DetRandom Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods Extensions.IsUnityNull(object) Properties Pulls The number of actions taken from the creation of the random public uint Pulls { get; } Property Value uint Seed public int Seed { get; } Property Value int Methods Export() Exports string that can be inported public string Export() Returns string string formated: $\"{Seed},{Pulls}\" Next() public int Next() Returns int Next(int) public int Next(int maxValue) Parameters maxValue int Returns int Next(int, int) public int Next(int minValue, int maxValue) Parameters minValue int maxValue int Returns int NextBytes(byte[]) public void NextBytes(byte[] buffer) Parameters buffer byte[] NextDouble() public double NextDouble() Returns double NextInt64() public long NextInt64() Returns long NextInt64(int) public long NextInt64(int maxValue) Parameters maxValue int Returns long NextInt64(int, int) public long NextInt64(int minValue, int maxValue) Parameters minValue int maxValue int Returns long NextSingle() public float NextSingle() Returns float ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/Petrosik.Utility.Extensions.html": {
    "href": "api/Petrosik.Utility.Extensions.html",
    "title": "Class Extensions | Petrosik.Utility",
    "summary": "Class Extensions Namespace Petrosik.Utility Assembly PetrosikUtility.dll All basic Modifications/Extensions public static class Extensions Inheritance object Extensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Abs(PointF) Returns abs vector value public static PointF Abs(this PointF v) Parameters v PointF Returns PointF Ceiling(PointF) public static PointF Ceiling(this PointF v) Parameters v PointF Returns PointF Direction(PointF, PointF) Returns direction from v1 to v2 normalized public static PointF Direction(this PointF v1, PointF v2) Parameters v1 PointF v2 PointF Returns PointF Distance(PointF, PointF) Returns distance from v1 to v2 public static float Distance(this PointF v1, PointF v2) Parameters v1 PointF v2 PointF Returns float Floor(PointF) Floors the point public static PointF Floor(this PointF v) Parameters v PointF Returns PointF Merge(byte[][]) Merges Arrays into one public static byte[] Merge(this byte[][] bytes) Parameters bytes byte[][] Returns byte[] Normalize(PointF) Normalizes point between 0 and 1 public static PointF Normalize(this PointF point) Parameters point PointF Returns PointF Normalize(float, float, float) Scales value between 0 and 1 public static float Normalize(this float value, float min_value, float max_value) Parameters value float min_value float max_value float Returns float Rotate(PointF, float) Rotates and returns vector by set amount of degres public static PointF Rotate(this PointF v, float delta) Parameters v PointF Original Point delta float Degres Returns PointF Round(PointF, int) Rounds the numbers to the set of digits public static PointF Round(this PointF v, int digits) Parameters v PointF digits int Returns PointF Split(byte[], int) Splits array into multiple arrays by provided chunk size public static byte[][] Split(this byte[] bytes, int chunkSize) Parameters bytes byte[] chunkSize int Returns byte[][] Sum(PointF) Gets sum of the x and y public static float Sum(this PointF v) Parameters v PointF Returns float ToShortString(BigInteger, int, int) Creates string similar to debbuger display if the number is too big public static string ToShortString(this BigInteger val, int digits = 8, int cutoff = 99999999) Parameters val BigInteger digits int How many digits to show cutoff int Number bigger than this is gonna get converted to the shorter version Returns string"
  },
  "api/Petrosik.Utility.Save-1.html": {
    "href": "api/Petrosik.Utility.Save-1.html",
    "title": "Class Save<T> | Petrosik.Utility",
    "summary": "Class Save<T> Namespace Petrosik.Utility Assembly PetrosikUtility.dll Wrapper for save data with additional information public class Save<T> Type Parameters T Inheritance object Save<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Extensions.IsUnityNull(object) Constructors Save(T) public Save(T SaveData) Parameters SaveData T Fields Created public DateTime Created Field Value DateTime LastUpdated public DateTime LastUpdated Field Value DateTime SaveData public T SaveData Field Value T Version public Version Version Field Value Version Properties Description Limited to 1024 characters [JsonIgnore] public string Description { get; set; } Property Value string Name Limited to 64 characters [JsonIgnore] public string Name { get; set; } Property Value string"
  },
  "api/Petrosik.Utility.SaveManager.html": {
    "href": "api/Petrosik.Utility.SaveManager.html",
    "title": "Class SaveManager | Petrosik.Utility",
    "summary": "Class SaveManager Namespace Petrosik.Utility Assembly PetrosikUtility.dll public class SaveManager Inheritance object SaveManager Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Extensions.IsUnityNull(object) Constructors SaveManager(string) public SaveManager(string SavesFolderPath) Parameters SavesFolderPath string SaveManager(string, SpecialFolder) public SaveManager(string SavesFolderName, Environment.SpecialFolder SpecialFolder) Parameters SavesFolderName string SpecialFolder Environment.SpecialFolder Fields CurrentSaveVersion public Version CurrentSaveVersion Field Value Version SavesPath public string SavesPath Field Value string Methods Delete(string) Tries to deletes the save file in the save folder if it exists public void Delete(string Name) Parameters Name string LoadInfo<T>(string) Loads only Additional Info, if the file exists public Save<T>? LoadInfo<T>(string Name) Parameters Name string Returns Save<T> Type Parameters T Load<T>(bool) Tries to load all saves in the saves folder public IEnumerable<Save<T>?> Load<T>(bool InfoOnly) where T : notnull Parameters InfoOnly bool Specifies if to load only the Save<T> wrapper information Returns IEnumerable<Save<T>> Type Parameters T Load<T>(string, bool) Tries to load the save by the Name if it exists public Save<T>? Load<T>(string Name, bool InfoOnly) where T : notnull Parameters Name string InfoOnly bool Specifies if to load only the Save<T> wrapper information Returns Save<T> Type Parameters T Save<T>(IEnumerable<KeyValuePair<string, T>>) Works same as it's single counter part public void Save<T>(IEnumerable<KeyValuePair<string, T>> Saves) where T : notnull Parameters Saves IEnumerable<KeyValuePair<string, T>> Type Parameters T Save<T>(IEnumerable<(string Name, Save<T> Save, bool UpdateWrapper)>) Works same as it's single counter part public void Save<T>(IEnumerable<(string Name, Save<T> Save, bool UpdateWrapper)> Saves) where T : notnull Parameters Saves IEnumerable<(string Name, Save<T> Save, bool UpdateWrapper)> Type Parameters T Save<T>(string, Save<T>, bool) If UpdateWrapper is false it save the Save as is, otherwise it tries to updates wrapper values (LastUpdated, Version, etc.) if the file already exists public void Save<T>(string Name, Save<T> Save, bool UpdateWrapper = false) where T : notnull Parameters Name string Save Save<T> UpdateWrapper bool Type Parameters T Save<T>(string, T) Saves the Save by the Name in the save folder In case it get passed the wrapper Save<T> class as the Save it strips it and saves only the SaveData public void Save<T>(string Name, T Save) where T : notnull Parameters Name string Save T Type Parameters T"
  },
  "api/Petrosik.Utility.Utility.html": {
    "href": "api/Petrosik.Utility.Utility.html",
    "title": "Class Utility | Petrosik.Utility",
    "summary": "Class Utility Namespace Petrosik.Utility Assembly PetrosikUtility.dll Main Utility Class public static class Utility Tip Recommended when using: using Utility = Petrosik.Utility.Utility; Inheritance object Utility Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods BlendColors(Color, Color) should blend colors additevely public static Color BlendColors(Color basec, Color additivec) Parameters basec Color Original color additivec Color Color that will be added Returns Color ChanceRoll(double) Rolls and returns true or false if the rolled number is smaller than the chance public static bool ChanceRoll(double chance) Parameters chance double clamped 0 to 100 Returns bool ChanceRoll(double, double) Rolls and returns true or false if the rolled number is smaller than the maxChance and bigger than minChance public static bool ChanceRoll(double minChance, double maxChance) Parameters minChance double clamped 0 to 100 maxChance double clamped 0 to 100 Returns bool Compress(byte[]) Compresses data using GZip public static byte[] Compress(byte[] data) Parameters data byte[] Returns byte[] ConsoleLog(Exception, string?) Formatted log method based on exception with additional message public static void ConsoleLog(Exception e, string? AdittionalMessage = null) Parameters e Exception AdittionalMessage string Additional message that will be shown ConsoleLog(object) Formatted log method, simplified version for quicker use public static void ConsoleLog(object obj) Parameters obj object ConsoleLog(string, InfoType) Formatted log method, ie: Input: ConsoleLog(\"Hello World!\", InfoType.Info) Console: [HH:mm:ss] [i]Hello World! public static void ConsoleLog(string text, InfoType infotype = InfoType.Info) Parameters text string Message infotype InfoType Severity Decompress(byte[]) Decompresses data using GZip public static byte[] Decompress(byte[] compressedData) Parameters compressedData byte[] Returns byte[] Deserialize<T>(byte[]) Decompresses byte array and deserializes using JsonSerializer before returning the type public static T? Deserialize<T>(byte[] compressedData) Parameters compressedData byte[] Returns T Type Parameters T FitMessageLimit(string, int, int, int) Splits string into a list of strings by spaces untill it reached message limit, overridechunksize makes it ignore spaces public static List<string> FitMessageLimit(string str, int messagelimit, int overhead = 650, int overridechunksize = 0) Parameters str string Original Text messagelimit int How long should the split message be max (with overhead) overhead int How much space should be at the end of the split part overridechunksize int Set lenght how long should the messages be (ignores overhead) Returns List<string> GetEnumTypes<T>() Returns list of all options in the enum public static List<T> GetEnumTypes<T>() where T : Enum Returns List<T> Type Parameters T Enum type GetRandomDirection() Returns random direction public static PointF GetRandomDirection() Returns PointF MatchAndFillNull<T>(int) public static List<T?> MatchAndFillNull<T>(int count) Parameters count int Returns List<T> Type Parameters T NextExponential(int, int, out double, double) Returns a random \"chance\" from 100 to 0 in the range based on semi exponencial curve. Mapped 100 = min , 0 = max public static double NextExponential(int min, int max, out double rngNum, double lambda = 2) Parameters min int max int rngNum double The randomly generated number lambda double How straight the curve is(bigger number straigther it is) Returns double Rotate(PointF, float) rotates vector(normalized direction) by set amount of degres public static PointF Rotate(PointF v, float delta) Parameters v PointF Original vector delta float Degres Returns PointF Serialize<T>(T) Serializes obj using JsonSerializer and compresses it before returning byte array public static byte[] Serialize<T>(T obj) Parameters obj T Returns byte[] Type Parameters T SplitText(string, out string?, int, char) Splits text based on spaces or by \" public static string?[] SplitText(string message, out string? tempparam, int paramlenght = 8, char prefix = '$') Parameters message string Original text to split tempparam string Remaining text that couldn't fit paramlenght int How many words to split for prefix char Prefix to remove Returns string[] Input: Hi, world. \"This is a example\" Output: [Hi,,world.,\"This is a example\"]"
  },
  "api/Petrosik.Utility.html": {
    "href": "api/Petrosik.Utility.html",
    "title": "Namespace Petrosik.Utility | Petrosik.Utility",
    "summary": "Namespace Petrosik.Utility Classes BiDictionary<TKey, TValue> Wrapper for dictionary making it able to list by either key or value in O(1) time, it's possible because it contains two dictionaries that stores both pair versions ChancePart<T> ChanceTable<T> Chance table or loot table allows to add and then pull items with rarities, the items are weighted and have calculated pull values based on the amount of items in the pool + it's rarity DetRandom (deterministic friendly) Random with exposed Seed and number of actions(Pulls) taken. Extensions All basic Modifications/Extensions SaveManager Save<T> Wrapper for save data with additional information Utility Main Utility Class Recommended when using: using Utility = Petrosik.Utility.Utility;"
  },
  "api/Petrosik.VersioningTool.VersioningAction.html": {
    "href": "api/Petrosik.VersioningTool.VersioningAction.html",
    "title": "Class VersioningAction | Petrosik.Utility",
    "summary": "Class VersioningAction Namespace Petrosik.VersioningTool Assembly PetrosikUtility.dll public class VersioningAction Inheritance object VersioningAction Inherited Members object.Equals(object) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods Extensions.IsUnityNull(object) Properties FAttributes public FieldAttributes FAttributes { get; set; } Property Value FieldAttributes IsField only applies for field/property changes true = field, false = property public bool IsField { get; set; } Property Value bool OriginName public string? OriginName { get; set; } Property Value string OriginType public Type? OriginType { get; set; } Property Value Type PAttributes public PropertyAttributes PAttributes { get; set; } Property Value PropertyAttributes TargetName public string? TargetName { get; set; } Property Value string TargetType public Type? TargetType { get; set; } Property Value Type Type public VersioningActionType Type { get; set; } Property Value VersioningActionType Value public object? Value { get; set; } Property Value object ValueConverter this can be value converter or value modifer public Func<object, object>? ValueConverter { get; set; } Property Value Func<object, object> Note OriginName and OriginType are pairs you need to fill out both. Same with target. Methods Tip Make sure to use correct constructor if you don't know what you are doing. There are multiple preset constructors that you can use, and for the most part it's all you need. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/Petrosik.VersioningTool.VersioningTool-2.html": {
    "href": "api/Petrosik.VersioningTool.VersioningTool-2.html",
    "title": "Class VersioningTool<TIn, TOut> | Petrosik.Utility",
    "summary": "Class VersioningTool<TIn, TOut> Namespace Petrosik.VersioningTool Assembly PetrosikUtility.dll public class VersioningTool<TIn, TOut> : IEnumerable<VersioningAction>, IEnumerable where TIn : notnull where TOut : notnull Type Parameters TIn TOut Inheritance object VersioningTool<TIn, TOut> Implements IEnumerable<VersioningAction> IEnumerable Inherited Members object.Equals(object) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods Extensions.IsUnityNull(object) Properties Actions public IReadOnlyDictionary<Version, VersioningAction> Actions { get; } Property Value IReadOnlyDictionary<Version, VersioningAction> this[VersioningActionType] public IEnumerable<KeyValuePair<Version, VersioningAction>> this[VersioningActionType key] { get; } Parameters key VersioningActionType Property Value IEnumerable<KeyValuePair<Version, VersioningAction>> this[Version] public VersioningAction this[Version key] { get; } Parameters key Version Property Value VersioningAction Methods AutoGenerateVersions(object, object, Version?, Version?) Tries to generate actions that will change the current object into the target. Additionally you can specify what version they will start and tries to fit into the maxv version public void AutoGenerateVersions(object current, object target, Version? currentv = null, Version? maxv = null) Warning Deletes all current actions! Note I give up on trying to also get difference between values. mby in the future(prob not) Parameters current object target object currentv Version maxv Version Clear() Removes all Actions public void Clear() CompleteUpdate(TIn, Version, Version) Applies the updates to the obj that are > than current and <= than target and tries to convert it to the output type Make sure TOut type has empty constructor (no parameters) otherwise use the SimpleUpdate public TOut CompleteUpdate(TIn obj, Version current, Version target) Parameters obj TIn current Version target Version Returns TOut GetEnumerator() Returns an enumerator that iterates through the collection. public IEnumerator<VersioningAction> GetEnumerator() Returns IEnumerator<VersioningAction> An enumerator that can be used to iterate through the collection. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. Insert(Version, VersioningAction) Insesrts action into the list. If the version is already inside it shifts it and all after that conflicts public void Insert(Version version, VersioningAction action) Parameters version Version action VersioningAction Modify(Version, VersioningAction) Modifies Action specified by version public void Modify(Version version, VersioningAction action) Parameters version Version action VersioningAction Remove(Version) Removes Action public void Remove(Version version) Parameters version Version Exceptions Exception Shift(Version, Version) Moves the action on oldVersion to the newVersion public void Shift(Version oldVersion, Version newVersion) Parameters oldVersion Version newVersion Version Exceptions Exception SimpleUpdate(object, Version, Version) Applies the updates to the obj that are > than current and <= than target public object SimpleUpdate(object obj, Version current, Version target) Parameters obj object current Version target Version Returns object ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/Petrosik.VersioningTool.html": {
    "href": "api/Petrosik.VersioningTool.html",
    "title": "Namespace Petrosik.VersioningTool | Petrosik.Utility",
    "summary": "Namespace Petrosik.VersioningTool Classes VersioningAction VersioningTool<TIn, TOut>"
  },
  "docs/getting-started.html": {
    "href": "docs/getting-started.html",
    "title": "Getting Started | Petrosik.Utility",
    "summary": "Getting Started"
  },
  "docs/introduction.html": {
    "href": "docs/introduction.html",
    "title": "Introduction | Petrosik.Utility",
    "summary": "[] Introduction Collection of usefull code and code that i use in most of my projects. Features Collection of utility methods Collection of utility methods for UnityEngine Collection of utility methods for ImageSharp Sqlite Helper Chance Table Determistic Random Versioning Tool Pathfinding Save Manager Bidirectional Dictionary Support For any questions or help, feel free to contact us or open an issue."
  },
  "index.html": {
    "href": "index.html",
    "title": "Introduction | Petrosik.Utility",
    "summary": "[] Introduction Collection of usefull code and code that i use in most of my projects. Features Collection of utility methods Collection of utility methods for UnityEngine Collection of utility methods for ImageSharp Sqlite Helper Chance Table Determistic Random Versioning Tool Pathfinding Support For any questions or help, feel free to contact us or open an issue."
  }
}