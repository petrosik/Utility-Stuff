### YamlMime:ManagedReference
items:
- uid: Petrosik.Sql.SqlManager
  commentId: T:Petrosik.Sql.SqlManager
  id: SqlManager
  parent: Petrosik.Sql
  children:
  - Petrosik.Sql.SqlManager.ExecuteCommand(System.String,System.Object)
  - Petrosik.Sql.SqlManager.ExecuteQuarry``2(System.String,System.Object)
  - Petrosik.Sql.SqlManager.LoadAll``2(System.String,System.Func{System.Object,``1})
  - Petrosik.Sql.SqlManager.Load``2(``0,System.String,System.Func{System.Object,``1})
  - Petrosik.Sql.SqlManager.Remove``1(``0,System.String)
  - Petrosik.Sql.SqlManager.SaveAll``1(System.Collections.Generic.IEnumerable{``0},System.String)
  - Petrosik.Sql.SqlManager.Save``1(``0,System.String)
  - Petrosik.Sql.SqlManager.SetPath(System.String,System.Boolean)
  - Petrosik.Sql.SqlManager.SqlMainManager``3(Petrosik.Enums.SQLOptions,System.String,``0,``1,System.Collections.Generic.IEnumerable{``1},System.Func{System.Object,``1},System.Func{``1,``2})
  - Petrosik.Sql.SqlManager.UpdateOrUpsertList``1(System.Collections.Generic.IEnumerable{``0},System.String)
  - Petrosik.Sql.SqlManager.UpdateOrUpsert``1(``0,System.String)
  - Petrosik.Sql.SqlManager.Update``1(``0,System.String)
  langs:
  - csharp
  - vb
  name: SqlManager
  nameWithType: SqlManager
  fullName: Petrosik.Sql.SqlManager
  type: Class
  source:
    remote:
      path: Utility/SqlManager.cs
      branch: master
      repo: https://github.com/petrosik/Utility-Stuff
    id: SqlManager
    path: ../Utility/SqlManager.cs
    startLine: 13
  assemblies:
  - PetrosikUtility
  namespace: Petrosik.Sql
  syntax:
    content: public class SqlManager
    content.vb: Public Class SqlManager
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - System.Object.Petrosik.UnityUtility.Extensions.IsUnityNull
- uid: Petrosik.Sql.SqlManager.SetPath(System.String,System.Boolean)
  commentId: M:Petrosik.Sql.SqlManager.SetPath(System.String,System.Boolean)
  id: SetPath(System.String,System.Boolean)
  parent: Petrosik.Sql.SqlManager
  langs:
  - csharp
  - vb
  name: SetPath(string, bool)
  nameWithType: SqlManager.SetPath(string, bool)
  fullName: Petrosik.Sql.SqlManager.SetPath(string, bool)
  type: Method
  source:
    remote:
      path: Utility/SqlManager.cs
      branch: master
      repo: https://github.com/petrosik/Utility-Stuff
    id: SetPath
    path: ../Utility/SqlManager.cs
    startLine: 36
  assemblies:
  - PetrosikUtility
  namespace: Petrosik.Sql
  summary: Sets path to the .db file
  example: []
  syntax:
    content: public void SetPath(string path, bool ignoreCheck = false)
    parameters:
    - id: path
      type: System.String
      description: ''
    - id: ignoreCheck
      type: System.Boolean
      description: Ignore if the .db file doesn't exist
    content.vb: Public Sub SetPath(path As String, ignoreCheck As Boolean = False)
  overload: Petrosik.Sql.SqlManager.SetPath*
  nameWithType.vb: SqlManager.SetPath(String, Boolean)
  fullName.vb: Petrosik.Sql.SqlManager.SetPath(String, Boolean)
  name.vb: SetPath(String, Boolean)
- uid: Petrosik.Sql.SqlManager.ExecuteCommand(System.String,System.Object)
  commentId: M:Petrosik.Sql.SqlManager.ExecuteCommand(System.String,System.Object)
  id: ExecuteCommand(System.String,System.Object)
  parent: Petrosik.Sql.SqlManager
  langs:
  - csharp
  - vb
  name: ExecuteCommand(string, object?)
  nameWithType: SqlManager.ExecuteCommand(string, object?)
  fullName: Petrosik.Sql.SqlManager.ExecuteCommand(string, object?)
  type: Method
  source:
    remote:
      path: Utility/SqlManager.cs
      branch: master
      repo: https://github.com/petrosik/Utility-Stuff
    id: ExecuteCommand
    path: ../Utility/SqlManager.cs
    startLine: 56
  assemblies:
  - PetrosikUtility
  namespace: Petrosik.Sql
  summary: Tries to execute the Command with the params
  example: []
  syntax:
    content: public int? ExecuteCommand(string Command, object? param)
    parameters:
    - id: Command
      type: System.String
      description: ''
    - id: param
      type: System.Object
      description: ''
    return:
      type: System.Nullable{System.Int32}
      description: ''
    content.vb: Public Function ExecuteCommand(Command As String, param As Object) As Integer?
  overload: Petrosik.Sql.SqlManager.ExecuteCommand*
  nameWithType.vb: SqlManager.ExecuteCommand(String, Object)
  fullName.vb: Petrosik.Sql.SqlManager.ExecuteCommand(String, Object)
  name.vb: ExecuteCommand(String, Object)
- uid: Petrosik.Sql.SqlManager.ExecuteQuarry``2(System.String,System.Object)
  commentId: M:Petrosik.Sql.SqlManager.ExecuteQuarry``2(System.String,System.Object)
  id: ExecuteQuarry``2(System.String,System.Object)
  parent: Petrosik.Sql.SqlManager
  langs:
  - csharp
  - vb
  name: ExecuteQuarry<TKey, TValue>(string, object?)
  nameWithType: SqlManager.ExecuteQuarry<TKey, TValue>(string, object?)
  fullName: Petrosik.Sql.SqlManager.ExecuteQuarry<TKey, TValue>(string, object?)
  type: Method
  source:
    remote:
      path: Utility/SqlManager.cs
      branch: master
      repo: https://github.com/petrosik/Utility-Stuff
    id: ExecuteQuarry
    path: ../Utility/SqlManager.cs
    startLine: 79
  assemblies:
  - PetrosikUtility
  namespace: Petrosik.Sql
  summary: Tries to execute the QuarryCommand with the params
  example: []
  syntax:
    content: public IEnumerable<object> ExecuteQuarry<TKey, TValue>(string Command, object? param)
    parameters:
    - id: Command
      type: System.String
      description: ''
    - id: param
      type: System.Object
      description: ''
    typeParameters:
    - id: TKey
      description: ''
    - id: TValue
      description: ''
    return:
      type: System.Collections.Generic.IEnumerable{System.Object}
      description: ''
    content.vb: Public Function ExecuteQuarry(Of TKey, TValue)(Command As String, param As Object) As IEnumerable(Of Object)
  overload: Petrosik.Sql.SqlManager.ExecuteQuarry*
  nameWithType.vb: SqlManager.ExecuteQuarry(Of TKey, TValue)(String, Object)
  fullName.vb: Petrosik.Sql.SqlManager.ExecuteQuarry(Of TKey, TValue)(String, Object)
  name.vb: ExecuteQuarry(Of TKey, TValue)(String, Object)
- uid: Petrosik.Sql.SqlManager.LoadAll``2(System.String,System.Func{System.Object,``1})
  commentId: M:Petrosik.Sql.SqlManager.LoadAll``2(System.String,System.Func{System.Object,``1})
  id: LoadAll``2(System.String,System.Func{System.Object,``1})
  parent: Petrosik.Sql.SqlManager
  langs:
  - csharp
  - vb
  name: LoadAll<TKey, TValue>(string, Func<object, TValue>)
  nameWithType: SqlManager.LoadAll<TKey, TValue>(string, Func<object, TValue>)
  fullName: Petrosik.Sql.SqlManager.LoadAll<TKey, TValue>(string, System.Func<object, TValue>)
  type: Method
  source:
    remote:
      path: Utility/SqlManager.cs
      branch: master
      repo: https://github.com/petrosik/Utility-Stuff
    id: LoadAll
    path: ../Utility/SqlManager.cs
    startLine: 103
  assemblies:
  - PetrosikUtility
  namespace: Petrosik.Sql
  summary: >-
    Loads entire table

    <p>Needs the table and the output type to have Id property!!!!</p>
  example: []
  syntax:
    content: public Dictionary<TKey, TValue>? LoadAll<TKey, TValue>(string tableName, Func<object, TValue> dataConverter)
    parameters:
    - id: tableName
      type: System.String
      description: ''
    - id: dataConverter
      type: System.Func{System.Object,{TValue}}
      description: ''
    typeParameters:
    - id: TKey
      description: ''
    - id: TValue
      description: ''
    return:
      type: System.Collections.Generic.Dictionary{{TKey},{TValue}}
      description: ''
    content.vb: Public Function LoadAll(Of TKey, TValue)(tableName As String, dataConverter As Func(Of Object, TValue)) As Dictionary(Of TKey, TValue)
  overload: Petrosik.Sql.SqlManager.LoadAll*
  nameWithType.vb: SqlManager.LoadAll(Of TKey, TValue)(String, Func(Of Object, TValue))
  fullName.vb: Petrosik.Sql.SqlManager.LoadAll(Of TKey, TValue)(String, System.Func(Of Object, TValue))
  name.vb: LoadAll(Of TKey, TValue)(String, Func(Of Object, TValue))
- uid: Petrosik.Sql.SqlManager.Load``2(``0,System.String,System.Func{System.Object,``1})
  commentId: M:Petrosik.Sql.SqlManager.Load``2(``0,System.String,System.Func{System.Object,``1})
  id: Load``2(``0,System.String,System.Func{System.Object,``1})
  parent: Petrosik.Sql.SqlManager
  langs:
  - csharp
  - vb
  name: Load<TId, TData>(TId, string, Func<object, TData>)
  nameWithType: SqlManager.Load<TId, TData>(TId, string, Func<object, TData>)
  fullName: Petrosik.Sql.SqlManager.Load<TId, TData>(TId, string, System.Func<object, TData>)
  type: Method
  source:
    remote:
      path: Utility/SqlManager.cs
      branch: master
      repo: https://github.com/petrosik/Utility-Stuff
    id: Load
    path: ../Utility/SqlManager.cs
    startLine: 137
  assemblies:
  - PetrosikUtility
  namespace: Petrosik.Sql
  summary: >-
    Loads single entry from table

    <p>Needs the table and the output type to have Id property!!!!</p>
  example: []
  syntax:
    content: public TData Load<TId, TData>(TId id, string tableName, Func<object, TData> entityConverter)
    parameters:
    - id: id
      type: '{TId}'
      description: ''
    - id: tableName
      type: System.String
      description: ''
    - id: entityConverter
      type: System.Func{System.Object,{TData}}
      description: ''
    typeParameters:
    - id: TId
      description: ''
    - id: TData
      description: ''
    return:
      type: '{TData}'
      description: ''
    content.vb: Public Function Load(Of TId, TData)(id As TId, tableName As String, entityConverter As Func(Of Object, TData)) As TData
  overload: Petrosik.Sql.SqlManager.Load*
  nameWithType.vb: SqlManager.Load(Of TId, TData)(TId, String, Func(Of Object, TData))
  fullName.vb: Petrosik.Sql.SqlManager.Load(Of TId, TData)(TId, String, System.Func(Of Object, TData))
  name.vb: Load(Of TId, TData)(TId, String, Func(Of Object, TData))
- uid: Petrosik.Sql.SqlManager.Save``1(``0,System.String)
  commentId: M:Petrosik.Sql.SqlManager.Save``1(``0,System.String)
  id: Save``1(``0,System.String)
  parent: Petrosik.Sql.SqlManager
  langs:
  - csharp
  - vb
  name: Save<TData>(TData, string)
  nameWithType: SqlManager.Save<TData>(TData, string)
  fullName: Petrosik.Sql.SqlManager.Save<TData>(TData, string)
  type: Method
  source:
    remote:
      path: Utility/SqlManager.cs
      branch: master
      repo: https://github.com/petrosik/Utility-Stuff
    id: Save
    path: ../Utility/SqlManager.cs
    startLine: 170
  assemblies:
  - PetrosikUtility
  namespace: Petrosik.Sql
  summary: >-
    Saves single entry to the database

    <p>Uses insert as the db command</p>
  example: []
  syntax:
    content: public void Save<TData>(TData data, string tableName)
    parameters:
    - id: data
      type: '{TData}'
      description: ''
    - id: tableName
      type: System.String
      description: ''
    typeParameters:
    - id: TData
      description: ''
    content.vb: Public Sub Save(Of TData)(data As TData, tableName As String)
  overload: Petrosik.Sql.SqlManager.Save*
  nameWithType.vb: SqlManager.Save(Of TData)(TData, String)
  fullName.vb: Petrosik.Sql.SqlManager.Save(Of TData)(TData, String)
  name.vb: Save(Of TData)(TData, String)
- uid: Petrosik.Sql.SqlManager.SaveAll``1(System.Collections.Generic.IEnumerable{``0},System.String)
  commentId: M:Petrosik.Sql.SqlManager.SaveAll``1(System.Collections.Generic.IEnumerable{``0},System.String)
  id: SaveAll``1(System.Collections.Generic.IEnumerable{``0},System.String)
  parent: Petrosik.Sql.SqlManager
  langs:
  - csharp
  - vb
  name: SaveAll<TData>(IEnumerable<TData>, string)
  nameWithType: SqlManager.SaveAll<TData>(IEnumerable<TData>, string)
  fullName: Petrosik.Sql.SqlManager.SaveAll<TData>(System.Collections.Generic.IEnumerable<TData>, string)
  type: Method
  source:
    remote:
      path: Utility/SqlManager.cs
      branch: master
      repo: https://github.com/petrosik/Utility-Stuff
    id: SaveAll
    path: ../Utility/SqlManager.cs
    startLine: 195
  assemblies:
  - PetrosikUtility
  namespace: Petrosik.Sql
  summary: >-
    Saves list of entries to database

    <p>Uses insert as the db command</p>
  example: []
  syntax:
    content: public void SaveAll<TData>(IEnumerable<TData> data, string tableName)
    parameters:
    - id: data
      type: System.Collections.Generic.IEnumerable{{TData}}
      description: ''
    - id: tableName
      type: System.String
      description: ''
    typeParameters:
    - id: TData
      description: ''
    content.vb: Public Sub SaveAll(Of TData)(data As IEnumerable(Of TData), tableName As String)
  overload: Petrosik.Sql.SqlManager.SaveAll*
  nameWithType.vb: SqlManager.SaveAll(Of TData)(IEnumerable(Of TData), String)
  fullName.vb: Petrosik.Sql.SqlManager.SaveAll(Of TData)(System.Collections.Generic.IEnumerable(Of TData), String)
  name.vb: SaveAll(Of TData)(IEnumerable(Of TData), String)
- uid: Petrosik.Sql.SqlManager.Update``1(``0,System.String)
  commentId: M:Petrosik.Sql.SqlManager.Update``1(``0,System.String)
  id: Update``1(``0,System.String)
  parent: Petrosik.Sql.SqlManager
  langs:
  - csharp
  - vb
  name: Update<TData>(TData, string)
  nameWithType: SqlManager.Update<TData>(TData, string)
  fullName: Petrosik.Sql.SqlManager.Update<TData>(TData, string)
  type: Method
  source:
    remote:
      path: Utility/SqlManager.cs
      branch: master
      repo: https://github.com/petrosik/Utility-Stuff
    id: Update
    path: ../Utility/SqlManager.cs
    startLine: 223
  assemblies:
  - PetrosikUtility
  namespace: Petrosik.Sql
  summary: >-
    Updates entry in database

    <p>Uses update as the db command</p>
  example: []
  syntax:
    content: public void Update<TData>(TData user, string tableName)
    parameters:
    - id: user
      type: '{TData}'
      description: ''
    - id: tableName
      type: System.String
      description: ''
    typeParameters:
    - id: TData
      description: ''
    content.vb: Public Sub Update(Of TData)(user As TData, tableName As String)
  overload: Petrosik.Sql.SqlManager.Update*
  nameWithType.vb: SqlManager.Update(Of TData)(TData, String)
  fullName.vb: Petrosik.Sql.SqlManager.Update(Of TData)(TData, String)
  name.vb: Update(Of TData)(TData, String)
- uid: Petrosik.Sql.SqlManager.UpdateOrUpsert``1(``0,System.String)
  commentId: M:Petrosik.Sql.SqlManager.UpdateOrUpsert``1(``0,System.String)
  id: UpdateOrUpsert``1(``0,System.String)
  parent: Petrosik.Sql.SqlManager
  langs:
  - csharp
  - vb
  name: UpdateOrUpsert<TData>(TData, string)
  nameWithType: SqlManager.UpdateOrUpsert<TData>(TData, string)
  fullName: Petrosik.Sql.SqlManager.UpdateOrUpsert<TData>(TData, string)
  type: Method
  source:
    remote:
      path: Utility/SqlManager.cs
      branch: master
      repo: https://github.com/petrosik/Utility-Stuff
    id: UpdateOrUpsert
    path: ../Utility/SqlManager.cs
    startLine: 247
  assemblies:
  - PetrosikUtility
  namespace: Petrosik.Sql
  summary: >-
    Updates entry in database

    <p>Uses insert or replace as the db command</p>
  example: []
  syntax:
    content: public void UpdateOrUpsert<TData>(TData data, string tableName)
    parameters:
    - id: data
      type: '{TData}'
      description: ''
    - id: tableName
      type: System.String
      description: ''
    typeParameters:
    - id: TData
      description: ''
    content.vb: Public Sub UpdateOrUpsert(Of TData)(data As TData, tableName As String)
  overload: Petrosik.Sql.SqlManager.UpdateOrUpsert*
  nameWithType.vb: SqlManager.UpdateOrUpsert(Of TData)(TData, String)
  fullName.vb: Petrosik.Sql.SqlManager.UpdateOrUpsert(Of TData)(TData, String)
  name.vb: UpdateOrUpsert(Of TData)(TData, String)
- uid: Petrosik.Sql.SqlManager.UpdateOrUpsertList``1(System.Collections.Generic.IEnumerable{``0},System.String)
  commentId: M:Petrosik.Sql.SqlManager.UpdateOrUpsertList``1(System.Collections.Generic.IEnumerable{``0},System.String)
  id: UpdateOrUpsertList``1(System.Collections.Generic.IEnumerable{``0},System.String)
  parent: Petrosik.Sql.SqlManager
  langs:
  - csharp
  - vb
  name: UpdateOrUpsertList<TData>(IEnumerable<TData>, string)
  nameWithType: SqlManager.UpdateOrUpsertList<TData>(IEnumerable<TData>, string)
  fullName: Petrosik.Sql.SqlManager.UpdateOrUpsertList<TData>(System.Collections.Generic.IEnumerable<TData>, string)
  type: Method
  source:
    remote:
      path: Utility/SqlManager.cs
      branch: master
      repo: https://github.com/petrosik/Utility-Stuff
    id: UpdateOrUpsertList
    path: ../Utility/SqlManager.cs
    startLine: 272
  assemblies:
  - PetrosikUtility
  namespace: Petrosik.Sql
  summary: >-
    Updates multiple entries in database

    <p>Uses insert or replace as the db command</p>
  example: []
  syntax:
    content: public void UpdateOrUpsertList<TData>(IEnumerable<TData> data, string tableName)
    parameters:
    - id: data
      type: System.Collections.Generic.IEnumerable{{TData}}
      description: ''
    - id: tableName
      type: System.String
      description: ''
    typeParameters:
    - id: TData
      description: ''
    content.vb: Public Sub UpdateOrUpsertList(Of TData)(data As IEnumerable(Of TData), tableName As String)
  overload: Petrosik.Sql.SqlManager.UpdateOrUpsertList*
  nameWithType.vb: SqlManager.UpdateOrUpsertList(Of TData)(IEnumerable(Of TData), String)
  fullName.vb: Petrosik.Sql.SqlManager.UpdateOrUpsertList(Of TData)(System.Collections.Generic.IEnumerable(Of TData), String)
  name.vb: UpdateOrUpsertList(Of TData)(IEnumerable(Of TData), String)
- uid: Petrosik.Sql.SqlManager.Remove``1(``0,System.String)
  commentId: M:Petrosik.Sql.SqlManager.Remove``1(``0,System.String)
  id: Remove``1(``0,System.String)
  parent: Petrosik.Sql.SqlManager
  langs:
  - csharp
  - vb
  name: Remove<Tkey>(Tkey, string)
  nameWithType: SqlManager.Remove<Tkey>(Tkey, string)
  fullName: Petrosik.Sql.SqlManager.Remove<Tkey>(Tkey, string)
  type: Method
  source:
    remote:
      path: Utility/SqlManager.cs
      branch: master
      repo: https://github.com/petrosik/Utility-Stuff
    id: Remove
    path: ../Utility/SqlManager.cs
    startLine: 299
  assemblies:
  - PetrosikUtility
  namespace: Petrosik.Sql
  summary: >-
    Removes entry from database

    <p>Uses delete as the db command</p>
  example: []
  syntax:
    content: public void Remove<Tkey>(Tkey Id, string tableName)
    parameters:
    - id: Id
      type: '{Tkey}'
      description: ''
    - id: tableName
      type: System.String
      description: ''
    typeParameters:
    - id: Tkey
    content.vb: Public Sub Remove(Of Tkey)(Id As Tkey, tableName As String)
  overload: Petrosik.Sql.SqlManager.Remove*
  nameWithType.vb: SqlManager.Remove(Of Tkey)(Tkey, String)
  fullName.vb: Petrosik.Sql.SqlManager.Remove(Of Tkey)(Tkey, String)
  name.vb: Remove(Of Tkey)(Tkey, String)
- uid: Petrosik.Sql.SqlManager.SqlMainManager``3(Petrosik.Enums.SQLOptions,System.String,``0,``1,System.Collections.Generic.IEnumerable{``1},System.Func{System.Object,``1},System.Func{``1,``2})
  commentId: M:Petrosik.Sql.SqlManager.SqlMainManager``3(Petrosik.Enums.SQLOptions,System.String,``0,``1,System.Collections.Generic.IEnumerable{``1},System.Func{System.Object,``1},System.Func{``1,``2})
  id: SqlMainManager``3(Petrosik.Enums.SQLOptions,System.String,``0,``1,System.Collections.Generic.IEnumerable{``1},System.Func{System.Object,``1},System.Func{``1,``2})
  parent: Petrosik.Sql.SqlManager
  langs:
  - csharp
  - vb
  name: SqlMainManager<Tkey, TValue, TDBValue>(SQLOptions, string, Tkey?, TValue?, IEnumerable<TValue>, Func<object, TValue>?, Func<TValue, TDBValue>?)
  nameWithType: SqlManager.SqlMainManager<Tkey, TValue, TDBValue>(SQLOptions, string, Tkey?, TValue?, IEnumerable<TValue>, Func<object, TValue>?, Func<TValue, TDBValue>?)
  fullName: Petrosik.Sql.SqlManager.SqlMainManager<Tkey, TValue, TDBValue>(Petrosik.Enums.SQLOptions, string, Tkey?, TValue?, System.Collections.Generic.IEnumerable<TValue>, System.Func<object, TValue>?, System.Func<TValue, TDBValue>?)
  type: Method
  source:
    remote:
      path: Utility/SqlManager.cs
      branch: master
      repo: https://github.com/petrosik/Utility-Stuff
    id: SqlMainManager
    path: ../Utility/SqlManager.cs
    startLine: 331
  assemblies:
  - PetrosikUtility
  namespace: Petrosik.Sql
  summary: Basic SqlManager,while it should be functional, it is mainly an EXAMPLE and it probably shoulnd NOT be used!!!
  example: []
  syntax:
    content: public IEnumerable<TValue>? SqlMainManager<Tkey, TValue, TDBValue>(SQLOptions opt, string tableName, Tkey? Id = default, TValue? data = default, IEnumerable<TValue> datalist = null, Func<object, TValue>? converter = null, Func<TValue, TDBValue>? converterToDB = null)
    parameters:
    - id: opt
      type: Petrosik.Enums.SQLOptions
      description: ''
    - id: tableName
      type: System.String
      description: ''
    - id: Id
      type: '{Tkey}'
      description: ''
    - id: data
      type: '{TValue}'
      description: ''
    - id: datalist
      type: System.Collections.Generic.IEnumerable{{TValue}}
      description: ''
    - id: converter
      type: System.Func{System.Object,{TValue}}
      description: converts from db object to <code class="typeparamref">TValue</code>
    - id: converterToDB
      type: System.Func{{TValue},{TDBValue}}
      description: converts from <code class="typeparamref">TValue</code> to db object
    typeParameters:
    - id: Tkey
      description: Key in the db
    - id: TValue
      description: Data
    - id: TDBValue
      description: DB friendly data
    return:
      type: System.Collections.Generic.IEnumerable{{TValue}}
      description: ''
    content.vb: Public Function SqlMainManager(Of Tkey, TValue, TDBValue)(opt As SQLOptions, tableName As String, Id As Tkey = Nothing, data As TValue = Nothing, datalist As IEnumerable(Of TValue) = Nothing, converter As Func(Of Object, TValue) = Nothing, converterToDB As Func(Of TValue, TDBValue) = Nothing) As IEnumerable(Of TValue)
  overload: Petrosik.Sql.SqlManager.SqlMainManager*
  nameWithType.vb: SqlManager.SqlMainManager(Of Tkey, TValue, TDBValue)(SQLOptions, String, Tkey, TValue, IEnumerable(Of TValue), Func(Of Object, TValue), Func(Of TValue, TDBValue))
  fullName.vb: Petrosik.Sql.SqlManager.SqlMainManager(Of Tkey, TValue, TDBValue)(Petrosik.Enums.SQLOptions, String, Tkey, TValue, System.Collections.Generic.IEnumerable(Of TValue), System.Func(Of Object, TValue), System.Func(Of TValue, TDBValue))
  name.vb: SqlMainManager(Of Tkey, TValue, TDBValue)(SQLOptions, String, Tkey, TValue, IEnumerable(Of TValue), Func(Of Object, TValue), Func(Of TValue, TDBValue))
references:
- uid: Petrosik.Sql
  commentId: N:Petrosik.Sql
  href: Petrosik.html
  name: Petrosik.Sql
  nameWithType: Petrosik.Sql
  fullName: Petrosik.Sql
  spec.csharp:
  - uid: Petrosik
    name: Petrosik
    href: Petrosik.html
  - name: .
  - uid: Petrosik.Sql
    name: Sql
    href: Petrosik.Sql.html
  spec.vb:
  - uid: Petrosik
    name: Petrosik
    href: Petrosik.html
  - name: .
  - uid: Petrosik.Sql
    name: Sql
    href: Petrosik.Sql.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System.Object.Petrosik.UnityUtility.Extensions.IsUnityNull
  commentId: M:Petrosik.UnityUtility.Extensions.IsUnityNull(System.Object)
  parent: Petrosik.UnityUtility.Extensions
  definition: Petrosik.UnityUtility.Extensions.IsUnityNull(System.Object)
  href: Petrosik.UnityUtility.Extensions.html#Petrosik_UnityUtility_Extensions_IsUnityNull_System_Object_
  name: IsUnityNull(object)
  nameWithType: Extensions.IsUnityNull(object)
  fullName: Petrosik.UnityUtility.Extensions.IsUnityNull(object)
  nameWithType.vb: Extensions.IsUnityNull(Object)
  fullName.vb: Petrosik.UnityUtility.Extensions.IsUnityNull(Object)
  name.vb: IsUnityNull(Object)
  spec.csharp:
  - uid: Petrosik.UnityUtility.Extensions.IsUnityNull(System.Object)
    name: IsUnityNull
    href: Petrosik.UnityUtility.Extensions.html#Petrosik_UnityUtility_Extensions_IsUnityNull_System_Object_
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: Petrosik.UnityUtility.Extensions.IsUnityNull(System.Object)
    name: IsUnityNull
    href: Petrosik.UnityUtility.Extensions.html#Petrosik_UnityUtility_Extensions_IsUnityNull_System_Object_
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: Petrosik.UnityUtility.Extensions.IsUnityNull(System.Object)
  commentId: M:Petrosik.UnityUtility.Extensions.IsUnityNull(System.Object)
  isExternal: true
  href: Petrosik.UnityUtility.Extensions.html#Petrosik_UnityUtility_Extensions_IsUnityNull_System_Object_
  name: IsUnityNull(object)
  nameWithType: Extensions.IsUnityNull(object)
  fullName: Petrosik.UnityUtility.Extensions.IsUnityNull(object)
  nameWithType.vb: Extensions.IsUnityNull(Object)
  fullName.vb: Petrosik.UnityUtility.Extensions.IsUnityNull(Object)
  name.vb: IsUnityNull(Object)
  spec.csharp:
  - uid: Petrosik.UnityUtility.Extensions.IsUnityNull(System.Object)
    name: IsUnityNull
    href: Petrosik.UnityUtility.Extensions.html#Petrosik_UnityUtility_Extensions_IsUnityNull_System_Object_
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: Petrosik.UnityUtility.Extensions.IsUnityNull(System.Object)
    name: IsUnityNull
    href: Petrosik.UnityUtility.Extensions.html#Petrosik_UnityUtility_Extensions_IsUnityNull_System_Object_
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: Petrosik.UnityUtility.Extensions
  commentId: T:Petrosik.UnityUtility.Extensions
  parent: Petrosik.UnityUtility
  href: Petrosik.UnityUtility.Extensions.html
  name: Extensions
  nameWithType: Extensions
  fullName: Petrosik.UnityUtility.Extensions
- uid: Petrosik.UnityUtility
  commentId: N:Petrosik.UnityUtility
  href: Petrosik.html
  name: Petrosik.UnityUtility
  nameWithType: Petrosik.UnityUtility
  fullName: Petrosik.UnityUtility
  spec.csharp:
  - uid: Petrosik
    name: Petrosik
    href: Petrosik.html
  - name: .
  - uid: Petrosik.UnityUtility
    name: UnityUtility
    href: Petrosik.UnityUtility.html
  spec.vb:
  - uid: Petrosik
    name: Petrosik
    href: Petrosik.html
  - name: .
  - uid: Petrosik.UnityUtility
    name: UnityUtility
    href: Petrosik.UnityUtility.html
- uid: Petrosik.Sql.SqlManager.SetPath*
  commentId: Overload:Petrosik.Sql.SqlManager.SetPath
  href: Petrosik.Sql.SqlManager.html#Petrosik_Sql_SqlManager_SetPath_System_String_System_Boolean_
  name: SetPath
  nameWithType: SqlManager.SetPath
  fullName: Petrosik.Sql.SqlManager.SetPath
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: Petrosik.Sql.SqlManager.ExecuteCommand*
  commentId: Overload:Petrosik.Sql.SqlManager.ExecuteCommand
  href: Petrosik.Sql.SqlManager.html#Petrosik_Sql_SqlManager_ExecuteCommand_System_String_System_Object_
  name: ExecuteCommand
  nameWithType: SqlManager.ExecuteCommand
  fullName: Petrosik.Sql.SqlManager.ExecuteCommand
- uid: System.Nullable{System.Int32}
  commentId: T:System.Nullable{System.Int32}
  parent: System
  definition: System.Nullable`1
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int?
  nameWithType: int?
  fullName: int?
  nameWithType.vb: Integer?
  fullName.vb: Integer?
  name.vb: Integer?
  spec.csharp:
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '?'
  spec.vb:
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '?'
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: Petrosik.Sql.SqlManager.ExecuteQuarry*
  commentId: Overload:Petrosik.Sql.SqlManager.ExecuteQuarry
  href: Petrosik.Sql.SqlManager.html#Petrosik_Sql_SqlManager_ExecuteQuarry__2_System_String_System_Object_
  name: ExecuteQuarry
  nameWithType: SqlManager.ExecuteQuarry
  fullName: Petrosik.Sql.SqlManager.ExecuteQuarry
- uid: System.Collections.Generic.IEnumerable{System.Object}
  commentId: T:System.Collections.Generic.IEnumerable{System.Object}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<object>
  nameWithType: IEnumerable<object>
  fullName: System.Collections.Generic.IEnumerable<object>
  nameWithType.vb: IEnumerable(Of Object)
  fullName.vb: System.Collections.Generic.IEnumerable(Of Object)
  name.vb: IEnumerable(Of Object)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: Petrosik.Sql.SqlManager.LoadAll*
  commentId: Overload:Petrosik.Sql.SqlManager.LoadAll
  href: Petrosik.Sql.SqlManager.html#Petrosik_Sql_SqlManager_LoadAll__2_System_String_System_Func_System_Object___1__
  name: LoadAll
  nameWithType: SqlManager.LoadAll
  fullName: Petrosik.Sql.SqlManager.LoadAll
- uid: System.Func{System.Object,{TValue}}
  commentId: T:System.Func{System.Object,``1}
  parent: System
  definition: System.Func`2
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<object, TValue>
  nameWithType: Func<object, TValue>
  fullName: System.Func<object, TValue>
  nameWithType.vb: Func(Of Object, TValue)
  fullName.vb: System.Func(Of Object, TValue)
  name.vb: Func(Of Object, TValue)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - name: TValue
  - name: )
- uid: System.Collections.Generic.Dictionary{{TKey},{TValue}}
  commentId: T:System.Collections.Generic.Dictionary{`0,`1}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
- uid: Petrosik.Sql.SqlManager.Load*
  commentId: Overload:Petrosik.Sql.SqlManager.Load
  href: Petrosik.Sql.SqlManager.html#Petrosik_Sql_SqlManager_Load__2___0_System_String_System_Func_System_Object___1__
  name: Load
  nameWithType: SqlManager.Load
  fullName: Petrosik.Sql.SqlManager.Load
- uid: '{TId}'
  commentId: '!:TId'
  definition: TId
  name: TId
  nameWithType: TId
  fullName: TId
- uid: System.Func{System.Object,{TData}}
  commentId: T:System.Func{System.Object,``1}
  parent: System
  definition: System.Func`2
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<object, TData>
  nameWithType: Func<object, TData>
  fullName: System.Func<object, TData>
  nameWithType.vb: Func(Of Object, TData)
  fullName.vb: System.Func(Of Object, TData)
  name.vb: Func(Of Object, TData)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - name: TData
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - name: TData
  - name: )
- uid: '{TData}'
  commentId: '!:TData'
  definition: TData
  name: TData
  nameWithType: TData
  fullName: TData
- uid: TId
  commentId: '!:TId'
  name: TId
  nameWithType: TId
  fullName: TId
- uid: TData
  name: TData
  nameWithType: TData
  fullName: TData
- uid: Petrosik.Sql.SqlManager.Save*
  commentId: Overload:Petrosik.Sql.SqlManager.Save
  href: Petrosik.Sql.SqlManager.html#Petrosik_Sql_SqlManager_Save__1___0_System_String_
  name: Save
  nameWithType: SqlManager.Save
  fullName: Petrosik.Sql.SqlManager.Save
- uid: Petrosik.Sql.SqlManager.SaveAll*
  commentId: Overload:Petrosik.Sql.SqlManager.SaveAll
  href: Petrosik.Sql.SqlManager.html#Petrosik_Sql_SqlManager_SaveAll__1_System_Collections_Generic_IEnumerable___0__System_String_
  name: SaveAll
  nameWithType: SqlManager.SaveAll
  fullName: Petrosik.Sql.SqlManager.SaveAll
- uid: System.Collections.Generic.IEnumerable{{TData}}
  commentId: T:System.Collections.Generic.IEnumerable{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<TData>
  nameWithType: IEnumerable<TData>
  fullName: System.Collections.Generic.IEnumerable<TData>
  nameWithType.vb: IEnumerable(Of TData)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TData)
  name.vb: IEnumerable(Of TData)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: TData
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: TData
  - name: )
- uid: Petrosik.Sql.SqlManager.Update*
  commentId: Overload:Petrosik.Sql.SqlManager.Update
  href: Petrosik.Sql.SqlManager.html#Petrosik_Sql_SqlManager_Update__1___0_System_String_
  name: Update
  nameWithType: SqlManager.Update
  fullName: Petrosik.Sql.SqlManager.Update
- uid: Petrosik.Sql.SqlManager.UpdateOrUpsert*
  commentId: Overload:Petrosik.Sql.SqlManager.UpdateOrUpsert
  href: Petrosik.Sql.SqlManager.html#Petrosik_Sql_SqlManager_UpdateOrUpsert__1___0_System_String_
  name: UpdateOrUpsert
  nameWithType: SqlManager.UpdateOrUpsert
  fullName: Petrosik.Sql.SqlManager.UpdateOrUpsert
- uid: Petrosik.Sql.SqlManager.UpdateOrUpsertList*
  commentId: Overload:Petrosik.Sql.SqlManager.UpdateOrUpsertList
  href: Petrosik.Sql.SqlManager.html#Petrosik_Sql_SqlManager_UpdateOrUpsertList__1_System_Collections_Generic_IEnumerable___0__System_String_
  name: UpdateOrUpsertList
  nameWithType: SqlManager.UpdateOrUpsertList
  fullName: Petrosik.Sql.SqlManager.UpdateOrUpsertList
- uid: Petrosik.Sql.SqlManager.Remove*
  commentId: Overload:Petrosik.Sql.SqlManager.Remove
  href: Petrosik.Sql.SqlManager.html#Petrosik_Sql_SqlManager_Remove__1___0_System_String_
  name: Remove
  nameWithType: SqlManager.Remove
  fullName: Petrosik.Sql.SqlManager.Remove
- uid: '{Tkey}'
  commentId: '!:Tkey'
  definition: Tkey
  name: Tkey
  nameWithType: Tkey
  fullName: Tkey
- uid: Tkey
  name: Tkey
  nameWithType: Tkey
  fullName: Tkey
- uid: Petrosik.Sql.SqlManager.SqlMainManager*
  commentId: Overload:Petrosik.Sql.SqlManager.SqlMainManager
  href: Petrosik.Sql.SqlManager.html#Petrosik_Sql_SqlManager_SqlMainManager__3_Petrosik_Enums_SQLOptions_System_String___0___1_System_Collections_Generic_IEnumerable___1__System_Func_System_Object___1__System_Func___1___2__
  name: SqlMainManager
  nameWithType: SqlManager.SqlMainManager
  fullName: Petrosik.Sql.SqlManager.SqlMainManager
- uid: Petrosik.Enums.SQLOptions
  commentId: T:Petrosik.Enums.SQLOptions
  parent: Petrosik.Enums
  href: Petrosik.Enums.SQLOptions.html
  name: SQLOptions
  nameWithType: SQLOptions
  fullName: Petrosik.Enums.SQLOptions
- uid: '{TValue}'
  commentId: '!:TValue'
  definition: TValue
  name: TValue
  nameWithType: TValue
  fullName: TValue
- uid: System.Collections.Generic.IEnumerable{{TValue}}
  commentId: T:System.Collections.Generic.IEnumerable{``1}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<TValue>
  nameWithType: IEnumerable<TValue>
  fullName: System.Collections.Generic.IEnumerable<TValue>
  nameWithType.vb: IEnumerable(Of TValue)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TValue)
  name.vb: IEnumerable(Of TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
- uid: System.Func{{TValue},{TDBValue}}
  commentId: T:System.Func{``1,``2}
  parent: System
  definition: System.Func`2
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<TValue, TDBValue>
  nameWithType: Func<TValue, TDBValue>
  fullName: System.Func<TValue, TDBValue>
  nameWithType.vb: Func(Of TValue, TDBValue)
  fullName.vb: System.Func(Of TValue, TDBValue)
  name.vb: Func(Of TValue, TDBValue)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: TValue
  - name: ','
  - name: " "
  - name: TDBValue
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: ','
  - name: " "
  - name: TDBValue
  - name: )
- uid: Petrosik.Enums
  commentId: N:Petrosik.Enums
  href: Petrosik.html
  name: Petrosik.Enums
  nameWithType: Petrosik.Enums
  fullName: Petrosik.Enums
  spec.csharp:
  - uid: Petrosik
    name: Petrosik
    href: Petrosik.html
  - name: .
  - uid: Petrosik.Enums
    name: Enums
    href: Petrosik.Enums.html
  spec.vb:
  - uid: Petrosik
    name: Petrosik
    href: Petrosik.html
  - name: .
  - uid: Petrosik.Enums
    name: Enums
    href: Petrosik.Enums.html
- uid: TValue
  name: TValue
  nameWithType: TValue
  fullName: TValue
