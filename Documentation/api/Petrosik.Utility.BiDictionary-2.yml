### YamlMime:ManagedReference
items:
- uid: Petrosik.Utility.BiDictionary`2
  commentId: T:Petrosik.Utility.BiDictionary`2
  id: BiDictionary`2
  parent: Petrosik.Utility
  children:
  - Petrosik.Utility.BiDictionary`2.#ctor
  - Petrosik.Utility.BiDictionary`2.#ctor(System.Collections.Generic.Dictionary{`0,`1})
  - Petrosik.Utility.BiDictionary`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})
  - Petrosik.Utility.BiDictionary`2.Add(System.Collections.Generic.KeyValuePair{`1,`0})
  - Petrosik.Utility.BiDictionary`2.Add(`0,`1)
  - Petrosik.Utility.BiDictionary`2.Add(`1,`0)
  - Petrosik.Utility.BiDictionary`2.Clear
  - Petrosik.Utility.BiDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})
  - Petrosik.Utility.BiDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`1,`0})
  - Petrosik.Utility.BiDictionary`2.ContainsKey(`0)
  - Petrosik.Utility.BiDictionary`2.ContainsKey(`1)
  - Petrosik.Utility.BiDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)
  - Petrosik.Utility.BiDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`1,`0}[],System.Int32)
  - Petrosik.Utility.BiDictionary`2.Count
  - Petrosik.Utility.BiDictionary`2.GetEnumerator
  - Petrosik.Utility.BiDictionary`2.GetReverseEnumerator
  - Petrosik.Utility.BiDictionary`2.IsReadOnly
  - Petrosik.Utility.BiDictionary`2.Item(`0)
  - Petrosik.Utility.BiDictionary`2.Item(`1)
  - Petrosik.Utility.BiDictionary`2.Keys
  - Petrosik.Utility.BiDictionary`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})
  - Petrosik.Utility.BiDictionary`2.Remove(System.Collections.Generic.KeyValuePair{`1,`0})
  - Petrosik.Utility.BiDictionary`2.Remove(`0)
  - Petrosik.Utility.BiDictionary`2.Remove(`1)
  - Petrosik.Utility.BiDictionary`2.ReverseKeys
  - Petrosik.Utility.BiDictionary`2.ReverseValues
  - Petrosik.Utility.BiDictionary`2.TryGetValue(`0,`1@)
  - Petrosik.Utility.BiDictionary`2.TryGetValue(`1,`0@)
  - Petrosik.Utility.BiDictionary`2.Values
  langs:
  - csharp
  - vb
  name: BiDictionary<TKey, TValue>
  nameWithType: BiDictionary<TKey, TValue>
  fullName: Petrosik.Utility.BiDictionary<TKey, TValue>
  type: Class
  source:
    remote:
      path: Utility/BiDictionary.cs
      branch: master
      repo: https://github.com/petrosik/Utility-Stuff
    id: BiDictionary
    path: ../Utility/BiDictionary.cs
    startLine: 14
  assemblies:
  - PetrosikUtility
  namespace: Petrosik.Utility
  summary: Wrapper for dictionary making it able to list by either key or value in O(1) time, it's possible because it contains two dictionaries that stores both pair versions
  example: []
  syntax:
    content: 'public class BiDictionary<TKey, TValue> : IDictionary<TKey, TValue>, ICollection<KeyValuePair<TKey, TValue>>, IEnumerable<KeyValuePair<TKey, TValue>>, IEnumerable where TKey : notnull where TValue : notnull'
    typeParameters:
    - id: TKey
      description: ''
    - id: TValue
      description: ''
    content.vb: Public Class BiDictionary(Of TKey, TValue) Implements IDictionary(Of TKey, TValue), ICollection(Of KeyValuePair(Of TKey, TValue)), IEnumerable(Of KeyValuePair(Of TKey, TValue)), IEnumerable
  inheritance:
  - System.Object
  implements:
  - System.Collections.Generic.IDictionary{{TKey},{TValue}}
  - System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
  - System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
  - System.Collections.IEnumerable
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - System.Object.Petrosik.UnityUtility.Extensions.IsUnityNull
  nameWithType.vb: BiDictionary(Of TKey, TValue)
  fullName.vb: Petrosik.Utility.BiDictionary(Of TKey, TValue)
  name.vb: BiDictionary(Of TKey, TValue)
- uid: Petrosik.Utility.BiDictionary`2.#ctor
  commentId: M:Petrosik.Utility.BiDictionary`2.#ctor
  id: '#ctor'
  parent: Petrosik.Utility.BiDictionary`2
  langs:
  - csharp
  - vb
  name: BiDictionary()
  nameWithType: BiDictionary<TKey, TValue>.BiDictionary()
  fullName: Petrosik.Utility.BiDictionary<TKey, TValue>.BiDictionary()
  type: Constructor
  source:
    remote:
      path: Utility/BiDictionary.cs
      branch: master
      repo: https://github.com/petrosik/Utility-Stuff
    id: .ctor
    path: ../Utility/BiDictionary.cs
    startLine: 19
  assemblies:
  - PetrosikUtility
  namespace: Petrosik.Utility
  syntax:
    content: public BiDictionary()
    content.vb: Public Sub New()
  overload: Petrosik.Utility.BiDictionary`2.#ctor*
  nameWithType.vb: BiDictionary(Of TKey, TValue).New()
  fullName.vb: Petrosik.Utility.BiDictionary(Of TKey, TValue).New()
  name.vb: New()
- uid: Petrosik.Utility.BiDictionary`2.#ctor(System.Collections.Generic.Dictionary{`0,`1})
  commentId: M:Petrosik.Utility.BiDictionary`2.#ctor(System.Collections.Generic.Dictionary{`0,`1})
  id: '#ctor(System.Collections.Generic.Dictionary{`0,`1})'
  parent: Petrosik.Utility.BiDictionary`2
  langs:
  - csharp
  - vb
  name: BiDictionary(Dictionary<TKey, TValue>)
  nameWithType: BiDictionary<TKey, TValue>.BiDictionary(Dictionary<TKey, TValue>)
  fullName: Petrosik.Utility.BiDictionary<TKey, TValue>.BiDictionary(System.Collections.Generic.Dictionary<TKey, TValue>)
  type: Constructor
  source:
    remote:
      path: Utility/BiDictionary.cs
      branch: master
      repo: https://github.com/petrosik/Utility-Stuff
    id: .ctor
    path: ../Utility/BiDictionary.cs
    startLine: 28
  assemblies:
  - PetrosikUtility
  namespace: Petrosik.Utility
  summary: Copies all values in <code class="paramref">Dictionary</code> and makes them listable
  example: []
  syntax:
    content: public BiDictionary(Dictionary<TKey, TValue> Dictionary)
    parameters:
    - id: Dictionary
      type: System.Collections.Generic.Dictionary{{TKey},{TValue}}
      description: ''
    content.vb: Public Sub New(Dictionary As Dictionary(Of TKey, TValue))
  overload: Petrosik.Utility.BiDictionary`2.#ctor*
  nameWithType.vb: BiDictionary(Of TKey, TValue).New(Dictionary(Of TKey, TValue))
  fullName.vb: Petrosik.Utility.BiDictionary(Of TKey, TValue).New(System.Collections.Generic.Dictionary(Of TKey, TValue))
  name.vb: New(Dictionary(Of TKey, TValue))
- uid: Petrosik.Utility.BiDictionary`2.Item(`0)
  commentId: P:Petrosik.Utility.BiDictionary`2.Item(`0)
  id: Item(`0)
  parent: Petrosik.Utility.BiDictionary`2
  langs:
  - csharp
  - vb
  name: this[TKey]
  nameWithType: BiDictionary<TKey, TValue>.this[TKey]
  fullName: Petrosik.Utility.BiDictionary<TKey, TValue>.this[TKey]
  type: Property
  source:
    remote:
      path: Utility/BiDictionary.cs
      branch: master
      repo: https://github.com/petrosik/Utility-Stuff
    id: this[]
    path: ../Utility/BiDictionary.cs
    startLine: 37
  assemblies:
  - PetrosikUtility
  namespace: Petrosik.Utility
  summary: Gets or sets the element with the specified key.
  example: []
  syntax:
    content: public TValue this[TKey key] { get; set; }
    parameters:
    - id: key
      type: '{TKey}'
      description: The key of the element to get or set.
    return:
      type: '{TValue}'
      description: The element with the specified key.
    content.vb: Public Default Property this[](key As TKey) As TValue
  overload: Petrosik.Utility.BiDictionary`2.Item*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code class="paramref">key</code> is <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a>.
  - type: System.Collections.Generic.KeyNotFoundException
    commentId: T:System.Collections.Generic.KeyNotFoundException
    description: The property is retrieved and <code class="paramref">key</code> is not found.
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: The property is set and the <xref href="System.Collections.Generic.IDictionary%602" data-throw-if-not-resolved="false"></xref> is read-only.
  implements:
  - System.Collections.Generic.IDictionary{{TKey},{TValue}}.Item({TKey})
  nameWithType.vb: BiDictionary(Of TKey, TValue).this[](TKey)
  fullName.vb: Petrosik.Utility.BiDictionary(Of TKey, TValue).this[](TKey)
  name.vb: this[](TKey)
- uid: Petrosik.Utility.BiDictionary`2.Item(`1)
  commentId: P:Petrosik.Utility.BiDictionary`2.Item(`1)
  id: Item(`1)
  parent: Petrosik.Utility.BiDictionary`2
  langs:
  - csharp
  - vb
  name: this[TValue]
  nameWithType: BiDictionary<TKey, TValue>.this[TValue]
  fullName: Petrosik.Utility.BiDictionary<TKey, TValue>.this[TValue]
  type: Property
  source:
    remote:
      path: Utility/BiDictionary.cs
      branch: master
      repo: https://github.com/petrosik/Utility-Stuff
    id: this[]
    path: ../Utility/BiDictionary.cs
    startLine: 43
  assemblies:
  - PetrosikUtility
  namespace: Petrosik.Utility
  syntax:
    content: public TKey this[TValue key] { get; set; }
    parameters:
    - id: key
      type: '{TValue}'
    return:
      type: '{TKey}'
    content.vb: Public Default Property this[](key As TValue) As TKey
  overload: Petrosik.Utility.BiDictionary`2.Item*
  nameWithType.vb: BiDictionary(Of TKey, TValue).this[](TValue)
  fullName.vb: Petrosik.Utility.BiDictionary(Of TKey, TValue).this[](TValue)
  name.vb: this[](TValue)
- uid: Petrosik.Utility.BiDictionary`2.Keys
  commentId: P:Petrosik.Utility.BiDictionary`2.Keys
  id: Keys
  parent: Petrosik.Utility.BiDictionary`2
  langs:
  - csharp
  - vb
  name: Keys
  nameWithType: BiDictionary<TKey, TValue>.Keys
  fullName: Petrosik.Utility.BiDictionary<TKey, TValue>.Keys
  type: Property
  source:
    remote:
      path: Utility/BiDictionary.cs
      branch: master
      repo: https://github.com/petrosik/Utility-Stuff
    id: Keys
    path: ../Utility/BiDictionary.cs
    startLine: 49
  assemblies:
  - PetrosikUtility
  namespace: Petrosik.Utility
  summary: Gets an <xref href="System.Collections.Generic.ICollection%601" data-throw-if-not-resolved="false"></xref> containing the keys of the <xref href="System.Collections.Generic.IDictionary%602" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public ICollection<TKey> Keys { get; }
    parameters: []
    return:
      type: System.Collections.Generic.ICollection{{TKey}}
      description: An <xref href="System.Collections.Generic.ICollection%601" data-throw-if-not-resolved="false"></xref> containing the keys of the object that implements <xref href="System.Collections.Generic.IDictionary%602" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public ReadOnly Property Keys As ICollection(Of TKey)
  overload: Petrosik.Utility.BiDictionary`2.Keys*
  implements:
  - System.Collections.Generic.IDictionary{{TKey},{TValue}}.Keys
  nameWithType.vb: BiDictionary(Of TKey, TValue).Keys
  fullName.vb: Petrosik.Utility.BiDictionary(Of TKey, TValue).Keys
- uid: Petrosik.Utility.BiDictionary`2.ReverseKeys
  commentId: P:Petrosik.Utility.BiDictionary`2.ReverseKeys
  id: ReverseKeys
  parent: Petrosik.Utility.BiDictionary`2
  langs:
  - csharp
  - vb
  name: ReverseKeys
  nameWithType: BiDictionary<TKey, TValue>.ReverseKeys
  fullName: Petrosik.Utility.BiDictionary<TKey, TValue>.ReverseKeys
  type: Property
  source:
    remote:
      path: Utility/BiDictionary.cs
      branch: master
      repo: https://github.com/petrosik/Utility-Stuff
    id: ReverseKeys
    path: ../Utility/BiDictionary.cs
    startLine: 50
  assemblies:
  - PetrosikUtility
  namespace: Petrosik.Utility
  syntax:
    content: public ICollection<TValue> ReverseKeys { get; }
    parameters: []
    return:
      type: System.Collections.Generic.ICollection{{TValue}}
    content.vb: Public ReadOnly Property ReverseKeys As ICollection(Of TValue)
  overload: Petrosik.Utility.BiDictionary`2.ReverseKeys*
  nameWithType.vb: BiDictionary(Of TKey, TValue).ReverseKeys
  fullName.vb: Petrosik.Utility.BiDictionary(Of TKey, TValue).ReverseKeys
- uid: Petrosik.Utility.BiDictionary`2.Values
  commentId: P:Petrosik.Utility.BiDictionary`2.Values
  id: Values
  parent: Petrosik.Utility.BiDictionary`2
  langs:
  - csharp
  - vb
  name: Values
  nameWithType: BiDictionary<TKey, TValue>.Values
  fullName: Petrosik.Utility.BiDictionary<TKey, TValue>.Values
  type: Property
  source:
    remote:
      path: Utility/BiDictionary.cs
      branch: master
      repo: https://github.com/petrosik/Utility-Stuff
    id: Values
    path: ../Utility/BiDictionary.cs
    startLine: 52
  assemblies:
  - PetrosikUtility
  namespace: Petrosik.Utility
  summary: Gets an <xref href="System.Collections.Generic.ICollection%601" data-throw-if-not-resolved="false"></xref> containing the values in the <xref href="System.Collections.Generic.IDictionary%602" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public ICollection<TValue> Values { get; }
    parameters: []
    return:
      type: System.Collections.Generic.ICollection{{TValue}}
      description: An <xref href="System.Collections.Generic.ICollection%601" data-throw-if-not-resolved="false"></xref> containing the values in the object that implements <xref href="System.Collections.Generic.IDictionary%602" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public ReadOnly Property Values As ICollection(Of TValue)
  overload: Petrosik.Utility.BiDictionary`2.Values*
  implements:
  - System.Collections.Generic.IDictionary{{TKey},{TValue}}.Values
  nameWithType.vb: BiDictionary(Of TKey, TValue).Values
  fullName.vb: Petrosik.Utility.BiDictionary(Of TKey, TValue).Values
- uid: Petrosik.Utility.BiDictionary`2.ReverseValues
  commentId: P:Petrosik.Utility.BiDictionary`2.ReverseValues
  id: ReverseValues
  parent: Petrosik.Utility.BiDictionary`2
  langs:
  - csharp
  - vb
  name: ReverseValues
  nameWithType: BiDictionary<TKey, TValue>.ReverseValues
  fullName: Petrosik.Utility.BiDictionary<TKey, TValue>.ReverseValues
  type: Property
  source:
    remote:
      path: Utility/BiDictionary.cs
      branch: master
      repo: https://github.com/petrosik/Utility-Stuff
    id: ReverseValues
    path: ../Utility/BiDictionary.cs
    startLine: 53
  assemblies:
  - PetrosikUtility
  namespace: Petrosik.Utility
  syntax:
    content: public ICollection<TKey> ReverseValues { get; }
    parameters: []
    return:
      type: System.Collections.Generic.ICollection{{TKey}}
    content.vb: Public ReadOnly Property ReverseValues As ICollection(Of TKey)
  overload: Petrosik.Utility.BiDictionary`2.ReverseValues*
  nameWithType.vb: BiDictionary(Of TKey, TValue).ReverseValues
  fullName.vb: Petrosik.Utility.BiDictionary(Of TKey, TValue).ReverseValues
- uid: Petrosik.Utility.BiDictionary`2.Count
  commentId: P:Petrosik.Utility.BiDictionary`2.Count
  id: Count
  parent: Petrosik.Utility.BiDictionary`2
  langs:
  - csharp
  - vb
  name: Count
  nameWithType: BiDictionary<TKey, TValue>.Count
  fullName: Petrosik.Utility.BiDictionary<TKey, TValue>.Count
  type: Property
  source:
    remote:
      path: Utility/BiDictionary.cs
      branch: master
      repo: https://github.com/petrosik/Utility-Stuff
    id: Count
    path: ../Utility/BiDictionary.cs
    startLine: 54
  assemblies:
  - PetrosikUtility
  namespace: Petrosik.Utility
  summary: Gets the number of elements contained in the <xref href="System.Collections.Generic.ICollection%601" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public int Count { get; }
    parameters: []
    return:
      type: System.Int32
      description: The number of elements contained in the <xref href="System.Collections.Generic.ICollection%601" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public ReadOnly Property Count As Integer
  overload: Petrosik.Utility.BiDictionary`2.Count*
  implements:
  - System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}.Count
  nameWithType.vb: BiDictionary(Of TKey, TValue).Count
  fullName.vb: Petrosik.Utility.BiDictionary(Of TKey, TValue).Count
- uid: Petrosik.Utility.BiDictionary`2.IsReadOnly
  commentId: P:Petrosik.Utility.BiDictionary`2.IsReadOnly
  id: IsReadOnly
  parent: Petrosik.Utility.BiDictionary`2
  langs:
  - csharp
  - vb
  name: IsReadOnly
  nameWithType: BiDictionary<TKey, TValue>.IsReadOnly
  fullName: Petrosik.Utility.BiDictionary<TKey, TValue>.IsReadOnly
  type: Property
  source:
    remote:
      path: Utility/BiDictionary.cs
      branch: master
      repo: https://github.com/petrosik/Utility-Stuff
    id: IsReadOnly
    path: ../Utility/BiDictionary.cs
    startLine: 55
  assemblies:
  - PetrosikUtility
  namespace: Petrosik.Utility
  summary: Gets a value indicating whether the <xref href="System.Collections.Generic.ICollection%601" data-throw-if-not-resolved="false"></xref> is read-only.
  example: []
  syntax:
    content: public bool IsReadOnly { get; }
    parameters: []
    return:
      type: System.Boolean
      description: <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a> if the <xref href="System.Collections.Generic.ICollection%601" data-throw-if-not-resolved="false"></xref> is read-only; otherwise, <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">false</a>.
    content.vb: Public ReadOnly Property IsReadOnly As Boolean
  overload: Petrosik.Utility.BiDictionary`2.IsReadOnly*
  implements:
  - System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}.IsReadOnly
  nameWithType.vb: BiDictionary(Of TKey, TValue).IsReadOnly
  fullName.vb: Petrosik.Utility.BiDictionary(Of TKey, TValue).IsReadOnly
- uid: Petrosik.Utility.BiDictionary`2.Add(`0,`1)
  commentId: M:Petrosik.Utility.BiDictionary`2.Add(`0,`1)
  id: Add(`0,`1)
  parent: Petrosik.Utility.BiDictionary`2
  langs:
  - csharp
  - vb
  name: Add(TKey, TValue)
  nameWithType: BiDictionary<TKey, TValue>.Add(TKey, TValue)
  fullName: Petrosik.Utility.BiDictionary<TKey, TValue>.Add(TKey, TValue)
  type: Method
  source:
    remote:
      path: Utility/BiDictionary.cs
      branch: master
      repo: https://github.com/petrosik/Utility-Stuff
    id: Add
    path: ../Utility/BiDictionary.cs
    startLine: 56
  assemblies:
  - PetrosikUtility
  namespace: Petrosik.Utility
  summary: Adds an element with the provided key and value to the <xref href="System.Collections.Generic.IDictionary%602" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public void Add(TKey key, TValue value)
    parameters:
    - id: key
      type: '{TKey}'
      description: The object to use as the key of the element to add.
    - id: value
      type: '{TValue}'
      description: The object to use as the value of the element to add.
    content.vb: Public Sub Add(key As TKey, value As TValue)
  overload: Petrosik.Utility.BiDictionary`2.Add*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code class="paramref">key</code> is <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a>.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: An element with the same key already exists in the <xref href="System.Collections.Generic.IDictionary%602" data-throw-if-not-resolved="false"></xref>.
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: The <xref href="System.Collections.Generic.IDictionary%602" data-throw-if-not-resolved="false"></xref> is read-only.
  implements:
  - System.Collections.Generic.IDictionary{{TKey},{TValue}}.Add({TKey},{TValue})
  nameWithType.vb: BiDictionary(Of TKey, TValue).Add(TKey, TValue)
  fullName.vb: Petrosik.Utility.BiDictionary(Of TKey, TValue).Add(TKey, TValue)
- uid: Petrosik.Utility.BiDictionary`2.Add(`1,`0)
  commentId: M:Petrosik.Utility.BiDictionary`2.Add(`1,`0)
  id: Add(`1,`0)
  parent: Petrosik.Utility.BiDictionary`2
  langs:
  - csharp
  - vb
  name: Add(TValue, TKey)
  nameWithType: BiDictionary<TKey, TValue>.Add(TValue, TKey)
  fullName: Petrosik.Utility.BiDictionary<TKey, TValue>.Add(TValue, TKey)
  type: Method
  source:
    remote:
      path: Utility/BiDictionary.cs
      branch: master
      repo: https://github.com/petrosik/Utility-Stuff
    id: Add
    path: ../Utility/BiDictionary.cs
    startLine: 61
  assemblies:
  - PetrosikUtility
  namespace: Petrosik.Utility
  syntax:
    content: public void Add(TValue key, TKey value)
    parameters:
    - id: key
      type: '{TValue}'
    - id: value
      type: '{TKey}'
    content.vb: Public Sub Add(key As TValue, value As TKey)
  overload: Petrosik.Utility.BiDictionary`2.Add*
  nameWithType.vb: BiDictionary(Of TKey, TValue).Add(TValue, TKey)
  fullName.vb: Petrosik.Utility.BiDictionary(Of TKey, TValue).Add(TValue, TKey)
- uid: Petrosik.Utility.BiDictionary`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})
  commentId: M:Petrosik.Utility.BiDictionary`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})
  id: Add(System.Collections.Generic.KeyValuePair{`0,`1})
  parent: Petrosik.Utility.BiDictionary`2
  langs:
  - csharp
  - vb
  name: Add(KeyValuePair<TKey, TValue>)
  nameWithType: BiDictionary<TKey, TValue>.Add(KeyValuePair<TKey, TValue>)
  fullName: Petrosik.Utility.BiDictionary<TKey, TValue>.Add(System.Collections.Generic.KeyValuePair<TKey, TValue>)
  type: Method
  source:
    remote:
      path: Utility/BiDictionary.cs
      branch: master
      repo: https://github.com/petrosik/Utility-Stuff
    id: Add
    path: ../Utility/BiDictionary.cs
    startLine: 67
  assemblies:
  - PetrosikUtility
  namespace: Petrosik.Utility
  summary: Adds an item to the <xref href="System.Collections.Generic.ICollection%601" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public void Add(KeyValuePair<TKey, TValue> item)
    parameters:
    - id: item
      type: System.Collections.Generic.KeyValuePair{{TKey},{TValue}}
      description: The object to add to the <xref href="System.Collections.Generic.ICollection%601" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Sub Add(item As KeyValuePair(Of TKey, TValue))
  overload: Petrosik.Utility.BiDictionary`2.Add*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: The <xref href="System.Collections.Generic.ICollection%601" data-throw-if-not-resolved="false"></xref> is read-only.
  implements:
  - System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}.Add(System.Collections.Generic.KeyValuePair{{TKey},{TValue}})
  nameWithType.vb: BiDictionary(Of TKey, TValue).Add(KeyValuePair(Of TKey, TValue))
  fullName.vb: Petrosik.Utility.BiDictionary(Of TKey, TValue).Add(System.Collections.Generic.KeyValuePair(Of TKey, TValue))
  name.vb: Add(KeyValuePair(Of TKey, TValue))
- uid: Petrosik.Utility.BiDictionary`2.Add(System.Collections.Generic.KeyValuePair{`1,`0})
  commentId: M:Petrosik.Utility.BiDictionary`2.Add(System.Collections.Generic.KeyValuePair{`1,`0})
  id: Add(System.Collections.Generic.KeyValuePair{`1,`0})
  parent: Petrosik.Utility.BiDictionary`2
  langs:
  - csharp
  - vb
  name: Add(KeyValuePair<TValue, TKey>)
  nameWithType: BiDictionary<TKey, TValue>.Add(KeyValuePair<TValue, TKey>)
  fullName: Petrosik.Utility.BiDictionary<TKey, TValue>.Add(System.Collections.Generic.KeyValuePair<TValue, TKey>)
  type: Method
  source:
    remote:
      path: Utility/BiDictionary.cs
      branch: master
      repo: https://github.com/petrosik/Utility-Stuff
    id: Add
    path: ../Utility/BiDictionary.cs
    startLine: 72
  assemblies:
  - PetrosikUtility
  namespace: Petrosik.Utility
  syntax:
    content: public void Add(KeyValuePair<TValue, TKey> item)
    parameters:
    - id: item
      type: System.Collections.Generic.KeyValuePair{{TValue},{TKey}}
    content.vb: Public Sub Add(item As KeyValuePair(Of TValue, TKey))
  overload: Petrosik.Utility.BiDictionary`2.Add*
  nameWithType.vb: BiDictionary(Of TKey, TValue).Add(KeyValuePair(Of TValue, TKey))
  fullName.vb: Petrosik.Utility.BiDictionary(Of TKey, TValue).Add(System.Collections.Generic.KeyValuePair(Of TValue, TKey))
  name.vb: Add(KeyValuePair(Of TValue, TKey))
- uid: Petrosik.Utility.BiDictionary`2.Clear
  commentId: M:Petrosik.Utility.BiDictionary`2.Clear
  id: Clear
  parent: Petrosik.Utility.BiDictionary`2
  langs:
  - csharp
  - vb
  name: Clear()
  nameWithType: BiDictionary<TKey, TValue>.Clear()
  fullName: Petrosik.Utility.BiDictionary<TKey, TValue>.Clear()
  type: Method
  source:
    remote:
      path: Utility/BiDictionary.cs
      branch: master
      repo: https://github.com/petrosik/Utility-Stuff
    id: Clear
    path: ../Utility/BiDictionary.cs
    startLine: 77
  assemblies:
  - PetrosikUtility
  namespace: Petrosik.Utility
  summary: Removes all items from the <xref href="System.Collections.Generic.ICollection%601" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public void Clear()
    content.vb: Public Sub Clear()
  overload: Petrosik.Utility.BiDictionary`2.Clear*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: The <xref href="System.Collections.Generic.ICollection%601" data-throw-if-not-resolved="false"></xref> is read-only.
  implements:
  - System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}.Clear
  nameWithType.vb: BiDictionary(Of TKey, TValue).Clear()
  fullName.vb: Petrosik.Utility.BiDictionary(Of TKey, TValue).Clear()
- uid: Petrosik.Utility.BiDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})
  commentId: M:Petrosik.Utility.BiDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})
  id: Contains(System.Collections.Generic.KeyValuePair{`0,`1})
  parent: Petrosik.Utility.BiDictionary`2
  langs:
  - csharp
  - vb
  name: Contains(KeyValuePair<TKey, TValue>)
  nameWithType: BiDictionary<TKey, TValue>.Contains(KeyValuePair<TKey, TValue>)
  fullName: Petrosik.Utility.BiDictionary<TKey, TValue>.Contains(System.Collections.Generic.KeyValuePair<TKey, TValue>)
  type: Method
  source:
    remote:
      path: Utility/BiDictionary.cs
      branch: master
      repo: https://github.com/petrosik/Utility-Stuff
    id: Contains
    path: ../Utility/BiDictionary.cs
    startLine: 83
  assemblies:
  - PetrosikUtility
  namespace: Petrosik.Utility
  summary: Determines whether the <xref href="System.Collections.Generic.ICollection%601" data-throw-if-not-resolved="false"></xref> contains a specific value.
  example: []
  syntax:
    content: public bool Contains(KeyValuePair<TKey, TValue> item)
    parameters:
    - id: item
      type: System.Collections.Generic.KeyValuePair{{TKey},{TValue}}
      description: The object to locate in the <xref href="System.Collections.Generic.ICollection%601" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.Boolean
      description: <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a> if <code class="paramref">item</code> is found in the <xref href="System.Collections.Generic.ICollection%601" data-throw-if-not-resolved="false"></xref>; otherwise, <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">false</a>.
    content.vb: Public Function Contains(item As KeyValuePair(Of TKey, TValue)) As Boolean
  overload: Petrosik.Utility.BiDictionary`2.Contains*
  implements:
  - System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}.Contains(System.Collections.Generic.KeyValuePair{{TKey},{TValue}})
  nameWithType.vb: BiDictionary(Of TKey, TValue).Contains(KeyValuePair(Of TKey, TValue))
  fullName.vb: Petrosik.Utility.BiDictionary(Of TKey, TValue).Contains(System.Collections.Generic.KeyValuePair(Of TKey, TValue))
  name.vb: Contains(KeyValuePair(Of TKey, TValue))
- uid: Petrosik.Utility.BiDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`1,`0})
  commentId: M:Petrosik.Utility.BiDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`1,`0})
  id: Contains(System.Collections.Generic.KeyValuePair{`1,`0})
  parent: Petrosik.Utility.BiDictionary`2
  langs:
  - csharp
  - vb
  name: Contains(KeyValuePair<TValue, TKey>)
  nameWithType: BiDictionary<TKey, TValue>.Contains(KeyValuePair<TValue, TKey>)
  fullName: Petrosik.Utility.BiDictionary<TKey, TValue>.Contains(System.Collections.Generic.KeyValuePair<TValue, TKey>)
  type: Method
  source:
    remote:
      path: Utility/BiDictionary.cs
      branch: master
      repo: https://github.com/petrosik/Utility-Stuff
    id: Contains
    path: ../Utility/BiDictionary.cs
    startLine: 86
  assemblies:
  - PetrosikUtility
  namespace: Petrosik.Utility
  syntax:
    content: public bool Contains(KeyValuePair<TValue, TKey> item)
    parameters:
    - id: item
      type: System.Collections.Generic.KeyValuePair{{TValue},{TKey}}
    return:
      type: System.Boolean
    content.vb: Public Function Contains(item As KeyValuePair(Of TValue, TKey)) As Boolean
  overload: Petrosik.Utility.BiDictionary`2.Contains*
  nameWithType.vb: BiDictionary(Of TKey, TValue).Contains(KeyValuePair(Of TValue, TKey))
  fullName.vb: Petrosik.Utility.BiDictionary(Of TKey, TValue).Contains(System.Collections.Generic.KeyValuePair(Of TValue, TKey))
  name.vb: Contains(KeyValuePair(Of TValue, TKey))
- uid: Petrosik.Utility.BiDictionary`2.ContainsKey(`0)
  commentId: M:Petrosik.Utility.BiDictionary`2.ContainsKey(`0)
  id: ContainsKey(`0)
  parent: Petrosik.Utility.BiDictionary`2
  langs:
  - csharp
  - vb
  name: ContainsKey(TKey)
  nameWithType: BiDictionary<TKey, TValue>.ContainsKey(TKey)
  fullName: Petrosik.Utility.BiDictionary<TKey, TValue>.ContainsKey(TKey)
  type: Method
  source:
    remote:
      path: Utility/BiDictionary.cs
      branch: master
      repo: https://github.com/petrosik/Utility-Stuff
    id: ContainsKey
    path: ../Utility/BiDictionary.cs
    startLine: 89
  assemblies:
  - PetrosikUtility
  namespace: Petrosik.Utility
  summary: Determines whether the <xref href="System.Collections.Generic.IDictionary%602" data-throw-if-not-resolved="false"></xref> contains an element with the specified key.
  example: []
  syntax:
    content: public bool ContainsKey(TKey key)
    parameters:
    - id: key
      type: '{TKey}'
      description: The key to locate in the <xref href="System.Collections.Generic.IDictionary%602" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.Boolean
      description: <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a> if the <xref href="System.Collections.Generic.IDictionary%602" data-throw-if-not-resolved="false"></xref> contains an element with the key; otherwise, <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">false</a>.
    content.vb: Public Function ContainsKey(key As TKey) As Boolean
  overload: Petrosik.Utility.BiDictionary`2.ContainsKey*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code class="paramref">key</code> is <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a>.
  implements:
  - System.Collections.Generic.IDictionary{{TKey},{TValue}}.ContainsKey({TKey})
  nameWithType.vb: BiDictionary(Of TKey, TValue).ContainsKey(TKey)
  fullName.vb: Petrosik.Utility.BiDictionary(Of TKey, TValue).ContainsKey(TKey)
- uid: Petrosik.Utility.BiDictionary`2.ContainsKey(`1)
  commentId: M:Petrosik.Utility.BiDictionary`2.ContainsKey(`1)
  id: ContainsKey(`1)
  parent: Petrosik.Utility.BiDictionary`2
  langs:
  - csharp
  - vb
  name: ContainsKey(TValue)
  nameWithType: BiDictionary<TKey, TValue>.ContainsKey(TValue)
  fullName: Petrosik.Utility.BiDictionary<TKey, TValue>.ContainsKey(TValue)
  type: Method
  source:
    remote:
      path: Utility/BiDictionary.cs
      branch: master
      repo: https://github.com/petrosik/Utility-Stuff
    id: ContainsKey
    path: ../Utility/BiDictionary.cs
    startLine: 90
  assemblies:
  - PetrosikUtility
  namespace: Petrosik.Utility
  syntax:
    content: public bool ContainsKey(TValue key)
    parameters:
    - id: key
      type: '{TValue}'
    return:
      type: System.Boolean
    content.vb: Public Function ContainsKey(key As TValue) As Boolean
  overload: Petrosik.Utility.BiDictionary`2.ContainsKey*
  nameWithType.vb: BiDictionary(Of TKey, TValue).ContainsKey(TValue)
  fullName.vb: Petrosik.Utility.BiDictionary(Of TKey, TValue).ContainsKey(TValue)
- uid: Petrosik.Utility.BiDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)
  commentId: M:Petrosik.Utility.BiDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)
  id: CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)
  parent: Petrosik.Utility.BiDictionary`2
  langs:
  - csharp
  - vb
  name: CopyTo(KeyValuePair<TKey, TValue>[], int)
  nameWithType: BiDictionary<TKey, TValue>.CopyTo(KeyValuePair<TKey, TValue>[], int)
  fullName: Petrosik.Utility.BiDictionary<TKey, TValue>.CopyTo(System.Collections.Generic.KeyValuePair<TKey, TValue>[], int)
  type: Method
  source:
    remote:
      path: Utility/BiDictionary.cs
      branch: master
      repo: https://github.com/petrosik/Utility-Stuff
    id: CopyTo
    path: ../Utility/BiDictionary.cs
    startLine: 92
  assemblies:
  - PetrosikUtility
  namespace: Petrosik.Utility
  summary: Copies the elements of the <xref href="System.Collections.Generic.ICollection%601" data-throw-if-not-resolved="false"></xref> to an <xref href="System.Array" data-throw-if-not-resolved="false"></xref>, starting at a particular <xref href="System.Array" data-throw-if-not-resolved="false"></xref> index.
  example: []
  syntax:
    content: public void CopyTo(KeyValuePair<TKey, TValue>[] array, int arrayIndex)
    parameters:
    - id: array
      type: System.Collections.Generic.KeyValuePair{{TKey},{TValue}}[]
      description: The one-dimensional <xref href="System.Array" data-throw-if-not-resolved="false"></xref> that is the destination of the elements copied from <xref href="System.Collections.Generic.ICollection%601" data-throw-if-not-resolved="false"></xref>. The <xref href="System.Array" data-throw-if-not-resolved="false"></xref> must have zero-based indexing.
    - id: arrayIndex
      type: System.Int32
      description: The zero-based index in <code class="paramref">array</code> at which copying begins.
    content.vb: Public Sub CopyTo(array As KeyValuePair(Of TKey, TValue)(), arrayIndex As Integer)
  overload: Petrosik.Utility.BiDictionary`2.CopyTo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code class="paramref">array</code> is <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a>.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code class="paramref">arrayIndex</code> is less than 0.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The number of elements in the source <xref href="System.Collections.Generic.ICollection%601" data-throw-if-not-resolved="false"></xref> is greater than the available space from <code class="paramref">arrayIndex</code> to the end of the destination <code class="paramref">array</code>.
  implements:
  - System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}.CopyTo(System.Collections.Generic.KeyValuePair{{TKey},{TValue}}[],System.Int32)
  nameWithType.vb: BiDictionary(Of TKey, TValue).CopyTo(KeyValuePair(Of TKey, TValue)(), Integer)
  fullName.vb: Petrosik.Utility.BiDictionary(Of TKey, TValue).CopyTo(System.Collections.Generic.KeyValuePair(Of TKey, TValue)(), Integer)
  name.vb: CopyTo(KeyValuePair(Of TKey, TValue)(), Integer)
- uid: Petrosik.Utility.BiDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`1,`0}[],System.Int32)
  commentId: M:Petrosik.Utility.BiDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`1,`0}[],System.Int32)
  id: CopyTo(System.Collections.Generic.KeyValuePair{`1,`0}[],System.Int32)
  parent: Petrosik.Utility.BiDictionary`2
  langs:
  - csharp
  - vb
  name: CopyTo(KeyValuePair<TValue, TKey>[], int)
  nameWithType: BiDictionary<TKey, TValue>.CopyTo(KeyValuePair<TValue, TKey>[], int)
  fullName: Petrosik.Utility.BiDictionary<TKey, TValue>.CopyTo(System.Collections.Generic.KeyValuePair<TValue, TKey>[], int)
  type: Method
  source:
    remote:
      path: Utility/BiDictionary.cs
      branch: master
      repo: https://github.com/petrosik/Utility-Stuff
    id: CopyTo
    path: ../Utility/BiDictionary.cs
    startLine: 99
  assemblies:
  - PetrosikUtility
  namespace: Petrosik.Utility
  syntax:
    content: public void CopyTo(KeyValuePair<TValue, TKey>[] array, int arrayIndex)
    parameters:
    - id: array
      type: System.Collections.Generic.KeyValuePair{{TValue},{TKey}}[]
    - id: arrayIndex
      type: System.Int32
    content.vb: Public Sub CopyTo(array As KeyValuePair(Of TValue, TKey)(), arrayIndex As Integer)
  overload: Petrosik.Utility.BiDictionary`2.CopyTo*
  nameWithType.vb: BiDictionary(Of TKey, TValue).CopyTo(KeyValuePair(Of TValue, TKey)(), Integer)
  fullName.vb: Petrosik.Utility.BiDictionary(Of TKey, TValue).CopyTo(System.Collections.Generic.KeyValuePair(Of TValue, TKey)(), Integer)
  name.vb: CopyTo(KeyValuePair(Of TValue, TKey)(), Integer)
- uid: Petrosik.Utility.BiDictionary`2.GetEnumerator
  commentId: M:Petrosik.Utility.BiDictionary`2.GetEnumerator
  id: GetEnumerator
  parent: Petrosik.Utility.BiDictionary`2
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  nameWithType: BiDictionary<TKey, TValue>.GetEnumerator()
  fullName: Petrosik.Utility.BiDictionary<TKey, TValue>.GetEnumerator()
  type: Method
  source:
    remote:
      path: Utility/BiDictionary.cs
      branch: master
      repo: https://github.com/petrosik/Utility-Stuff
    id: GetEnumerator
    path: ../Utility/BiDictionary.cs
    startLine: 107
  assemblies:
  - PetrosikUtility
  namespace: Petrosik.Utility
  summary: Returns an enumerator that iterates through the collection.
  example: []
  syntax:
    content: public IEnumerator<KeyValuePair<TKey, TValue>> GetEnumerator()
    return:
      type: System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
      description: An enumerator that can be used to iterate through the collection.
    content.vb: Public Function GetEnumerator() As IEnumerator(Of KeyValuePair(Of TKey, TValue))
  overload: Petrosik.Utility.BiDictionary`2.GetEnumerator*
  implements:
  - System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}.GetEnumerator
  nameWithType.vb: BiDictionary(Of TKey, TValue).GetEnumerator()
  fullName.vb: Petrosik.Utility.BiDictionary(Of TKey, TValue).GetEnumerator()
- uid: Petrosik.Utility.BiDictionary`2.GetReverseEnumerator
  commentId: M:Petrosik.Utility.BiDictionary`2.GetReverseEnumerator
  id: GetReverseEnumerator
  parent: Petrosik.Utility.BiDictionary`2
  langs:
  - csharp
  - vb
  name: GetReverseEnumerator()
  nameWithType: BiDictionary<TKey, TValue>.GetReverseEnumerator()
  fullName: Petrosik.Utility.BiDictionary<TKey, TValue>.GetReverseEnumerator()
  type: Method
  source:
    remote:
      path: Utility/BiDictionary.cs
      branch: master
      repo: https://github.com/petrosik/Utility-Stuff
    id: GetReverseEnumerator
    path: ../Utility/BiDictionary.cs
    startLine: 108
  assemblies:
  - PetrosikUtility
  namespace: Petrosik.Utility
  syntax:
    content: public IEnumerator<KeyValuePair<TValue, TKey>> GetReverseEnumerator()
    return:
      type: System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{{TValue},{TKey}}}
    content.vb: Public Function GetReverseEnumerator() As IEnumerator(Of KeyValuePair(Of TValue, TKey))
  overload: Petrosik.Utility.BiDictionary`2.GetReverseEnumerator*
  nameWithType.vb: BiDictionary(Of TKey, TValue).GetReverseEnumerator()
  fullName.vb: Petrosik.Utility.BiDictionary(Of TKey, TValue).GetReverseEnumerator()
- uid: Petrosik.Utility.BiDictionary`2.Remove(`0)
  commentId: M:Petrosik.Utility.BiDictionary`2.Remove(`0)
  id: Remove(`0)
  parent: Petrosik.Utility.BiDictionary`2
  langs:
  - csharp
  - vb
  name: Remove(TKey)
  nameWithType: BiDictionary<TKey, TValue>.Remove(TKey)
  fullName: Petrosik.Utility.BiDictionary<TKey, TValue>.Remove(TKey)
  type: Method
  source:
    remote:
      path: Utility/BiDictionary.cs
      branch: master
      repo: https://github.com/petrosik/Utility-Stuff
    id: Remove
    path: ../Utility/BiDictionary.cs
    startLine: 110
  assemblies:
  - PetrosikUtility
  namespace: Petrosik.Utility
  summary: Removes the element with the specified key from the <xref href="System.Collections.Generic.IDictionary%602" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public bool Remove(TKey key)
    parameters:
    - id: key
      type: '{TKey}'
      description: The key of the element to remove.
    return:
      type: System.Boolean
      description: <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a> if the element is successfully removed; otherwise, <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">false</a>.  This method also returns <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">false</a> if <code class="paramref">key</code> was not found in the original <xref href="System.Collections.Generic.IDictionary%602" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Function Remove(key As TKey) As Boolean
  overload: Petrosik.Utility.BiDictionary`2.Remove*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code class="paramref">key</code> is <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a>.
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: The <xref href="System.Collections.Generic.IDictionary%602" data-throw-if-not-resolved="false"></xref> is read-only.
  implements:
  - System.Collections.Generic.IDictionary{{TKey},{TValue}}.Remove({TKey})
  nameWithType.vb: BiDictionary(Of TKey, TValue).Remove(TKey)
  fullName.vb: Petrosik.Utility.BiDictionary(Of TKey, TValue).Remove(TKey)
- uid: Petrosik.Utility.BiDictionary`2.Remove(`1)
  commentId: M:Petrosik.Utility.BiDictionary`2.Remove(`1)
  id: Remove(`1)
  parent: Petrosik.Utility.BiDictionary`2
  langs:
  - csharp
  - vb
  name: Remove(TValue)
  nameWithType: BiDictionary<TKey, TValue>.Remove(TValue)
  fullName: Petrosik.Utility.BiDictionary<TKey, TValue>.Remove(TValue)
  type: Method
  source:
    remote:
      path: Utility/BiDictionary.cs
      branch: master
      repo: https://github.com/petrosik/Utility-Stuff
    id: Remove
    path: ../Utility/BiDictionary.cs
    startLine: 115
  assemblies:
  - PetrosikUtility
  namespace: Petrosik.Utility
  syntax:
    content: public bool Remove(TValue key)
    parameters:
    - id: key
      type: '{TValue}'
    return:
      type: System.Boolean
    content.vb: Public Function Remove(key As TValue) As Boolean
  overload: Petrosik.Utility.BiDictionary`2.Remove*
  nameWithType.vb: BiDictionary(Of TKey, TValue).Remove(TValue)
  fullName.vb: Petrosik.Utility.BiDictionary(Of TKey, TValue).Remove(TValue)
- uid: Petrosik.Utility.BiDictionary`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})
  commentId: M:Petrosik.Utility.BiDictionary`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})
  id: Remove(System.Collections.Generic.KeyValuePair{`0,`1})
  parent: Petrosik.Utility.BiDictionary`2
  langs:
  - csharp
  - vb
  name: Remove(KeyValuePair<TKey, TValue>)
  nameWithType: BiDictionary<TKey, TValue>.Remove(KeyValuePair<TKey, TValue>)
  fullName: Petrosik.Utility.BiDictionary<TKey, TValue>.Remove(System.Collections.Generic.KeyValuePair<TKey, TValue>)
  type: Method
  source:
    remote:
      path: Utility/BiDictionary.cs
      branch: master
      repo: https://github.com/petrosik/Utility-Stuff
    id: Remove
    path: ../Utility/BiDictionary.cs
    startLine: 122
  assemblies:
  - PetrosikUtility
  namespace: Petrosik.Utility
  summary: Removes the first occurrence of a specific object from the <xref href="System.Collections.Generic.ICollection%601" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public bool Remove(KeyValuePair<TKey, TValue> item)
    parameters:
    - id: item
      type: System.Collections.Generic.KeyValuePair{{TKey},{TValue}}
      description: The object to remove from the <xref href="System.Collections.Generic.ICollection%601" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.Boolean
      description: <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a> if <code class="paramref">item</code> was successfully removed from the <xref href="System.Collections.Generic.ICollection%601" data-throw-if-not-resolved="false"></xref>; otherwise, <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">false</a>. This method also returns <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">false</a> if <code class="paramref">item</code> is not found in the original <xref href="System.Collections.Generic.ICollection%601" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Function Remove(item As KeyValuePair(Of TKey, TValue)) As Boolean
  overload: Petrosik.Utility.BiDictionary`2.Remove*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: The <xref href="System.Collections.Generic.ICollection%601" data-throw-if-not-resolved="false"></xref> is read-only.
  implements:
  - System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}.Remove(System.Collections.Generic.KeyValuePair{{TKey},{TValue}})
  nameWithType.vb: BiDictionary(Of TKey, TValue).Remove(KeyValuePair(Of TKey, TValue))
  fullName.vb: Petrosik.Utility.BiDictionary(Of TKey, TValue).Remove(System.Collections.Generic.KeyValuePair(Of TKey, TValue))
  name.vb: Remove(KeyValuePair(Of TKey, TValue))
- uid: Petrosik.Utility.BiDictionary`2.Remove(System.Collections.Generic.KeyValuePair{`1,`0})
  commentId: M:Petrosik.Utility.BiDictionary`2.Remove(System.Collections.Generic.KeyValuePair{`1,`0})
  id: Remove(System.Collections.Generic.KeyValuePair{`1,`0})
  parent: Petrosik.Utility.BiDictionary`2
  langs:
  - csharp
  - vb
  name: Remove(KeyValuePair<TValue, TKey>)
  nameWithType: BiDictionary<TKey, TValue>.Remove(KeyValuePair<TValue, TKey>)
  fullName: Petrosik.Utility.BiDictionary<TKey, TValue>.Remove(System.Collections.Generic.KeyValuePair<TValue, TKey>)
  type: Method
  source:
    remote:
      path: Utility/BiDictionary.cs
      branch: master
      repo: https://github.com/petrosik/Utility-Stuff
    id: Remove
    path: ../Utility/BiDictionary.cs
    startLine: 128
  assemblies:
  - PetrosikUtility
  namespace: Petrosik.Utility
  syntax:
    content: public bool Remove(KeyValuePair<TValue, TKey> item)
    parameters:
    - id: item
      type: System.Collections.Generic.KeyValuePair{{TValue},{TKey}}
    return:
      type: System.Boolean
    content.vb: Public Function Remove(item As KeyValuePair(Of TValue, TKey)) As Boolean
  overload: Petrosik.Utility.BiDictionary`2.Remove*
  nameWithType.vb: BiDictionary(Of TKey, TValue).Remove(KeyValuePair(Of TValue, TKey))
  fullName.vb: Petrosik.Utility.BiDictionary(Of TKey, TValue).Remove(System.Collections.Generic.KeyValuePair(Of TValue, TKey))
  name.vb: Remove(KeyValuePair(Of TValue, TKey))
- uid: Petrosik.Utility.BiDictionary`2.TryGetValue(`0,`1@)
  commentId: M:Petrosik.Utility.BiDictionary`2.TryGetValue(`0,`1@)
  id: TryGetValue(`0,`1@)
  parent: Petrosik.Utility.BiDictionary`2
  langs:
  - csharp
  - vb
  name: TryGetValue(TKey, out TValue)
  nameWithType: BiDictionary<TKey, TValue>.TryGetValue(TKey, out TValue)
  fullName: Petrosik.Utility.BiDictionary<TKey, TValue>.TryGetValue(TKey, out TValue)
  type: Method
  source:
    remote:
      path: Utility/BiDictionary.cs
      branch: master
      repo: https://github.com/petrosik/Utility-Stuff
    id: TryGetValue
    path: ../Utility/BiDictionary.cs
    startLine: 136
  assemblies:
  - PetrosikUtility
  namespace: Petrosik.Utility
  summary: Gets the value associated with the specified key.
  example: []
  syntax:
    content: public bool TryGetValue(TKey key, out TValue value)
    parameters:
    - id: key
      type: '{TKey}'
      description: The key whose value to get.
    - id: value
      type: '{TValue}'
      description: When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <code class="paramref">value</code> parameter. This parameter is passed uninitialized.
    return:
      type: System.Boolean
      description: <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a> if the object that implements <xref href="System.Collections.Generic.IDictionary%602" data-throw-if-not-resolved="false"></xref> contains an element with the specified key; otherwise, <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">false</a>.
    content.vb: Public Function TryGetValue(key As TKey, value As TValue) As Boolean
  overload: Petrosik.Utility.BiDictionary`2.TryGetValue*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code class="paramref">key</code> is <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a>.
  implements:
  - System.Collections.Generic.IDictionary{{TKey},{TValue}}.TryGetValue({TKey},{TValue}@)
  nameWithType.vb: BiDictionary(Of TKey, TValue).TryGetValue(TKey, TValue)
  fullName.vb: Petrosik.Utility.BiDictionary(Of TKey, TValue).TryGetValue(TKey, TValue)
  name.vb: TryGetValue(TKey, TValue)
- uid: Petrosik.Utility.BiDictionary`2.TryGetValue(`1,`0@)
  commentId: M:Petrosik.Utility.BiDictionary`2.TryGetValue(`1,`0@)
  id: TryGetValue(`1,`0@)
  parent: Petrosik.Utility.BiDictionary`2
  langs:
  - csharp
  - vb
  name: TryGetValue(TValue, out TKey)
  nameWithType: BiDictionary<TKey, TValue>.TryGetValue(TValue, out TKey)
  fullName: Petrosik.Utility.BiDictionary<TKey, TValue>.TryGetValue(TValue, out TKey)
  type: Method
  source:
    remote:
      path: Utility/BiDictionary.cs
      branch: master
      repo: https://github.com/petrosik/Utility-Stuff
    id: TryGetValue
    path: ../Utility/BiDictionary.cs
    startLine: 137
  assemblies:
  - PetrosikUtility
  namespace: Petrosik.Utility
  syntax:
    content: public bool TryGetValue(TValue key, out TKey value)
    parameters:
    - id: key
      type: '{TValue}'
    - id: value
      type: '{TKey}'
    return:
      type: System.Boolean
    content.vb: Public Function TryGetValue(key As TValue, value As TKey) As Boolean
  overload: Petrosik.Utility.BiDictionary`2.TryGetValue*
  nameWithType.vb: BiDictionary(Of TKey, TValue).TryGetValue(TValue, TKey)
  fullName.vb: Petrosik.Utility.BiDictionary(Of TKey, TValue).TryGetValue(TValue, TKey)
  name.vb: TryGetValue(TValue, TKey)
references:
- uid: Petrosik.Utility
  commentId: N:Petrosik.Utility
  href: Petrosik.html
  name: Petrosik.Utility
  nameWithType: Petrosik.Utility
  fullName: Petrosik.Utility
  spec.csharp:
  - uid: Petrosik
    name: Petrosik
    href: Petrosik.html
  - name: .
  - uid: Petrosik.Utility
    name: Utility
    href: Petrosik.Utility.html
  spec.vb:
  - uid: Petrosik
    name: Petrosik
    href: Petrosik.html
  - name: .
  - uid: Petrosik.Utility
    name: Utility
    href: Petrosik.Utility.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Collections.Generic.IDictionary{{TKey},{TValue}}
  commentId: T:System.Collections.Generic.IDictionary{`0,`1}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2
  name: IDictionary<TKey, TValue>
  nameWithType: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  nameWithType.vb: IDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
- uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
  commentId: T:System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{`0,`1}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  name: ICollection<KeyValuePair<TKey, TValue>>
  nameWithType: ICollection<KeyValuePair<TKey, TValue>>
  fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>
  nameWithType.vb: ICollection(Of KeyValuePair(Of TKey, TValue))
  fullName.vb: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue))
  name.vb: ICollection(Of KeyValuePair(Of TKey, TValue))
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  - name: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.keyvaluepair-2
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.keyvaluepair-2
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
  - name: )
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
  commentId: T:System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<KeyValuePair<TKey, TValue>>
  nameWithType: IEnumerable<KeyValuePair<TKey, TValue>>
  fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey, TValue>>
  nameWithType.vb: IEnumerable(Of KeyValuePair(Of TKey, TValue))
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue))
  name.vb: IEnumerable(Of KeyValuePair(Of TKey, TValue))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.keyvaluepair-2
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.keyvaluepair-2
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
  - name: )
- uid: System.Collections.IEnumerable
  commentId: T:System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.ienumerable
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System.Object.Petrosik.UnityUtility.Extensions.IsUnityNull
  commentId: M:Petrosik.UnityUtility.Extensions.IsUnityNull(System.Object)
  parent: Petrosik.UnityUtility.Extensions
  definition: Petrosik.UnityUtility.Extensions.IsUnityNull(System.Object)
  href: Petrosik.UnityUtility.Extensions.html#Petrosik_UnityUtility_Extensions_IsUnityNull_System_Object_
  name: IsUnityNull(object)
  nameWithType: Extensions.IsUnityNull(object)
  fullName: Petrosik.UnityUtility.Extensions.IsUnityNull(object)
  nameWithType.vb: Extensions.IsUnityNull(Object)
  fullName.vb: Petrosik.UnityUtility.Extensions.IsUnityNull(Object)
  name.vb: IsUnityNull(Object)
  spec.csharp:
  - uid: Petrosik.UnityUtility.Extensions.IsUnityNull(System.Object)
    name: IsUnityNull
    href: Petrosik.UnityUtility.Extensions.html#Petrosik_UnityUtility_Extensions_IsUnityNull_System_Object_
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: Petrosik.UnityUtility.Extensions.IsUnityNull(System.Object)
    name: IsUnityNull
    href: Petrosik.UnityUtility.Extensions.html#Petrosik_UnityUtility_Extensions_IsUnityNull_System_Object_
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic.IDictionary`2
  commentId: T:System.Collections.Generic.IDictionary`2
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2
  name: IDictionary<TKey, TValue>
  nameWithType: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  nameWithType.vb: IDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: System.Collections.Generic.ICollection`1
  commentId: T:System.Collections.Generic.ICollection`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
- uid: Petrosik.UnityUtility.Extensions.IsUnityNull(System.Object)
  commentId: M:Petrosik.UnityUtility.Extensions.IsUnityNull(System.Object)
  isExternal: true
  href: Petrosik.UnityUtility.Extensions.html#Petrosik_UnityUtility_Extensions_IsUnityNull_System_Object_
  name: IsUnityNull(object)
  nameWithType: Extensions.IsUnityNull(object)
  fullName: Petrosik.UnityUtility.Extensions.IsUnityNull(object)
  nameWithType.vb: Extensions.IsUnityNull(Object)
  fullName.vb: Petrosik.UnityUtility.Extensions.IsUnityNull(Object)
  name.vb: IsUnityNull(Object)
  spec.csharp:
  - uid: Petrosik.UnityUtility.Extensions.IsUnityNull(System.Object)
    name: IsUnityNull
    href: Petrosik.UnityUtility.Extensions.html#Petrosik_UnityUtility_Extensions_IsUnityNull_System_Object_
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: Petrosik.UnityUtility.Extensions.IsUnityNull(System.Object)
    name: IsUnityNull
    href: Petrosik.UnityUtility.Extensions.html#Petrosik_UnityUtility_Extensions_IsUnityNull_System_Object_
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: Petrosik.UnityUtility.Extensions
  commentId: T:Petrosik.UnityUtility.Extensions
  parent: Petrosik.UnityUtility
  href: Petrosik.UnityUtility.Extensions.html
  name: Extensions
  nameWithType: Extensions
  fullName: Petrosik.UnityUtility.Extensions
- uid: Petrosik.UnityUtility
  commentId: N:Petrosik.UnityUtility
  href: Petrosik.html
  name: Petrosik.UnityUtility
  nameWithType: Petrosik.UnityUtility
  fullName: Petrosik.UnityUtility
  spec.csharp:
  - uid: Petrosik
    name: Petrosik
    href: Petrosik.html
  - name: .
  - uid: Petrosik.UnityUtility
    name: UnityUtility
    href: Petrosik.UnityUtility.html
  spec.vb:
  - uid: Petrosik
    name: Petrosik
    href: Petrosik.html
  - name: .
  - uid: Petrosik.UnityUtility
    name: UnityUtility
    href: Petrosik.UnityUtility.html
- uid: Petrosik.Utility.BiDictionary`2.#ctor*
  commentId: Overload:Petrosik.Utility.BiDictionary`2.#ctor
  href: Petrosik.Utility.BiDictionary-2.html#Petrosik_Utility_BiDictionary_2__ctor
  name: BiDictionary
  nameWithType: BiDictionary<TKey, TValue>.BiDictionary
  fullName: Petrosik.Utility.BiDictionary<TKey, TValue>.BiDictionary
  nameWithType.vb: BiDictionary(Of TKey, TValue).New
  fullName.vb: Petrosik.Utility.BiDictionary(Of TKey, TValue).New
  name.vb: New
- uid: System.Collections.Generic.Dictionary{{TKey},{TValue}}
  commentId: T:System.Collections.Generic.Dictionary{`0,`1}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.argumentnullexception
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.Collections.Generic.KeyNotFoundException
  commentId: T:System.Collections.Generic.KeyNotFoundException
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.keynotfoundexception
  name: KeyNotFoundException
  nameWithType: KeyNotFoundException
  fullName: System.Collections.Generic.KeyNotFoundException
- uid: System.NotSupportedException
  commentId: T:System.NotSupportedException
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.notsupportedexception
  name: NotSupportedException
  nameWithType: NotSupportedException
  fullName: System.NotSupportedException
- uid: Petrosik.Utility.BiDictionary`2.Item*
  commentId: Overload:Petrosik.Utility.BiDictionary`2.Item
  href: Petrosik.Utility.BiDictionary-2.html#Petrosik_Utility_BiDictionary_2_Item__0_
  name: this
  nameWithType: BiDictionary<TKey, TValue>.this
  fullName: Petrosik.Utility.BiDictionary<TKey, TValue>.this
  nameWithType.vb: BiDictionary(Of TKey, TValue).this[]
  fullName.vb: Petrosik.Utility.BiDictionary(Of TKey, TValue).this[]
  name.vb: this[]
- uid: System.Collections.Generic.IDictionary{{TKey},{TValue}}.Item({TKey})
  commentId: P:System.Collections.Generic.IDictionary{`0,`1}.Item(`0)
  parent: System.Collections.Generic.IDictionary{{TKey},{TValue}}
  definition: System.Collections.Generic.IDictionary`2.Item(`0)
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2.item
  name: this[TKey]
  nameWithType: IDictionary<TKey, TValue>.this[TKey]
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>.this[TKey]
  nameWithType.vb: IDictionary(Of TKey, TValue).this[](TKey)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue).this[](TKey)
  name.vb: this[](TKey)
  spec.csharp:
  - name: this
  - name: '['
  - name: TKey
  - name: ']'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary{`0,`1}.Item(`0)
    name: this[]
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2.item
  - name: (
  - name: TKey
  - name: )
- uid: '{TKey}'
  commentId: '!:TKey'
  definition: TKey
  name: TKey
  nameWithType: TKey
  fullName: TKey
- uid: '{TValue}'
  commentId: '!:TValue'
  definition: TValue
  name: TValue
  nameWithType: TValue
  fullName: TValue
- uid: System.Collections.Generic.IDictionary`2.Item(`0)
  commentId: P:System.Collections.Generic.IDictionary`2.Item(`0)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2.item
  name: this[TKey]
  nameWithType: IDictionary<TKey, TValue>.this[TKey]
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>.this[TKey]
  nameWithType.vb: IDictionary(Of TKey, TValue).this[](TKey)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue).this[](TKey)
  name.vb: this[](TKey)
  spec.csharp:
  - name: this
  - name: '['
  - name: TKey
  - name: ']'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2.Item(`0)
    name: this[]
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2.item
  - name: (
  - name: TKey
  - name: )
- uid: TKey
  name: TKey
  nameWithType: TKey
  fullName: TKey
- uid: TValue
  name: TValue
  nameWithType: TValue
  fullName: TValue
- uid: Petrosik.Utility.BiDictionary`2.Keys*
  commentId: Overload:Petrosik.Utility.BiDictionary`2.Keys
  href: Petrosik.Utility.BiDictionary-2.html#Petrosik_Utility_BiDictionary_2_Keys
  name: Keys
  nameWithType: BiDictionary<TKey, TValue>.Keys
  fullName: Petrosik.Utility.BiDictionary<TKey, TValue>.Keys
  nameWithType.vb: BiDictionary(Of TKey, TValue).Keys
  fullName.vb: Petrosik.Utility.BiDictionary(Of TKey, TValue).Keys
- uid: System.Collections.Generic.IDictionary{{TKey},{TValue}}.Keys
  commentId: P:System.Collections.Generic.IDictionary{`0,`1}.Keys
  parent: System.Collections.Generic.IDictionary{{TKey},{TValue}}
  definition: System.Collections.Generic.IDictionary`2.Keys
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2.keys
  name: Keys
  nameWithType: IDictionary<TKey, TValue>.Keys
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>.Keys
  nameWithType.vb: IDictionary(Of TKey, TValue).Keys
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue).Keys
- uid: System.Collections.Generic.ICollection{{TKey}}
  commentId: T:System.Collections.Generic.ICollection{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  name: ICollection<TKey>
  nameWithType: ICollection<TKey>
  fullName: System.Collections.Generic.ICollection<TKey>
  nameWithType.vb: ICollection(Of TKey)
  fullName.vb: System.Collections.Generic.ICollection(Of TKey)
  name.vb: ICollection(Of TKey)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  - name: <
  - name: TKey
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
- uid: System.Collections.Generic.IDictionary`2.Keys
  commentId: P:System.Collections.Generic.IDictionary`2.Keys
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2.keys
  name: Keys
  nameWithType: IDictionary<TKey, TValue>.Keys
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>.Keys
  nameWithType.vb: IDictionary(Of TKey, TValue).Keys
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue).Keys
- uid: Petrosik.Utility.BiDictionary`2.ReverseKeys*
  commentId: Overload:Petrosik.Utility.BiDictionary`2.ReverseKeys
  href: Petrosik.Utility.BiDictionary-2.html#Petrosik_Utility_BiDictionary_2_ReverseKeys
  name: ReverseKeys
  nameWithType: BiDictionary<TKey, TValue>.ReverseKeys
  fullName: Petrosik.Utility.BiDictionary<TKey, TValue>.ReverseKeys
  nameWithType.vb: BiDictionary(Of TKey, TValue).ReverseKeys
  fullName.vb: Petrosik.Utility.BiDictionary(Of TKey, TValue).ReverseKeys
- uid: System.Collections.Generic.ICollection{{TValue}}
  commentId: T:System.Collections.Generic.ICollection{`1}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  name: ICollection<TValue>
  nameWithType: ICollection<TValue>
  fullName: System.Collections.Generic.ICollection<TValue>
  nameWithType.vb: ICollection(Of TValue)
  fullName.vb: System.Collections.Generic.ICollection(Of TValue)
  name.vb: ICollection(Of TValue)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  - name: <
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
- uid: Petrosik.Utility.BiDictionary`2.Values*
  commentId: Overload:Petrosik.Utility.BiDictionary`2.Values
  href: Petrosik.Utility.BiDictionary-2.html#Petrosik_Utility_BiDictionary_2_Values
  name: Values
  nameWithType: BiDictionary<TKey, TValue>.Values
  fullName: Petrosik.Utility.BiDictionary<TKey, TValue>.Values
  nameWithType.vb: BiDictionary(Of TKey, TValue).Values
  fullName.vb: Petrosik.Utility.BiDictionary(Of TKey, TValue).Values
- uid: System.Collections.Generic.IDictionary{{TKey},{TValue}}.Values
  commentId: P:System.Collections.Generic.IDictionary{`0,`1}.Values
  parent: System.Collections.Generic.IDictionary{{TKey},{TValue}}
  definition: System.Collections.Generic.IDictionary`2.Values
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2.values
  name: Values
  nameWithType: IDictionary<TKey, TValue>.Values
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>.Values
  nameWithType.vb: IDictionary(Of TKey, TValue).Values
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue).Values
- uid: System.Collections.Generic.IDictionary`2.Values
  commentId: P:System.Collections.Generic.IDictionary`2.Values
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2.values
  name: Values
  nameWithType: IDictionary<TKey, TValue>.Values
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>.Values
  nameWithType.vb: IDictionary(Of TKey, TValue).Values
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue).Values
- uid: Petrosik.Utility.BiDictionary`2.ReverseValues*
  commentId: Overload:Petrosik.Utility.BiDictionary`2.ReverseValues
  href: Petrosik.Utility.BiDictionary-2.html#Petrosik_Utility_BiDictionary_2_ReverseValues
  name: ReverseValues
  nameWithType: BiDictionary<TKey, TValue>.ReverseValues
  fullName: Petrosik.Utility.BiDictionary<TKey, TValue>.ReverseValues
  nameWithType.vb: BiDictionary(Of TKey, TValue).ReverseValues
  fullName.vb: Petrosik.Utility.BiDictionary(Of TKey, TValue).ReverseValues
- uid: Petrosik.Utility.BiDictionary`2.Count*
  commentId: Overload:Petrosik.Utility.BiDictionary`2.Count
  href: Petrosik.Utility.BiDictionary-2.html#Petrosik_Utility_BiDictionary_2_Count
  name: Count
  nameWithType: BiDictionary<TKey, TValue>.Count
  fullName: Petrosik.Utility.BiDictionary<TKey, TValue>.Count
  nameWithType.vb: BiDictionary(Of TKey, TValue).Count
  fullName.vb: Petrosik.Utility.BiDictionary(Of TKey, TValue).Count
- uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}.Count
  commentId: P:System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{`0,`1}}.Count
  parent: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
  definition: System.Collections.Generic.ICollection`1.Count
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.count
  name: Count
  nameWithType: ICollection<KeyValuePair<TKey, TValue>>.Count
  fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>.Count
  nameWithType.vb: ICollection(Of KeyValuePair(Of TKey, TValue)).Count
  fullName.vb: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue)).Count
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: System.Collections.Generic.ICollection`1.Count
  commentId: P:System.Collections.Generic.ICollection`1.Count
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.count
  name: Count
  nameWithType: ICollection<T>.Count
  fullName: System.Collections.Generic.ICollection<T>.Count
  nameWithType.vb: ICollection(Of T).Count
  fullName.vb: System.Collections.Generic.ICollection(Of T).Count
- uid: Petrosik.Utility.BiDictionary`2.IsReadOnly*
  commentId: Overload:Petrosik.Utility.BiDictionary`2.IsReadOnly
  href: Petrosik.Utility.BiDictionary-2.html#Petrosik_Utility_BiDictionary_2_IsReadOnly
  name: IsReadOnly
  nameWithType: BiDictionary<TKey, TValue>.IsReadOnly
  fullName: Petrosik.Utility.BiDictionary<TKey, TValue>.IsReadOnly
  nameWithType.vb: BiDictionary(Of TKey, TValue).IsReadOnly
  fullName.vb: Petrosik.Utility.BiDictionary(Of TKey, TValue).IsReadOnly
- uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}.IsReadOnly
  commentId: P:System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{`0,`1}}.IsReadOnly
  parent: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
  definition: System.Collections.Generic.ICollection`1.IsReadOnly
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.isreadonly
  name: IsReadOnly
  nameWithType: ICollection<KeyValuePair<TKey, TValue>>.IsReadOnly
  fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>.IsReadOnly
  nameWithType.vb: ICollection(Of KeyValuePair(Of TKey, TValue)).IsReadOnly
  fullName.vb: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue)).IsReadOnly
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: System.Collections.Generic.ICollection`1.IsReadOnly
  commentId: P:System.Collections.Generic.ICollection`1.IsReadOnly
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.isreadonly
  name: IsReadOnly
  nameWithType: ICollection<T>.IsReadOnly
  fullName: System.Collections.Generic.ICollection<T>.IsReadOnly
  nameWithType.vb: ICollection(Of T).IsReadOnly
  fullName.vb: System.Collections.Generic.ICollection(Of T).IsReadOnly
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.argumentexception
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: Petrosik.Utility.BiDictionary`2.Add*
  commentId: Overload:Petrosik.Utility.BiDictionary`2.Add
  href: Petrosik.Utility.BiDictionary-2.html#Petrosik_Utility_BiDictionary_2_Add__0__1_
  name: Add
  nameWithType: BiDictionary<TKey, TValue>.Add
  fullName: Petrosik.Utility.BiDictionary<TKey, TValue>.Add
  nameWithType.vb: BiDictionary(Of TKey, TValue).Add
  fullName.vb: Petrosik.Utility.BiDictionary(Of TKey, TValue).Add
- uid: System.Collections.Generic.IDictionary{{TKey},{TValue}}.Add({TKey},{TValue})
  commentId: M:System.Collections.Generic.IDictionary{`0,`1}.Add(`0,`1)
  parent: System.Collections.Generic.IDictionary{{TKey},{TValue}}
  definition: System.Collections.Generic.IDictionary`2.Add(`0,`1)
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2.add
  name: Add(TKey, TValue)
  nameWithType: IDictionary<TKey, TValue>.Add(TKey, TValue)
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>.Add(TKey, TValue)
  nameWithType.vb: IDictionary(Of TKey, TValue).Add(TKey, TValue)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue).Add(TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary{`0,`1}.Add(`0,`1)
    name: Add
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2.add
  - name: (
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
  spec.vb:
  - uid: System.Collections.Generic.IDictionary{`0,`1}.Add(`0,`1)
    name: Add
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2.add
  - name: (
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
- uid: System.Collections.Generic.IDictionary`2.Add(`0,`1)
  commentId: M:System.Collections.Generic.IDictionary`2.Add(`0,`1)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2.add
  name: Add(TKey, TValue)
  nameWithType: IDictionary<TKey, TValue>.Add(TKey, TValue)
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>.Add(TKey, TValue)
  nameWithType.vb: IDictionary(Of TKey, TValue).Add(TKey, TValue)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue).Add(TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2.Add(`0,`1)
    name: Add
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2.add
  - name: (
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2.Add(`0,`1)
    name: Add
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2.add
  - name: (
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
- uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}.Add(System.Collections.Generic.KeyValuePair{{TKey},{TValue}})
  commentId: M:System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{`0,`1}}.Add(System.Collections.Generic.KeyValuePair{`0,`1})
  parent: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
  definition: System.Collections.Generic.ICollection`1.Add(`0)
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.add
  name: Add(KeyValuePair<TKey, TValue>)
  nameWithType: ICollection<KeyValuePair<TKey, TValue>>.Add(KeyValuePair<TKey, TValue>)
  fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>.Add(System.Collections.Generic.KeyValuePair<TKey, TValue>)
  nameWithType.vb: ICollection(Of KeyValuePair(Of TKey, TValue)).Add(KeyValuePair(Of TKey, TValue))
  fullName.vb: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue)).Add(System.Collections.Generic.KeyValuePair(Of TKey, TValue))
  name.vb: Add(KeyValuePair(Of TKey, TValue))
  spec.csharp:
  - uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{`0,`1}}.Add(System.Collections.Generic.KeyValuePair{`0,`1})
    name: Add
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.add
  - name: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.keyvaluepair-2
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  - name: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{`0,`1}}.Add(System.Collections.Generic.KeyValuePair{`0,`1})
    name: Add
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.add
  - name: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.keyvaluepair-2
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
  - name: )
- uid: System.Collections.Generic.KeyValuePair{{TKey},{TValue}}
  commentId: T:System.Collections.Generic.KeyValuePair{`0,`1}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.KeyValuePair`2
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.keyvaluepair-2
  name: KeyValuePair<TKey, TValue>
  nameWithType: KeyValuePair<TKey, TValue>
  fullName: System.Collections.Generic.KeyValuePair<TKey, TValue>
  nameWithType.vb: KeyValuePair(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.KeyValuePair(Of TKey, TValue)
  name.vb: KeyValuePair(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.keyvaluepair-2
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.keyvaluepair-2
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
- uid: System.Collections.Generic.ICollection`1.Add(`0)
  commentId: M:System.Collections.Generic.ICollection`1.Add(`0)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.add
  name: Add(T)
  nameWithType: ICollection<T>.Add(T)
  fullName: System.Collections.Generic.ICollection<T>.Add(T)
  nameWithType.vb: ICollection(Of T).Add(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Add(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.add
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.add
  - name: (
  - name: T
  - name: )
- uid: System.Collections.Generic.KeyValuePair`2
  commentId: T:System.Collections.Generic.KeyValuePair`2
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.keyvaluepair-2
  name: KeyValuePair<TKey, TValue>
  nameWithType: KeyValuePair<TKey, TValue>
  fullName: System.Collections.Generic.KeyValuePair<TKey, TValue>
  nameWithType.vb: KeyValuePair(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.KeyValuePair(Of TKey, TValue)
  name.vb: KeyValuePair(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.keyvaluepair-2
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.keyvaluepair-2
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
- uid: System.Collections.Generic.KeyValuePair{{TValue},{TKey}}
  commentId: T:System.Collections.Generic.KeyValuePair{`1,`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.KeyValuePair`2
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.keyvaluepair-2
  name: KeyValuePair<TValue, TKey>
  nameWithType: KeyValuePair<TValue, TKey>
  fullName: System.Collections.Generic.KeyValuePair<TValue, TKey>
  nameWithType.vb: KeyValuePair(Of TValue, TKey)
  fullName.vb: System.Collections.Generic.KeyValuePair(Of TValue, TKey)
  name.vb: KeyValuePair(Of TValue, TKey)
  spec.csharp:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.keyvaluepair-2
  - name: <
  - name: TValue
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.keyvaluepair-2
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: ','
  - name: " "
  - name: TKey
  - name: )
- uid: Petrosik.Utility.BiDictionary`2.Clear*
  commentId: Overload:Petrosik.Utility.BiDictionary`2.Clear
  href: Petrosik.Utility.BiDictionary-2.html#Petrosik_Utility_BiDictionary_2_Clear
  name: Clear
  nameWithType: BiDictionary<TKey, TValue>.Clear
  fullName: Petrosik.Utility.BiDictionary<TKey, TValue>.Clear
  nameWithType.vb: BiDictionary(Of TKey, TValue).Clear
  fullName.vb: Petrosik.Utility.BiDictionary(Of TKey, TValue).Clear
- uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}.Clear
  commentId: M:System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{`0,`1}}.Clear
  parent: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
  definition: System.Collections.Generic.ICollection`1.Clear
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.clear
  name: Clear()
  nameWithType: ICollection<KeyValuePair<TKey, TValue>>.Clear()
  fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>.Clear()
  nameWithType.vb: ICollection(Of KeyValuePair(Of TKey, TValue)).Clear()
  fullName.vb: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue)).Clear()
  spec.csharp:
  - uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{`0,`1}}.Clear
    name: Clear
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.clear
  - name: (
  - name: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{`0,`1}}.Clear
    name: Clear
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.clear
  - name: (
  - name: )
- uid: System.Collections.Generic.ICollection`1.Clear
  commentId: M:System.Collections.Generic.ICollection`1.Clear
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.clear
  name: Clear()
  nameWithType: ICollection<T>.Clear()
  fullName: System.Collections.Generic.ICollection<T>.Clear()
  nameWithType.vb: ICollection(Of T).Clear()
  fullName.vb: System.Collections.Generic.ICollection(Of T).Clear()
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.clear
  - name: (
  - name: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.clear
  - name: (
  - name: )
- uid: Petrosik.Utility.BiDictionary`2.Contains*
  commentId: Overload:Petrosik.Utility.BiDictionary`2.Contains
  href: Petrosik.Utility.BiDictionary-2.html#Petrosik_Utility_BiDictionary_2_Contains_System_Collections_Generic_KeyValuePair__0__1__
  name: Contains
  nameWithType: BiDictionary<TKey, TValue>.Contains
  fullName: Petrosik.Utility.BiDictionary<TKey, TValue>.Contains
  nameWithType.vb: BiDictionary(Of TKey, TValue).Contains
  fullName.vb: Petrosik.Utility.BiDictionary(Of TKey, TValue).Contains
- uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}.Contains(System.Collections.Generic.KeyValuePair{{TKey},{TValue}})
  commentId: M:System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{`0,`1}}.Contains(System.Collections.Generic.KeyValuePair{`0,`1})
  parent: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
  definition: System.Collections.Generic.ICollection`1.Contains(`0)
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.contains
  name: Contains(KeyValuePair<TKey, TValue>)
  nameWithType: ICollection<KeyValuePair<TKey, TValue>>.Contains(KeyValuePair<TKey, TValue>)
  fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>.Contains(System.Collections.Generic.KeyValuePair<TKey, TValue>)
  nameWithType.vb: ICollection(Of KeyValuePair(Of TKey, TValue)).Contains(KeyValuePair(Of TKey, TValue))
  fullName.vb: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue)).Contains(System.Collections.Generic.KeyValuePair(Of TKey, TValue))
  name.vb: Contains(KeyValuePair(Of TKey, TValue))
  spec.csharp:
  - uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{`0,`1}}.Contains(System.Collections.Generic.KeyValuePair{`0,`1})
    name: Contains
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.contains
  - name: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.keyvaluepair-2
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  - name: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{`0,`1}}.Contains(System.Collections.Generic.KeyValuePair{`0,`1})
    name: Contains
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.contains
  - name: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.keyvaluepair-2
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
  - name: )
- uid: System.Collections.Generic.ICollection`1.Contains(`0)
  commentId: M:System.Collections.Generic.ICollection`1.Contains(`0)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.contains
  name: Contains(T)
  nameWithType: ICollection<T>.Contains(T)
  fullName: System.Collections.Generic.ICollection<T>.Contains(T)
  nameWithType.vb: ICollection(Of T).Contains(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Contains(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.contains
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.contains
  - name: (
  - name: T
  - name: )
- uid: Petrosik.Utility.BiDictionary`2.ContainsKey*
  commentId: Overload:Petrosik.Utility.BiDictionary`2.ContainsKey
  href: Petrosik.Utility.BiDictionary-2.html#Petrosik_Utility_BiDictionary_2_ContainsKey__0_
  name: ContainsKey
  nameWithType: BiDictionary<TKey, TValue>.ContainsKey
  fullName: Petrosik.Utility.BiDictionary<TKey, TValue>.ContainsKey
  nameWithType.vb: BiDictionary(Of TKey, TValue).ContainsKey
  fullName.vb: Petrosik.Utility.BiDictionary(Of TKey, TValue).ContainsKey
- uid: System.Collections.Generic.IDictionary{{TKey},{TValue}}.ContainsKey({TKey})
  commentId: M:System.Collections.Generic.IDictionary{`0,`1}.ContainsKey(`0)
  parent: System.Collections.Generic.IDictionary{{TKey},{TValue}}
  definition: System.Collections.Generic.IDictionary`2.ContainsKey(`0)
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2.containskey
  name: ContainsKey(TKey)
  nameWithType: IDictionary<TKey, TValue>.ContainsKey(TKey)
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>.ContainsKey(TKey)
  nameWithType.vb: IDictionary(Of TKey, TValue).ContainsKey(TKey)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue).ContainsKey(TKey)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary{`0,`1}.ContainsKey(`0)
    name: ContainsKey
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2.containskey
  - name: (
  - name: TKey
  - name: )
  spec.vb:
  - uid: System.Collections.Generic.IDictionary{`0,`1}.ContainsKey(`0)
    name: ContainsKey
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2.containskey
  - name: (
  - name: TKey
  - name: )
- uid: System.Collections.Generic.IDictionary`2.ContainsKey(`0)
  commentId: M:System.Collections.Generic.IDictionary`2.ContainsKey(`0)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2.containskey
  name: ContainsKey(TKey)
  nameWithType: IDictionary<TKey, TValue>.ContainsKey(TKey)
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>.ContainsKey(TKey)
  nameWithType.vb: IDictionary(Of TKey, TValue).ContainsKey(TKey)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue).ContainsKey(TKey)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2.ContainsKey(`0)
    name: ContainsKey
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2.containskey
  - name: (
  - name: TKey
  - name: )
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2.ContainsKey(`0)
    name: ContainsKey
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2.containskey
  - name: (
  - name: TKey
  - name: )
- uid: System.Array
  commentId: T:System.Array
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.array
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.ArgumentOutOfRangeException
  commentId: T:System.ArgumentOutOfRangeException
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.argumentoutofrangeexception
  name: ArgumentOutOfRangeException
  nameWithType: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: Petrosik.Utility.BiDictionary`2.CopyTo*
  commentId: Overload:Petrosik.Utility.BiDictionary`2.CopyTo
  href: Petrosik.Utility.BiDictionary-2.html#Petrosik_Utility_BiDictionary_2_CopyTo_System_Collections_Generic_KeyValuePair__0__1____System_Int32_
  name: CopyTo
  nameWithType: BiDictionary<TKey, TValue>.CopyTo
  fullName: Petrosik.Utility.BiDictionary<TKey, TValue>.CopyTo
  nameWithType.vb: BiDictionary(Of TKey, TValue).CopyTo
  fullName.vb: Petrosik.Utility.BiDictionary(Of TKey, TValue).CopyTo
- uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}.CopyTo(System.Collections.Generic.KeyValuePair{{TKey},{TValue}}[],System.Int32)
  commentId: M:System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{`0,`1}}.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)
  parent: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
  definition: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.copyto
  name: CopyTo(KeyValuePair<TKey, TValue>[], int)
  nameWithType: ICollection<KeyValuePair<TKey, TValue>>.CopyTo(KeyValuePair<TKey, TValue>[], int)
  fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>.CopyTo(System.Collections.Generic.KeyValuePair<TKey, TValue>[], int)
  nameWithType.vb: ICollection(Of KeyValuePair(Of TKey, TValue)).CopyTo(KeyValuePair(Of TKey, TValue)(), Integer)
  fullName.vb: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue)).CopyTo(System.Collections.Generic.KeyValuePair(Of TKey, TValue)(), Integer)
  name.vb: CopyTo(KeyValuePair(Of TKey, TValue)(), Integer)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{`0,`1}}.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)
    name: CopyTo
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.copyto
  - name: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.keyvaluepair-2
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  - name: '['
  - name: ']'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{`0,`1}}.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)
    name: CopyTo
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.copyto
  - name: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.keyvaluepair-2
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
  - name: (
  - name: )
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: System.Collections.Generic.KeyValuePair{{TKey},{TValue}}[]
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.keyvaluepair-2
  name: KeyValuePair<TKey, TValue>[]
  nameWithType: KeyValuePair<TKey, TValue>[]
  fullName: System.Collections.Generic.KeyValuePair<TKey, TValue>[]
  nameWithType.vb: KeyValuePair(Of TKey, TValue)()
  fullName.vb: System.Collections.Generic.KeyValuePair(Of TKey, TValue)()
  name.vb: KeyValuePair(Of TKey, TValue)()
  spec.csharp:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.keyvaluepair-2
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  - name: '['
  - name: ']'
  spec.vb:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.keyvaluepair-2
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
  - name: (
  - name: )
- uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  commentId: M:System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.copyto
  name: CopyTo(T[], int)
  nameWithType: ICollection<T>.CopyTo(T[], int)
  fullName: System.Collections.Generic.ICollection<T>.CopyTo(T[], int)
  nameWithType.vb: ICollection(Of T).CopyTo(T(), Integer)
  fullName.vb: System.Collections.Generic.ICollection(Of T).CopyTo(T(), Integer)
  name.vb: CopyTo(T(), Integer)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.copyto
  - name: (
  - name: T
  - name: '['
  - name: ']'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.copyto
  - name: (
  - name: T
  - name: (
  - name: )
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: System.Collections.Generic.KeyValuePair{{TValue},{TKey}}[]
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.keyvaluepair-2
  name: KeyValuePair<TValue, TKey>[]
  nameWithType: KeyValuePair<TValue, TKey>[]
  fullName: System.Collections.Generic.KeyValuePair<TValue, TKey>[]
  nameWithType.vb: KeyValuePair(Of TValue, TKey)()
  fullName.vb: System.Collections.Generic.KeyValuePair(Of TValue, TKey)()
  name.vb: KeyValuePair(Of TValue, TKey)()
  spec.csharp:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.keyvaluepair-2
  - name: <
  - name: TValue
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: '['
  - name: ']'
  spec.vb:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.keyvaluepair-2
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: (
  - name: )
- uid: Petrosik.Utility.BiDictionary`2.GetEnumerator*
  commentId: Overload:Petrosik.Utility.BiDictionary`2.GetEnumerator
  href: Petrosik.Utility.BiDictionary-2.html#Petrosik_Utility_BiDictionary_2_GetEnumerator
  name: GetEnumerator
  nameWithType: BiDictionary<TKey, TValue>.GetEnumerator
  fullName: Petrosik.Utility.BiDictionary<TKey, TValue>.GetEnumerator
  nameWithType.vb: BiDictionary(Of TKey, TValue).GetEnumerator
  fullName.vb: Petrosik.Utility.BiDictionary(Of TKey, TValue).GetEnumerator
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}}.GetEnumerator
  parent: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
  definition: System.Collections.Generic.IEnumerable`1.GetEnumerator
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1.getenumerator
  name: GetEnumerator()
  nameWithType: IEnumerable<KeyValuePair<TKey, TValue>>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey, TValue>>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of KeyValuePair(Of TKey, TValue)).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue)).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}}.GetEnumerator
    name: GetEnumerator
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1.getenumerator
  - name: (
  - name: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}}.GetEnumerator
    name: GetEnumerator
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1.getenumerator
  - name: (
  - name: )
- uid: System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
  commentId: T:System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{`0,`1}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerator`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerator-1
  name: IEnumerator<KeyValuePair<TKey, TValue>>
  nameWithType: IEnumerator<KeyValuePair<TKey, TValue>>
  fullName: System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<TKey, TValue>>
  nameWithType.vb: IEnumerator(Of KeyValuePair(Of TKey, TValue))
  fullName.vb: System.Collections.Generic.IEnumerator(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue))
  name.vb: IEnumerator(Of KeyValuePair(Of TKey, TValue))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerator-1
  - name: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.keyvaluepair-2
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerator-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.keyvaluepair-2
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
  - name: )
- uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable`1.GetEnumerator
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1.getenumerator
  name: GetEnumerator()
  nameWithType: IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of T).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1.getenumerator
  - name: (
  - name: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1.getenumerator
  - name: (
  - name: )
- uid: System.Collections.Generic.IEnumerator`1
  commentId: T:System.Collections.Generic.IEnumerator`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerator-1
  name: IEnumerator<T>
  nameWithType: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
  nameWithType.vb: IEnumerator(Of T)
  fullName.vb: System.Collections.Generic.IEnumerator(Of T)
  name.vb: IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerator-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerator-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: Petrosik.Utility.BiDictionary`2.GetReverseEnumerator*
  commentId: Overload:Petrosik.Utility.BiDictionary`2.GetReverseEnumerator
  href: Petrosik.Utility.BiDictionary-2.html#Petrosik_Utility_BiDictionary_2_GetReverseEnumerator
  name: GetReverseEnumerator
  nameWithType: BiDictionary<TKey, TValue>.GetReverseEnumerator
  fullName: Petrosik.Utility.BiDictionary<TKey, TValue>.GetReverseEnumerator
  nameWithType.vb: BiDictionary(Of TKey, TValue).GetReverseEnumerator
  fullName.vb: Petrosik.Utility.BiDictionary(Of TKey, TValue).GetReverseEnumerator
- uid: System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{{TValue},{TKey}}}
  commentId: T:System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{`1,`0}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerator`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerator-1
  name: IEnumerator<KeyValuePair<TValue, TKey>>
  nameWithType: IEnumerator<KeyValuePair<TValue, TKey>>
  fullName: System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<TValue, TKey>>
  nameWithType.vb: IEnumerator(Of KeyValuePair(Of TValue, TKey))
  fullName.vb: System.Collections.Generic.IEnumerator(Of System.Collections.Generic.KeyValuePair(Of TValue, TKey))
  name.vb: IEnumerator(Of KeyValuePair(Of TValue, TKey))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerator-1
  - name: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.keyvaluepair-2
  - name: <
  - name: TValue
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerator-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.keyvaluepair-2
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
- uid: Petrosik.Utility.BiDictionary`2.Remove*
  commentId: Overload:Petrosik.Utility.BiDictionary`2.Remove
  href: Petrosik.Utility.BiDictionary-2.html#Petrosik_Utility_BiDictionary_2_Remove__0_
  name: Remove
  nameWithType: BiDictionary<TKey, TValue>.Remove
  fullName: Petrosik.Utility.BiDictionary<TKey, TValue>.Remove
  nameWithType.vb: BiDictionary(Of TKey, TValue).Remove
  fullName.vb: Petrosik.Utility.BiDictionary(Of TKey, TValue).Remove
- uid: System.Collections.Generic.IDictionary{{TKey},{TValue}}.Remove({TKey})
  commentId: M:System.Collections.Generic.IDictionary{`0,`1}.Remove(`0)
  parent: System.Collections.Generic.IDictionary{{TKey},{TValue}}
  definition: System.Collections.Generic.IDictionary`2.Remove(`0)
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2.remove
  name: Remove(TKey)
  nameWithType: IDictionary<TKey, TValue>.Remove(TKey)
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>.Remove(TKey)
  nameWithType.vb: IDictionary(Of TKey, TValue).Remove(TKey)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue).Remove(TKey)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary{`0,`1}.Remove(`0)
    name: Remove
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2.remove
  - name: (
  - name: TKey
  - name: )
  spec.vb:
  - uid: System.Collections.Generic.IDictionary{`0,`1}.Remove(`0)
    name: Remove
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2.remove
  - name: (
  - name: TKey
  - name: )
- uid: System.Collections.Generic.IDictionary`2.Remove(`0)
  commentId: M:System.Collections.Generic.IDictionary`2.Remove(`0)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2.remove
  name: Remove(TKey)
  nameWithType: IDictionary<TKey, TValue>.Remove(TKey)
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>.Remove(TKey)
  nameWithType.vb: IDictionary(Of TKey, TValue).Remove(TKey)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue).Remove(TKey)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2.Remove(`0)
    name: Remove
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2.remove
  - name: (
  - name: TKey
  - name: )
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2.Remove(`0)
    name: Remove
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2.remove
  - name: (
  - name: TKey
  - name: )
- uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}.Remove(System.Collections.Generic.KeyValuePair{{TKey},{TValue}})
  commentId: M:System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{`0,`1}}.Remove(System.Collections.Generic.KeyValuePair{`0,`1})
  parent: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
  definition: System.Collections.Generic.ICollection`1.Remove(`0)
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.remove
  name: Remove(KeyValuePair<TKey, TValue>)
  nameWithType: ICollection<KeyValuePair<TKey, TValue>>.Remove(KeyValuePair<TKey, TValue>)
  fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>.Remove(System.Collections.Generic.KeyValuePair<TKey, TValue>)
  nameWithType.vb: ICollection(Of KeyValuePair(Of TKey, TValue)).Remove(KeyValuePair(Of TKey, TValue))
  fullName.vb: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue)).Remove(System.Collections.Generic.KeyValuePair(Of TKey, TValue))
  name.vb: Remove(KeyValuePair(Of TKey, TValue))
  spec.csharp:
  - uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{`0,`1}}.Remove(System.Collections.Generic.KeyValuePair{`0,`1})
    name: Remove
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.remove
  - name: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.keyvaluepair-2
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  - name: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{`0,`1}}.Remove(System.Collections.Generic.KeyValuePair{`0,`1})
    name: Remove
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.remove
  - name: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.keyvaluepair-2
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
  - name: )
- uid: System.Collections.Generic.ICollection`1.Remove(`0)
  commentId: M:System.Collections.Generic.ICollection`1.Remove(`0)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.remove
  name: Remove(T)
  nameWithType: ICollection<T>.Remove(T)
  fullName: System.Collections.Generic.ICollection<T>.Remove(T)
  nameWithType.vb: ICollection(Of T).Remove(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Remove(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.remove
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.remove
  - name: (
  - name: T
  - name: )
- uid: Petrosik.Utility.BiDictionary`2.TryGetValue*
  commentId: Overload:Petrosik.Utility.BiDictionary`2.TryGetValue
  href: Petrosik.Utility.BiDictionary-2.html#Petrosik_Utility_BiDictionary_2_TryGetValue__0__1__
  name: TryGetValue
  nameWithType: BiDictionary<TKey, TValue>.TryGetValue
  fullName: Petrosik.Utility.BiDictionary<TKey, TValue>.TryGetValue
  nameWithType.vb: BiDictionary(Of TKey, TValue).TryGetValue
  fullName.vb: Petrosik.Utility.BiDictionary(Of TKey, TValue).TryGetValue
- uid: System.Collections.Generic.IDictionary{{TKey},{TValue}}.TryGetValue({TKey},{TValue}@)
  commentId: M:System.Collections.Generic.IDictionary{`0,`1}.TryGetValue(`0,`1@)
  parent: System.Collections.Generic.IDictionary{{TKey},{TValue}}
  definition: System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2.trygetvalue
  name: TryGetValue(TKey, out TValue)
  nameWithType: IDictionary<TKey, TValue>.TryGetValue(TKey, out TValue)
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>.TryGetValue(TKey, out TValue)
  nameWithType.vb: IDictionary(Of TKey, TValue).TryGetValue(TKey, TValue)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue).TryGetValue(TKey, TValue)
  name.vb: TryGetValue(TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary{`0,`1}.TryGetValue(`0,`1@)
    name: TryGetValue
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2.trygetvalue
  - name: (
  - name: TKey
  - name: ','
  - name: " "
  - name: out
  - name: " "
  - name: TValue
  - name: )
  spec.vb:
  - uid: System.Collections.Generic.IDictionary{`0,`1}.TryGetValue(`0,`1@)
    name: TryGetValue
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2.trygetvalue
  - name: (
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
- uid: System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)
  commentId: M:System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2.trygetvalue
  name: TryGetValue(TKey, out TValue)
  nameWithType: IDictionary<TKey, TValue>.TryGetValue(TKey, out TValue)
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>.TryGetValue(TKey, out TValue)
  nameWithType.vb: IDictionary(Of TKey, TValue).TryGetValue(TKey, TValue)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue).TryGetValue(TKey, TValue)
  name.vb: TryGetValue(TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)
    name: TryGetValue
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2.trygetvalue
  - name: (
  - name: TKey
  - name: ','
  - name: " "
  - name: out
  - name: " "
  - name: TValue
  - name: )
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)
    name: TryGetValue
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2.trygetvalue
  - name: (
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
