### YamlMime:ManagedReference
items:
- uid: Petrosik.UnityUtility.Extensions
  commentId: T:Petrosik.UnityUtility.Extensions
  id: Extensions
  parent: Petrosik.UnityUtility
  children:
  - Petrosik.UnityUtility.Extensions.Abs(UnityEngine.Vector2)
  - Petrosik.UnityUtility.Extensions.Abs(UnityEngine.Vector3)
  - Petrosik.UnityUtility.Extensions.AlignToAxis(UnityEngine.Vector2)
  - Petrosik.UnityUtility.Extensions.AlignToAxis(UnityEngine.Vector3)
  - Petrosik.UnityUtility.Extensions.Average(UnityEngine.Vector2)
  - Petrosik.UnityUtility.Extensions.Average(UnityEngine.Vector2Int)
  - Petrosik.UnityUtility.Extensions.Average(UnityEngine.Vector3)
  - Petrosik.UnityUtility.Extensions.Average(UnityEngine.Vector3Int)
  - Petrosik.UnityUtility.Extensions.Ceiling(UnityEngine.Vector2)
  - Petrosik.UnityUtility.Extensions.Ceiling(UnityEngine.Vector3)
  - Petrosik.UnityUtility.Extensions.Clamp(UnityEngine.Vector2,System.Single,System.Single)
  - Petrosik.UnityUtility.Extensions.Clamp(UnityEngine.Vector3,System.Single,System.Single)
  - Petrosik.UnityUtility.Extensions.CleanList(System.Collections.Generic.List{UnityEngine.GameObject})
  - Petrosik.UnityUtility.Extensions.Convert(UnityEngine.Vector2)
  - Petrosik.UnityUtility.Extensions.DestroyChildren(UnityEngine.GameObject,System.Collections.Generic.List{System.String},System.Boolean)
  - Petrosik.UnityUtility.Extensions.Direction(UnityEngine.Vector2,UnityEngine.Vector2)
  - Petrosik.UnityUtility.Extensions.Direction(UnityEngine.Vector3,UnityEngine.Vector3)
  - Petrosik.UnityUtility.Extensions.DistanceIY(UnityEngine.Vector3,UnityEngine.Vector3)
  - Petrosik.UnityUtility.Extensions.Floor(UnityEngine.Vector2)
  - Petrosik.UnityUtility.Extensions.Floor(UnityEngine.Vector3)
  - Petrosik.UnityUtility.Extensions.IsUnityNull(System.Object)
  - Petrosik.UnityUtility.Extensions.Rotate(UnityEngine.Vector2,System.Single)
  - Petrosik.UnityUtility.Extensions.Round(UnityEngine.Vector2,System.Int32)
  - Petrosik.UnityUtility.Extensions.Round(UnityEngine.Vector3,System.Int32)
  - Petrosik.UnityUtility.Extensions.Sum(UnityEngine.Vector2)
  - Petrosik.UnityUtility.Extensions.Sum(UnityEngine.Vector2Int)
  - Petrosik.UnityUtility.Extensions.Sum(UnityEngine.Vector3)
  - Petrosik.UnityUtility.Extensions.Sum(UnityEngine.Vector3Int)
  langs:
  - csharp
  - vb
  name: Extensions
  nameWithType: Extensions
  fullName: Petrosik.UnityUtility.Extensions
  type: Class
  source:
    remote:
      path: Utility/Utility.cs
      branch: master
      repo: https://github.com/petrosik/Utility-Stuff
    id: Extensions
    path: ../Utility/Utility.cs
    startLine: 632
  assemblies:
  - PetrosikUtility
  namespace: Petrosik.UnityUtility
  summary: All basic Modifications/Extensions
  example: []
  syntax:
    content: public static class Extensions
    content.vb: Public Module Extensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: Petrosik.UnityUtility.Extensions.Rotate(UnityEngine.Vector2,System.Single)
  commentId: M:Petrosik.UnityUtility.Extensions.Rotate(UnityEngine.Vector2,System.Single)
  id: Rotate(UnityEngine.Vector2,System.Single)
  isExtensionMethod: true
  parent: Petrosik.UnityUtility.Extensions
  langs:
  - csharp
  - vb
  name: Rotate(Vector2, float)
  nameWithType: Extensions.Rotate(Vector2, float)
  fullName: Petrosik.UnityUtility.Extensions.Rotate(UnityEngine.Vector2, float)
  type: Method
  source:
    remote:
      path: Utility/Utility.cs
      branch: master
      repo: https://github.com/petrosik/Utility-Stuff
    id: Rotate
    path: ../Utility/Utility.cs
    startLine: 640
  assemblies:
  - PetrosikUtility
  namespace: Petrosik.UnityUtility
  summary: Rotates and returns vector by set amount of degres
  example: []
  syntax:
    content: public static Vector2 Rotate(this Vector2 v, float delta)
    parameters:
    - id: v
      type: UnityEngine.Vector2
      description: Original Vector
    - id: delta
      type: System.Single
      description: Degres
    return:
      type: UnityEngine.Vector2
      description: ''
    content.vb: Public Shared Function Rotate(v As Vector2, delta As Single) As Vector2
  overload: Petrosik.UnityUtility.Extensions.Rotate*
  nameWithType.vb: Extensions.Rotate(Vector2, Single)
  fullName.vb: Petrosik.UnityUtility.Extensions.Rotate(UnityEngine.Vector2, Single)
  name.vb: Rotate(Vector2, Single)
- uid: Petrosik.UnityUtility.Extensions.Direction(UnityEngine.Vector2,UnityEngine.Vector2)
  commentId: M:Petrosik.UnityUtility.Extensions.Direction(UnityEngine.Vector2,UnityEngine.Vector2)
  id: Direction(UnityEngine.Vector2,UnityEngine.Vector2)
  isExtensionMethod: true
  parent: Petrosik.UnityUtility.Extensions
  langs:
  - csharp
  - vb
  name: Direction(Vector2, Vector2)
  nameWithType: Extensions.Direction(Vector2, Vector2)
  fullName: Petrosik.UnityUtility.Extensions.Direction(UnityEngine.Vector2, UnityEngine.Vector2)
  type: Method
  source:
    remote:
      path: Utility/Utility.cs
      branch: master
      repo: https://github.com/petrosik/Utility-Stuff
    id: Direction
    path: ../Utility/Utility.cs
    startLine: 651
  assemblies:
  - PetrosikUtility
  namespace: Petrosik.UnityUtility
  summary: Returns direction from v1 to v2 normalized
  example: []
  syntax:
    content: public static Vector2 Direction(this Vector2 v1, Vector2 v2)
    parameters:
    - id: v1
      type: UnityEngine.Vector2
      description: ''
    - id: v2
      type: UnityEngine.Vector2
      description: ''
    return:
      type: UnityEngine.Vector2
      description: ''
    content.vb: Public Shared Function Direction(v1 As Vector2, v2 As Vector2) As Vector2
  overload: Petrosik.UnityUtility.Extensions.Direction*
- uid: Petrosik.UnityUtility.Extensions.Direction(UnityEngine.Vector3,UnityEngine.Vector3)
  commentId: M:Petrosik.UnityUtility.Extensions.Direction(UnityEngine.Vector3,UnityEngine.Vector3)
  id: Direction(UnityEngine.Vector3,UnityEngine.Vector3)
  isExtensionMethod: true
  parent: Petrosik.UnityUtility.Extensions
  langs:
  - csharp
  - vb
  name: Direction(Vector3, Vector3)
  nameWithType: Extensions.Direction(Vector3, Vector3)
  fullName: Petrosik.UnityUtility.Extensions.Direction(UnityEngine.Vector3, UnityEngine.Vector3)
  type: Method
  source:
    remote:
      path: Utility/Utility.cs
      branch: master
      repo: https://github.com/petrosik/Utility-Stuff
    id: Direction
    path: ../Utility/Utility.cs
    startLine: 661
  assemblies:
  - PetrosikUtility
  namespace: Petrosik.UnityUtility
  summary: Returns direction from v1 to v2 normalized
  example: []
  syntax:
    content: public static Vector3 Direction(this Vector3 v1, Vector3 v2)
    parameters:
    - id: v1
      type: UnityEngine.Vector3
      description: ''
    - id: v2
      type: UnityEngine.Vector3
      description: ''
    return:
      type: UnityEngine.Vector3
      description: ''
    content.vb: Public Shared Function Direction(v1 As Vector3, v2 As Vector3) As Vector3
  overload: Petrosik.UnityUtility.Extensions.Direction*
- uid: Petrosik.UnityUtility.Extensions.DestroyChildren(UnityEngine.GameObject,System.Collections.Generic.List{System.String},System.Boolean)
  commentId: M:Petrosik.UnityUtility.Extensions.DestroyChildren(UnityEngine.GameObject,System.Collections.Generic.List{System.String},System.Boolean)
  id: DestroyChildren(UnityEngine.GameObject,System.Collections.Generic.List{System.String},System.Boolean)
  isExtensionMethod: true
  parent: Petrosik.UnityUtility.Extensions
  langs:
  - csharp
  - vb
  name: DestroyChildren(GameObject, List<string>?, bool)
  nameWithType: Extensions.DestroyChildren(GameObject, List<string>?, bool)
  fullName: Petrosik.UnityUtility.Extensions.DestroyChildren(UnityEngine.GameObject, System.Collections.Generic.List<string>?, bool)
  type: Method
  source:
    remote:
      path: Utility/Utility.cs
      branch: master
      repo: https://github.com/petrosik/Utility-Stuff
    id: DestroyChildren
    path: ../Utility/Utility.cs
    startLine: 665
  assemblies:
  - PetrosikUtility
  namespace: Petrosik.UnityUtility
  syntax:
    content: public static void DestroyChildren(this GameObject obj, List<string>? namelist = null, bool whitelist = false)
    parameters:
    - id: obj
      type: UnityEngine.GameObject
    - id: namelist
      type: System.Collections.Generic.List{System.String}
    - id: whitelist
      type: System.Boolean
    content.vb: Public Shared Sub DestroyChildren(obj As GameObject, namelist As List(Of String) = Nothing, whitelist As Boolean = False)
  overload: Petrosik.UnityUtility.Extensions.DestroyChildren*
  nameWithType.vb: Extensions.DestroyChildren(GameObject, List(Of String), Boolean)
  fullName.vb: Petrosik.UnityUtility.Extensions.DestroyChildren(UnityEngine.GameObject, System.Collections.Generic.List(Of String), Boolean)
  name.vb: DestroyChildren(GameObject, List(Of String), Boolean)
- uid: Petrosik.UnityUtility.Extensions.CleanList(System.Collections.Generic.List{UnityEngine.GameObject})
  commentId: M:Petrosik.UnityUtility.Extensions.CleanList(System.Collections.Generic.List{UnityEngine.GameObject})
  id: CleanList(System.Collections.Generic.List{UnityEngine.GameObject})
  isExtensionMethod: true
  parent: Petrosik.UnityUtility.Extensions
  langs:
  - csharp
  - vb
  name: CleanList(List<GameObject>)
  nameWithType: Extensions.CleanList(List<GameObject>)
  fullName: Petrosik.UnityUtility.Extensions.CleanList(System.Collections.Generic.List<UnityEngine.GameObject>)
  type: Method
  source:
    remote:
      path: Utility/Utility.cs
      branch: master
      repo: https://github.com/petrosik/Utility-Stuff
    id: CleanList
    path: ../Utility/Utility.cs
    startLine: 679
  assemblies:
  - PetrosikUtility
  namespace: Petrosik.UnityUtility
  summary: Tries to clean the list from all null GameObjects
  example: []
  syntax:
    content: public static void CleanList(this List<GameObject> l)
    parameters:
    - id: l
      type: System.Collections.Generic.List{UnityEngine.GameObject}
      description: ''
    content.vb: Public Shared Sub CleanList(l As List(Of GameObject))
  overload: Petrosik.UnityUtility.Extensions.CleanList*
  nameWithType.vb: Extensions.CleanList(List(Of GameObject))
  fullName.vb: Petrosik.UnityUtility.Extensions.CleanList(System.Collections.Generic.List(Of UnityEngine.GameObject))
  name.vb: CleanList(List(Of GameObject))
- uid: Petrosik.UnityUtility.Extensions.IsUnityNull(System.Object)
  commentId: M:Petrosik.UnityUtility.Extensions.IsUnityNull(System.Object)
  id: IsUnityNull(System.Object)
  isExtensionMethod: true
  parent: Petrosik.UnityUtility.Extensions
  langs:
  - csharp
  - vb
  name: IsUnityNull(object)
  nameWithType: Extensions.IsUnityNull(object)
  fullName: Petrosik.UnityUtility.Extensions.IsUnityNull(object)
  type: Method
  source:
    remote:
      path: Utility/Utility.cs
      branch: master
      repo: https://github.com/petrosik/Utility-Stuff
    id: IsUnityNull
    path: ../Utility/Utility.cs
    startLine: 697
  assemblies:
  - PetrosikUtility
  namespace: Petrosik.UnityUtility
  summary: Check if obj is unity obj and is not null
  example: []
  syntax:
    content: public static bool IsUnityNull(this object obj)
    parameters:
    - id: obj
      type: System.Object
      description: ''
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Shared Function IsUnityNull(obj As Object) As Boolean
  overload: Petrosik.UnityUtility.Extensions.IsUnityNull*
  nameWithType.vb: Extensions.IsUnityNull(Object)
  fullName.vb: Petrosik.UnityUtility.Extensions.IsUnityNull(Object)
  name.vb: IsUnityNull(Object)
- uid: Petrosik.UnityUtility.Extensions.DistanceIY(UnityEngine.Vector3,UnityEngine.Vector3)
  commentId: M:Petrosik.UnityUtility.Extensions.DistanceIY(UnityEngine.Vector3,UnityEngine.Vector3)
  id: DistanceIY(UnityEngine.Vector3,UnityEngine.Vector3)
  isExtensionMethod: true
  parent: Petrosik.UnityUtility.Extensions
  langs:
  - csharp
  - vb
  name: DistanceIY(Vector3, Vector3)
  nameWithType: Extensions.DistanceIY(Vector3, Vector3)
  fullName: Petrosik.UnityUtility.Extensions.DistanceIY(UnityEngine.Vector3, UnityEngine.Vector3)
  type: Method
  source:
    remote:
      path: Utility/Utility.cs
      branch: master
      repo: https://github.com/petrosik/Utility-Stuff
    id: DistanceIY
    path: ../Utility/Utility.cs
    startLine: 707
  assemblies:
  - PetrosikUtility
  namespace: Petrosik.UnityUtility
  summary: Returns distance while ignoring y values
  example: []
  syntax:
    content: public static float DistanceIY(this Vector3 a, Vector3 b)
    parameters:
    - id: a
      type: UnityEngine.Vector3
      description: ''
    - id: b
      type: UnityEngine.Vector3
      description: ''
    return:
      type: System.Single
      description: ''
    content.vb: Public Shared Function DistanceIY(a As Vector3, b As Vector3) As Single
  overload: Petrosik.UnityUtility.Extensions.DistanceIY*
- uid: Petrosik.UnityUtility.Extensions.Convert(UnityEngine.Vector2)
  commentId: M:Petrosik.UnityUtility.Extensions.Convert(UnityEngine.Vector2)
  id: Convert(UnityEngine.Vector2)
  isExtensionMethod: true
  parent: Petrosik.UnityUtility.Extensions
  langs:
  - csharp
  - vb
  name: Convert(Vector2)
  nameWithType: Extensions.Convert(Vector2)
  fullName: Petrosik.UnityUtility.Extensions.Convert(UnityEngine.Vector2)
  type: Method
  source:
    remote:
      path: Utility/Utility.cs
      branch: master
      repo: https://github.com/petrosik/Utility-Stuff
    id: Convert
    path: ../Utility/Utility.cs
    startLine: 716
  assemblies:
  - PetrosikUtility
  namespace: Petrosik.UnityUtility
  summary: Returns new Vector3(v.x, 0f, v.y)
  example: []
  syntax:
    content: public static Vector3 Convert(this Vector2 v)
    parameters:
    - id: v
      type: UnityEngine.Vector2
      description: ''
    return:
      type: UnityEngine.Vector3
      description: ''
    content.vb: Public Shared Function Convert(v As Vector2) As Vector3
  overload: Petrosik.UnityUtility.Extensions.Convert*
- uid: Petrosik.UnityUtility.Extensions.Abs(UnityEngine.Vector3)
  commentId: M:Petrosik.UnityUtility.Extensions.Abs(UnityEngine.Vector3)
  id: Abs(UnityEngine.Vector3)
  isExtensionMethod: true
  parent: Petrosik.UnityUtility.Extensions
  langs:
  - csharp
  - vb
  name: Abs(Vector3)
  nameWithType: Extensions.Abs(Vector3)
  fullName: Petrosik.UnityUtility.Extensions.Abs(UnityEngine.Vector3)
  type: Method
  source:
    remote:
      path: Utility/Utility.cs
      branch: master
      repo: https://github.com/petrosik/Utility-Stuff
    id: Abs
    path: ../Utility/Utility.cs
    startLine: 725
  assemblies:
  - PetrosikUtility
  namespace: Petrosik.UnityUtility
  summary: Returns abs vector value (same as for Vector2)
  example: []
  syntax:
    content: public static Vector3 Abs(this Vector3 v)
    parameters:
    - id: v
      type: UnityEngine.Vector3
      description: ''
    return:
      type: UnityEngine.Vector3
      description: ''
    content.vb: Public Shared Function Abs(v As Vector3) As Vector3
  overload: Petrosik.UnityUtility.Extensions.Abs*
- uid: Petrosik.UnityUtility.Extensions.Round(UnityEngine.Vector3,System.Int32)
  commentId: M:Petrosik.UnityUtility.Extensions.Round(UnityEngine.Vector3,System.Int32)
  id: Round(UnityEngine.Vector3,System.Int32)
  isExtensionMethod: true
  parent: Petrosik.UnityUtility.Extensions
  langs:
  - csharp
  - vb
  name: Round(Vector3, int)
  nameWithType: Extensions.Round(Vector3, int)
  fullName: Petrosik.UnityUtility.Extensions.Round(UnityEngine.Vector3, int)
  type: Method
  source:
    remote:
      path: Utility/Utility.cs
      branch: master
      repo: https://github.com/petrosik/Utility-Stuff
    id: Round
    path: ../Utility/Utility.cs
    startLine: 735
  assemblies:
  - PetrosikUtility
  namespace: Petrosik.UnityUtility
  summary: Rounding to the specific number of digits
  example: []
  syntax:
    content: public static Vector3 Round(this Vector3 v, int digits)
    parameters:
    - id: v
      type: UnityEngine.Vector3
      description: ''
    - id: digits
      type: System.Int32
      description: ''
    return:
      type: UnityEngine.Vector3
      description: ''
    content.vb: Public Shared Function Round(v As Vector3, digits As Integer) As Vector3
  overload: Petrosik.UnityUtility.Extensions.Round*
  nameWithType.vb: Extensions.Round(Vector3, Integer)
  fullName.vb: Petrosik.UnityUtility.Extensions.Round(UnityEngine.Vector3, Integer)
  name.vb: Round(Vector3, Integer)
- uid: Petrosik.UnityUtility.Extensions.Floor(UnityEngine.Vector3)
  commentId: M:Petrosik.UnityUtility.Extensions.Floor(UnityEngine.Vector3)
  id: Floor(UnityEngine.Vector3)
  isExtensionMethod: true
  parent: Petrosik.UnityUtility.Extensions
  langs:
  - csharp
  - vb
  name: Floor(Vector3)
  nameWithType: Extensions.Floor(Vector3)
  fullName: Petrosik.UnityUtility.Extensions.Floor(UnityEngine.Vector3)
  type: Method
  source:
    remote:
      path: Utility/Utility.cs
      branch: master
      repo: https://github.com/petrosik/Utility-Stuff
    id: Floor
    path: ../Utility/Utility.cs
    startLine: 739
  assemblies:
  - PetrosikUtility
  namespace: Petrosik.UnityUtility
  syntax:
    content: public static Vector3 Floor(this Vector3 v)
    parameters:
    - id: v
      type: UnityEngine.Vector3
    return:
      type: UnityEngine.Vector3
    content.vb: Public Shared Function Floor(v As Vector3) As Vector3
  overload: Petrosik.UnityUtility.Extensions.Floor*
- uid: Petrosik.UnityUtility.Extensions.Ceiling(UnityEngine.Vector3)
  commentId: M:Petrosik.UnityUtility.Extensions.Ceiling(UnityEngine.Vector3)
  id: Ceiling(UnityEngine.Vector3)
  isExtensionMethod: true
  parent: Petrosik.UnityUtility.Extensions
  langs:
  - csharp
  - vb
  name: Ceiling(Vector3)
  nameWithType: Extensions.Ceiling(Vector3)
  fullName: Petrosik.UnityUtility.Extensions.Ceiling(UnityEngine.Vector3)
  type: Method
  source:
    remote:
      path: Utility/Utility.cs
      branch: master
      repo: https://github.com/petrosik/Utility-Stuff
    id: Ceiling
    path: ../Utility/Utility.cs
    startLine: 743
  assemblies:
  - PetrosikUtility
  namespace: Petrosik.UnityUtility
  syntax:
    content: public static Vector3 Ceiling(this Vector3 v)
    parameters:
    - id: v
      type: UnityEngine.Vector3
    return:
      type: UnityEngine.Vector3
    content.vb: Public Shared Function Ceiling(v As Vector3) As Vector3
  overload: Petrosik.UnityUtility.Extensions.Ceiling*
- uid: Petrosik.UnityUtility.Extensions.Sum(UnityEngine.Vector3Int)
  commentId: M:Petrosik.UnityUtility.Extensions.Sum(UnityEngine.Vector3Int)
  id: Sum(UnityEngine.Vector3Int)
  isExtensionMethod: true
  parent: Petrosik.UnityUtility.Extensions
  langs:
  - csharp
  - vb
  name: Sum(Vector3Int)
  nameWithType: Extensions.Sum(Vector3Int)
  fullName: Petrosik.UnityUtility.Extensions.Sum(UnityEngine.Vector3Int)
  type: Method
  source:
    remote:
      path: Utility/Utility.cs
      branch: master
      repo: https://github.com/petrosik/Utility-Stuff
    id: Sum
    path: ../Utility/Utility.cs
    startLine: 752
  assemblies:
  - PetrosikUtility
  namespace: Petrosik.UnityUtility
  summary: Gets sum of the x, y, z
  example: []
  syntax:
    content: public static int Sum(this Vector3Int v)
    parameters:
    - id: v
      type: UnityEngine.Vector3Int
      description: ''
    return:
      type: System.Int32
      description: ''
    content.vb: Public Shared Function Sum(v As Vector3Int) As Integer
  overload: Petrosik.UnityUtility.Extensions.Sum*
- uid: Petrosik.UnityUtility.Extensions.Abs(UnityEngine.Vector2)
  commentId: M:Petrosik.UnityUtility.Extensions.Abs(UnityEngine.Vector2)
  id: Abs(UnityEngine.Vector2)
  isExtensionMethod: true
  parent: Petrosik.UnityUtility.Extensions
  langs:
  - csharp
  - vb
  name: Abs(Vector2)
  nameWithType: Extensions.Abs(Vector2)
  fullName: Petrosik.UnityUtility.Extensions.Abs(UnityEngine.Vector2)
  type: Method
  source:
    remote:
      path: Utility/Utility.cs
      branch: master
      repo: https://github.com/petrosik/Utility-Stuff
    id: Abs
    path: ../Utility/Utility.cs
    startLine: 761
  assemblies:
  - PetrosikUtility
  namespace: Petrosik.UnityUtility
  summary: Returns abs vector value
  example: []
  syntax:
    content: public static Vector2 Abs(this Vector2 v)
    parameters:
    - id: v
      type: UnityEngine.Vector2
      description: ''
    return:
      type: UnityEngine.Vector2
      description: ''
    content.vb: Public Shared Function Abs(v As Vector2) As Vector2
  overload: Petrosik.UnityUtility.Extensions.Abs*
- uid: Petrosik.UnityUtility.Extensions.Round(UnityEngine.Vector2,System.Int32)
  commentId: M:Petrosik.UnityUtility.Extensions.Round(UnityEngine.Vector2,System.Int32)
  id: Round(UnityEngine.Vector2,System.Int32)
  isExtensionMethod: true
  parent: Petrosik.UnityUtility.Extensions
  langs:
  - csharp
  - vb
  name: Round(Vector2, int)
  nameWithType: Extensions.Round(Vector2, int)
  fullName: Petrosik.UnityUtility.Extensions.Round(UnityEngine.Vector2, int)
  type: Method
  source:
    remote:
      path: Utility/Utility.cs
      branch: master
      repo: https://github.com/petrosik/Utility-Stuff
    id: Round
    path: ../Utility/Utility.cs
    startLine: 771
  assemblies:
  - PetrosikUtility
  namespace: Petrosik.UnityUtility
  summary: Rounding to the specific number of digits
  example: []
  syntax:
    content: public static Vector2 Round(this Vector2 v, int digits)
    parameters:
    - id: v
      type: UnityEngine.Vector2
      description: ''
    - id: digits
      type: System.Int32
      description: ''
    return:
      type: UnityEngine.Vector2
      description: ''
    content.vb: Public Shared Function Round(v As Vector2, digits As Integer) As Vector2
  overload: Petrosik.UnityUtility.Extensions.Round*
  nameWithType.vb: Extensions.Round(Vector2, Integer)
  fullName.vb: Petrosik.UnityUtility.Extensions.Round(UnityEngine.Vector2, Integer)
  name.vb: Round(Vector2, Integer)
- uid: Petrosik.UnityUtility.Extensions.Floor(UnityEngine.Vector2)
  commentId: M:Petrosik.UnityUtility.Extensions.Floor(UnityEngine.Vector2)
  id: Floor(UnityEngine.Vector2)
  isExtensionMethod: true
  parent: Petrosik.UnityUtility.Extensions
  langs:
  - csharp
  - vb
  name: Floor(Vector2)
  nameWithType: Extensions.Floor(Vector2)
  fullName: Petrosik.UnityUtility.Extensions.Floor(UnityEngine.Vector2)
  type: Method
  source:
    remote:
      path: Utility/Utility.cs
      branch: master
      repo: https://github.com/petrosik/Utility-Stuff
    id: Floor
    path: ../Utility/Utility.cs
    startLine: 775
  assemblies:
  - PetrosikUtility
  namespace: Petrosik.UnityUtility
  syntax:
    content: public static Vector2 Floor(this Vector2 v)
    parameters:
    - id: v
      type: UnityEngine.Vector2
    return:
      type: UnityEngine.Vector2
    content.vb: Public Shared Function Floor(v As Vector2) As Vector2
  overload: Petrosik.UnityUtility.Extensions.Floor*
- uid: Petrosik.UnityUtility.Extensions.Ceiling(UnityEngine.Vector2)
  commentId: M:Petrosik.UnityUtility.Extensions.Ceiling(UnityEngine.Vector2)
  id: Ceiling(UnityEngine.Vector2)
  isExtensionMethod: true
  parent: Petrosik.UnityUtility.Extensions
  langs:
  - csharp
  - vb
  name: Ceiling(Vector2)
  nameWithType: Extensions.Ceiling(Vector2)
  fullName: Petrosik.UnityUtility.Extensions.Ceiling(UnityEngine.Vector2)
  type: Method
  source:
    remote:
      path: Utility/Utility.cs
      branch: master
      repo: https://github.com/petrosik/Utility-Stuff
    id: Ceiling
    path: ../Utility/Utility.cs
    startLine: 779
  assemblies:
  - PetrosikUtility
  namespace: Petrosik.UnityUtility
  syntax:
    content: public static Vector2 Ceiling(this Vector2 v)
    parameters:
    - id: v
      type: UnityEngine.Vector2
    return:
      type: UnityEngine.Vector2
    content.vb: Public Shared Function Ceiling(v As Vector2) As Vector2
  overload: Petrosik.UnityUtility.Extensions.Ceiling*
- uid: Petrosik.UnityUtility.Extensions.Sum(UnityEngine.Vector2Int)
  commentId: M:Petrosik.UnityUtility.Extensions.Sum(UnityEngine.Vector2Int)
  id: Sum(UnityEngine.Vector2Int)
  isExtensionMethod: true
  parent: Petrosik.UnityUtility.Extensions
  langs:
  - csharp
  - vb
  name: Sum(Vector2Int)
  nameWithType: Extensions.Sum(Vector2Int)
  fullName: Petrosik.UnityUtility.Extensions.Sum(UnityEngine.Vector2Int)
  type: Method
  source:
    remote:
      path: Utility/Utility.cs
      branch: master
      repo: https://github.com/petrosik/Utility-Stuff
    id: Sum
    path: ../Utility/Utility.cs
    startLine: 788
  assemblies:
  - PetrosikUtility
  namespace: Petrosik.UnityUtility
  summary: Gets sum of the x and y
  example: []
  syntax:
    content: public static int Sum(this Vector2Int v)
    parameters:
    - id: v
      type: UnityEngine.Vector2Int
      description: ''
    return:
      type: System.Int32
      description: ''
    content.vb: Public Shared Function Sum(v As Vector2Int) As Integer
  overload: Petrosik.UnityUtility.Extensions.Sum*
- uid: Petrosik.UnityUtility.Extensions.Sum(UnityEngine.Vector3)
  commentId: M:Petrosik.UnityUtility.Extensions.Sum(UnityEngine.Vector3)
  id: Sum(UnityEngine.Vector3)
  isExtensionMethod: true
  parent: Petrosik.UnityUtility.Extensions
  langs:
  - csharp
  - vb
  name: Sum(Vector3)
  nameWithType: Extensions.Sum(Vector3)
  fullName: Petrosik.UnityUtility.Extensions.Sum(UnityEngine.Vector3)
  type: Method
  source:
    remote:
      path: Utility/Utility.cs
      branch: master
      repo: https://github.com/petrosik/Utility-Stuff
    id: Sum
    path: ../Utility/Utility.cs
    startLine: 792
  assemblies:
  - PetrosikUtility
  namespace: Petrosik.UnityUtility
  syntax:
    content: public static float Sum(this Vector3 v)
    parameters:
    - id: v
      type: UnityEngine.Vector3
    return:
      type: System.Single
    content.vb: Public Shared Function Sum(v As Vector3) As Single
  overload: Petrosik.UnityUtility.Extensions.Sum*
- uid: Petrosik.UnityUtility.Extensions.Sum(UnityEngine.Vector2)
  commentId: M:Petrosik.UnityUtility.Extensions.Sum(UnityEngine.Vector2)
  id: Sum(UnityEngine.Vector2)
  isExtensionMethod: true
  parent: Petrosik.UnityUtility.Extensions
  langs:
  - csharp
  - vb
  name: Sum(Vector2)
  nameWithType: Extensions.Sum(Vector2)
  fullName: Petrosik.UnityUtility.Extensions.Sum(UnityEngine.Vector2)
  type: Method
  source:
    remote:
      path: Utility/Utility.cs
      branch: master
      repo: https://github.com/petrosik/Utility-Stuff
    id: Sum
    path: ../Utility/Utility.cs
    startLine: 796
  assemblies:
  - PetrosikUtility
  namespace: Petrosik.UnityUtility
  syntax:
    content: public static float Sum(this Vector2 v)
    parameters:
    - id: v
      type: UnityEngine.Vector2
    return:
      type: System.Single
    content.vb: Public Shared Function Sum(v As Vector2) As Single
  overload: Petrosik.UnityUtility.Extensions.Sum*
- uid: Petrosik.UnityUtility.Extensions.Average(UnityEngine.Vector3)
  commentId: M:Petrosik.UnityUtility.Extensions.Average(UnityEngine.Vector3)
  id: Average(UnityEngine.Vector3)
  isExtensionMethod: true
  parent: Petrosik.UnityUtility.Extensions
  langs:
  - csharp
  - vb
  name: Average(Vector3)
  nameWithType: Extensions.Average(Vector3)
  fullName: Petrosik.UnityUtility.Extensions.Average(UnityEngine.Vector3)
  type: Method
  source:
    remote:
      path: Utility/Utility.cs
      branch: master
      repo: https://github.com/petrosik/Utility-Stuff
    id: Average
    path: ../Utility/Utility.cs
    startLine: 805
  assemblies:
  - PetrosikUtility
  namespace: Petrosik.UnityUtility
  summary: Takes all values from <code class="paramref">v</code> sum's them up and divides them by 3
  example: []
  syntax:
    content: public static float Average(this Vector3 v)
    parameters:
    - id: v
      type: UnityEngine.Vector3
      description: ''
    return:
      type: System.Single
      description: ''
    content.vb: Public Shared Function Average(v As Vector3) As Single
  overload: Petrosik.UnityUtility.Extensions.Average*
- uid: Petrosik.UnityUtility.Extensions.Average(UnityEngine.Vector2)
  commentId: M:Petrosik.UnityUtility.Extensions.Average(UnityEngine.Vector2)
  id: Average(UnityEngine.Vector2)
  isExtensionMethod: true
  parent: Petrosik.UnityUtility.Extensions
  langs:
  - csharp
  - vb
  name: Average(Vector2)
  nameWithType: Extensions.Average(Vector2)
  fullName: Petrosik.UnityUtility.Extensions.Average(UnityEngine.Vector2)
  type: Method
  source:
    remote:
      path: Utility/Utility.cs
      branch: master
      repo: https://github.com/petrosik/Utility-Stuff
    id: Average
    path: ../Utility/Utility.cs
    startLine: 814
  assemblies:
  - PetrosikUtility
  namespace: Petrosik.UnityUtility
  summary: Takes all values from <code class="paramref">v</code> sum's them up and divides them by 2
  example: []
  syntax:
    content: public static float Average(this Vector2 v)
    parameters:
    - id: v
      type: UnityEngine.Vector2
      description: ''
    return:
      type: System.Single
      description: ''
    content.vb: Public Shared Function Average(v As Vector2) As Single
  overload: Petrosik.UnityUtility.Extensions.Average*
- uid: Petrosik.UnityUtility.Extensions.Average(UnityEngine.Vector3Int)
  commentId: M:Petrosik.UnityUtility.Extensions.Average(UnityEngine.Vector3Int)
  id: Average(UnityEngine.Vector3Int)
  isExtensionMethod: true
  parent: Petrosik.UnityUtility.Extensions
  langs:
  - csharp
  - vb
  name: Average(Vector3Int)
  nameWithType: Extensions.Average(Vector3Int)
  fullName: Petrosik.UnityUtility.Extensions.Average(UnityEngine.Vector3Int)
  type: Method
  source:
    remote:
      path: Utility/Utility.cs
      branch: master
      repo: https://github.com/petrosik/Utility-Stuff
    id: Average
    path: ../Utility/Utility.cs
    startLine: 823
  assemblies:
  - PetrosikUtility
  namespace: Petrosik.UnityUtility
  summary: Takes all values from <code class="paramref">v</code> sum's them up and divides them by 3
  example: []
  syntax:
    content: public static float Average(this Vector3Int v)
    parameters:
    - id: v
      type: UnityEngine.Vector3Int
      description: ''
    return:
      type: System.Single
      description: ''
    content.vb: Public Shared Function Average(v As Vector3Int) As Single
  overload: Petrosik.UnityUtility.Extensions.Average*
- uid: Petrosik.UnityUtility.Extensions.Average(UnityEngine.Vector2Int)
  commentId: M:Petrosik.UnityUtility.Extensions.Average(UnityEngine.Vector2Int)
  id: Average(UnityEngine.Vector2Int)
  isExtensionMethod: true
  parent: Petrosik.UnityUtility.Extensions
  langs:
  - csharp
  - vb
  name: Average(Vector2Int)
  nameWithType: Extensions.Average(Vector2Int)
  fullName: Petrosik.UnityUtility.Extensions.Average(UnityEngine.Vector2Int)
  type: Method
  source:
    remote:
      path: Utility/Utility.cs
      branch: master
      repo: https://github.com/petrosik/Utility-Stuff
    id: Average
    path: ../Utility/Utility.cs
    startLine: 832
  assemblies:
  - PetrosikUtility
  namespace: Petrosik.UnityUtility
  summary: Takes all values from <code class="paramref">v</code> sum's them up and divides them by 2
  example: []
  syntax:
    content: public static float Average(this Vector2Int v)
    parameters:
    - id: v
      type: UnityEngine.Vector2Int
      description: ''
    return:
      type: System.Single
      description: ''
    content.vb: Public Shared Function Average(v As Vector2Int) As Single
  overload: Petrosik.UnityUtility.Extensions.Average*
- uid: Petrosik.UnityUtility.Extensions.Clamp(UnityEngine.Vector3,System.Single,System.Single)
  commentId: M:Petrosik.UnityUtility.Extensions.Clamp(UnityEngine.Vector3,System.Single,System.Single)
  id: Clamp(UnityEngine.Vector3,System.Single,System.Single)
  isExtensionMethod: true
  parent: Petrosik.UnityUtility.Extensions
  langs:
  - csharp
  - vb
  name: Clamp(Vector3, float, float)
  nameWithType: Extensions.Clamp(Vector3, float, float)
  fullName: Petrosik.UnityUtility.Extensions.Clamp(UnityEngine.Vector3, float, float)
  type: Method
  source:
    remote:
      path: Utility/Utility.cs
      branch: master
      repo: https://github.com/petrosik/Utility-Stuff
    id: Clamp
    path: ../Utility/Utility.cs
    startLine: 843
  assemblies:
  - PetrosikUtility
  namespace: Petrosik.UnityUtility
  summary: Clamps all axis to between min and max, same as Mathf.Clamp()
  example: []
  syntax:
    content: public static Vector3 Clamp(this Vector3 v, float min, float max)
    parameters:
    - id: v
      type: UnityEngine.Vector3
      description: ''
    - id: min
      type: System.Single
      description: ''
    - id: max
      type: System.Single
      description: ''
    return:
      type: UnityEngine.Vector3
      description: ''
    content.vb: Public Shared Function Clamp(v As Vector3, min As Single, max As Single) As Vector3
  overload: Petrosik.UnityUtility.Extensions.Clamp*
  nameWithType.vb: Extensions.Clamp(Vector3, Single, Single)
  fullName.vb: Petrosik.UnityUtility.Extensions.Clamp(UnityEngine.Vector3, Single, Single)
  name.vb: Clamp(Vector3, Single, Single)
- uid: Petrosik.UnityUtility.Extensions.Clamp(UnityEngine.Vector2,System.Single,System.Single)
  commentId: M:Petrosik.UnityUtility.Extensions.Clamp(UnityEngine.Vector2,System.Single,System.Single)
  id: Clamp(UnityEngine.Vector2,System.Single,System.Single)
  isExtensionMethod: true
  parent: Petrosik.UnityUtility.Extensions
  langs:
  - csharp
  - vb
  name: Clamp(Vector2, float, float)
  nameWithType: Extensions.Clamp(Vector2, float, float)
  fullName: Petrosik.UnityUtility.Extensions.Clamp(UnityEngine.Vector2, float, float)
  type: Method
  source:
    remote:
      path: Utility/Utility.cs
      branch: master
      repo: https://github.com/petrosik/Utility-Stuff
    id: Clamp
    path: ../Utility/Utility.cs
    startLine: 857
  assemblies:
  - PetrosikUtility
  namespace: Petrosik.UnityUtility
  summary: Clamps all axis to between min and max, same as Mathf.Clamp()
  example: []
  syntax:
    content: public static Vector2 Clamp(this Vector2 v, float min, float max)
    parameters:
    - id: v
      type: UnityEngine.Vector2
      description: ''
    - id: min
      type: System.Single
      description: ''
    - id: max
      type: System.Single
      description: ''
    return:
      type: UnityEngine.Vector2
      description: ''
    content.vb: Public Shared Function Clamp(v As Vector2, min As Single, max As Single) As Vector2
  overload: Petrosik.UnityUtility.Extensions.Clamp*
  nameWithType.vb: Extensions.Clamp(Vector2, Single, Single)
  fullName.vb: Petrosik.UnityUtility.Extensions.Clamp(UnityEngine.Vector2, Single, Single)
  name.vb: Clamp(Vector2, Single, Single)
- uid: Petrosik.UnityUtility.Extensions.AlignToAxis(UnityEngine.Vector3)
  commentId: M:Petrosik.UnityUtility.Extensions.AlignToAxis(UnityEngine.Vector3)
  id: AlignToAxis(UnityEngine.Vector3)
  isExtensionMethod: true
  parent: Petrosik.UnityUtility.Extensions
  langs:
  - csharp
  - vb
  name: AlignToAxis(Vector3)
  nameWithType: Extensions.AlignToAxis(Vector3)
  fullName: Petrosik.UnityUtility.Extensions.AlignToAxis(UnityEngine.Vector3)
  type: Method
  source:
    remote:
      path: Utility/Utility.cs
      branch: master
      repo: https://github.com/petrosik/Utility-Stuff
    id: AlignToAxis
    path: ../Utility/Utility.cs
    startLine: 869
  assemblies:
  - PetrosikUtility
  namespace: Petrosik.UnityUtility
  summary: >-
    Aligns vector <code class="paramref">v</code> to be either 1,0,-1 on either axis if the axis is &gt;= 0.5f

    <p>Multiple Axis can have values (ie [1,-1,0]) </p>
  example: []
  syntax:
    content: public static Vector3 AlignToAxis(this Vector3 v)
    parameters:
    - id: v
      type: UnityEngine.Vector3
      description: ''
    return:
      type: UnityEngine.Vector3
      description: ''
    content.vb: Public Shared Function AlignToAxis(v As Vector3) As Vector3
  overload: Petrosik.UnityUtility.Extensions.AlignToAxis*
- uid: Petrosik.UnityUtility.Extensions.AlignToAxis(UnityEngine.Vector2)
  commentId: M:Petrosik.UnityUtility.Extensions.AlignToAxis(UnityEngine.Vector2)
  id: AlignToAxis(UnityEngine.Vector2)
  isExtensionMethod: true
  parent: Petrosik.UnityUtility.Extensions
  langs:
  - csharp
  - vb
  name: AlignToAxis(Vector2)
  nameWithType: Extensions.AlignToAxis(Vector2)
  fullName: Petrosik.UnityUtility.Extensions.AlignToAxis(UnityEngine.Vector2)
  type: Method
  source:
    remote:
      path: Utility/Utility.cs
      branch: master
      repo: https://github.com/petrosik/Utility-Stuff
    id: AlignToAxis
    path: ../Utility/Utility.cs
    startLine: 882
  assemblies:
  - PetrosikUtility
  namespace: Petrosik.UnityUtility
  summary: >-
    Aligns vector <code class="paramref">v</code> to be either 1,0,-1 on either axis if the axis is &gt;= 0.5f

    <p>Multiple Axis can have values (ie [1,-1,0]) </p>
  example: []
  syntax:
    content: public static Vector2 AlignToAxis(this Vector2 v)
    parameters:
    - id: v
      type: UnityEngine.Vector2
      description: ''
    return:
      type: UnityEngine.Vector2
      description: ''
    content.vb: Public Shared Function AlignToAxis(v As Vector2) As Vector2
  overload: Petrosik.UnityUtility.Extensions.AlignToAxis*
references:
- uid: Petrosik.UnityUtility
  commentId: N:Petrosik.UnityUtility
  href: Petrosik.html
  name: Petrosik.UnityUtility
  nameWithType: Petrosik.UnityUtility
  fullName: Petrosik.UnityUtility
  spec.csharp:
  - uid: Petrosik
    name: Petrosik
    href: Petrosik.html
  - name: .
  - uid: Petrosik.UnityUtility
    name: UnityUtility
    href: Petrosik.UnityUtility.html
  spec.vb:
  - uid: Petrosik
    name: Petrosik
    href: Petrosik.html
  - name: .
  - uid: Petrosik.UnityUtility
    name: UnityUtility
    href: Petrosik.UnityUtility.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: Petrosik.UnityUtility.Extensions.Rotate*
  commentId: Overload:Petrosik.UnityUtility.Extensions.Rotate
  href: Petrosik.UnityUtility.Extensions.html#Petrosik_UnityUtility_Extensions_Rotate_UnityEngine_Vector2_System_Single_
  name: Rotate
  nameWithType: Extensions.Rotate
  fullName: Petrosik.UnityUtility.Extensions.Rotate
- uid: UnityEngine.Vector2
  commentId: T:UnityEngine.Vector2
  parent: UnityEngine
  isExternal: true
  name: Vector2
  nameWithType: Vector2
  fullName: UnityEngine.Vector2
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.single
  name: float
  nameWithType: float
  fullName: float
  nameWithType.vb: Single
  fullName.vb: Single
  name.vb: Single
- uid: UnityEngine
  commentId: N:UnityEngine
  isExternal: true
  name: UnityEngine
  nameWithType: UnityEngine
  fullName: UnityEngine
- uid: Petrosik.UnityUtility.Extensions.Direction*
  commentId: Overload:Petrosik.UnityUtility.Extensions.Direction
  href: Petrosik.UnityUtility.Extensions.html#Petrosik_UnityUtility_Extensions_Direction_UnityEngine_Vector2_UnityEngine_Vector2_
  name: Direction
  nameWithType: Extensions.Direction
  fullName: Petrosik.UnityUtility.Extensions.Direction
- uid: UnityEngine.Vector3
  commentId: T:UnityEngine.Vector3
  parent: UnityEngine
  isExternal: true
  name: Vector3
  nameWithType: Vector3
  fullName: UnityEngine.Vector3
- uid: Petrosik.UnityUtility.Extensions.DestroyChildren*
  commentId: Overload:Petrosik.UnityUtility.Extensions.DestroyChildren
  href: Petrosik.UnityUtility.Extensions.html#Petrosik_UnityUtility_Extensions_DestroyChildren_UnityEngine_GameObject_System_Collections_Generic_List_System_String__System_Boolean_
  name: DestroyChildren
  nameWithType: Extensions.DestroyChildren
  fullName: Petrosik.UnityUtility.Extensions.DestroyChildren
- uid: UnityEngine.GameObject
  commentId: T:UnityEngine.GameObject
  parent: UnityEngine
  isExternal: true
  name: GameObject
  nameWithType: GameObject
  fullName: UnityEngine.GameObject
- uid: System.Collections.Generic.List{System.String}
  commentId: T:System.Collections.Generic.List{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<string>
  nameWithType: List<string>
  fullName: System.Collections.Generic.List<string>
  nameWithType.vb: List(Of String)
  fullName.vb: System.Collections.Generic.List(Of String)
  name.vb: List(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: Petrosik.UnityUtility.Extensions.CleanList*
  commentId: Overload:Petrosik.UnityUtility.Extensions.CleanList
  href: Petrosik.UnityUtility.Extensions.html#Petrosik_UnityUtility_Extensions_CleanList_System_Collections_Generic_List_UnityEngine_GameObject__
  name: CleanList
  nameWithType: Extensions.CleanList
  fullName: Petrosik.UnityUtility.Extensions.CleanList
- uid: System.Collections.Generic.List{UnityEngine.GameObject}
  commentId: T:System.Collections.Generic.List{UnityEngine.GameObject}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<GameObject>
  nameWithType: List<GameObject>
  fullName: System.Collections.Generic.List<UnityEngine.GameObject>
  nameWithType.vb: List(Of GameObject)
  fullName.vb: System.Collections.Generic.List(Of UnityEngine.GameObject)
  name.vb: List(Of GameObject)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - uid: UnityEngine.GameObject
    name: GameObject
    isExternal: true
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - uid: UnityEngine.GameObject
    name: GameObject
    isExternal: true
  - name: )
- uid: Petrosik.UnityUtility.Extensions.IsUnityNull*
  commentId: Overload:Petrosik.UnityUtility.Extensions.IsUnityNull
  href: Petrosik.UnityUtility.Extensions.html#Petrosik_UnityUtility_Extensions_IsUnityNull_System_Object_
  name: IsUnityNull
  nameWithType: Extensions.IsUnityNull
  fullName: Petrosik.UnityUtility.Extensions.IsUnityNull
- uid: Petrosik.UnityUtility.Extensions.DistanceIY*
  commentId: Overload:Petrosik.UnityUtility.Extensions.DistanceIY
  href: Petrosik.UnityUtility.Extensions.html#Petrosik_UnityUtility_Extensions_DistanceIY_UnityEngine_Vector3_UnityEngine_Vector3_
  name: DistanceIY
  nameWithType: Extensions.DistanceIY
  fullName: Petrosik.UnityUtility.Extensions.DistanceIY
- uid: Petrosik.UnityUtility.Extensions.Convert*
  commentId: Overload:Petrosik.UnityUtility.Extensions.Convert
  href: Petrosik.UnityUtility.Extensions.html#Petrosik_UnityUtility_Extensions_Convert_UnityEngine_Vector2_
  name: Convert
  nameWithType: Extensions.Convert
  fullName: Petrosik.UnityUtility.Extensions.Convert
- uid: Petrosik.UnityUtility.Extensions.Abs*
  commentId: Overload:Petrosik.UnityUtility.Extensions.Abs
  href: Petrosik.UnityUtility.Extensions.html#Petrosik_UnityUtility_Extensions_Abs_UnityEngine_Vector3_
  name: Abs
  nameWithType: Extensions.Abs
  fullName: Petrosik.UnityUtility.Extensions.Abs
- uid: Petrosik.UnityUtility.Extensions.Round*
  commentId: Overload:Petrosik.UnityUtility.Extensions.Round
  href: Petrosik.UnityUtility.Extensions.html#Petrosik_UnityUtility_Extensions_Round_UnityEngine_Vector3_System_Int32_
  name: Round
  nameWithType: Extensions.Round
  fullName: Petrosik.UnityUtility.Extensions.Round
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: Petrosik.UnityUtility.Extensions.Floor*
  commentId: Overload:Petrosik.UnityUtility.Extensions.Floor
  href: Petrosik.UnityUtility.Extensions.html#Petrosik_UnityUtility_Extensions_Floor_UnityEngine_Vector3_
  name: Floor
  nameWithType: Extensions.Floor
  fullName: Petrosik.UnityUtility.Extensions.Floor
- uid: Petrosik.UnityUtility.Extensions.Ceiling*
  commentId: Overload:Petrosik.UnityUtility.Extensions.Ceiling
  href: Petrosik.UnityUtility.Extensions.html#Petrosik_UnityUtility_Extensions_Ceiling_UnityEngine_Vector3_
  name: Ceiling
  nameWithType: Extensions.Ceiling
  fullName: Petrosik.UnityUtility.Extensions.Ceiling
- uid: Petrosik.UnityUtility.Extensions.Sum*
  commentId: Overload:Petrosik.UnityUtility.Extensions.Sum
  href: Petrosik.UnityUtility.Extensions.html#Petrosik_UnityUtility_Extensions_Sum_UnityEngine_Vector3Int_
  name: Sum
  nameWithType: Extensions.Sum
  fullName: Petrosik.UnityUtility.Extensions.Sum
- uid: UnityEngine.Vector3Int
  commentId: T:UnityEngine.Vector3Int
  parent: UnityEngine
  isExternal: true
  name: Vector3Int
  nameWithType: Vector3Int
  fullName: UnityEngine.Vector3Int
- uid: UnityEngine.Vector2Int
  commentId: T:UnityEngine.Vector2Int
  parent: UnityEngine
  isExternal: true
  name: Vector2Int
  nameWithType: Vector2Int
  fullName: UnityEngine.Vector2Int
- uid: Petrosik.UnityUtility.Extensions.Average*
  commentId: Overload:Petrosik.UnityUtility.Extensions.Average
  href: Petrosik.UnityUtility.Extensions.html#Petrosik_UnityUtility_Extensions_Average_UnityEngine_Vector3_
  name: Average
  nameWithType: Extensions.Average
  fullName: Petrosik.UnityUtility.Extensions.Average
- uid: Petrosik.UnityUtility.Extensions.Clamp*
  commentId: Overload:Petrosik.UnityUtility.Extensions.Clamp
  href: Petrosik.UnityUtility.Extensions.html#Petrosik_UnityUtility_Extensions_Clamp_UnityEngine_Vector3_System_Single_System_Single_
  name: Clamp
  nameWithType: Extensions.Clamp
  fullName: Petrosik.UnityUtility.Extensions.Clamp
- uid: Petrosik.UnityUtility.Extensions.AlignToAxis*
  commentId: Overload:Petrosik.UnityUtility.Extensions.AlignToAxis
  href: Petrosik.UnityUtility.Extensions.html#Petrosik_UnityUtility_Extensions_AlignToAxis_UnityEngine_Vector3_
  name: AlignToAxis
  nameWithType: Extensions.AlignToAxis
  fullName: Petrosik.UnityUtility.Extensions.AlignToAxis
