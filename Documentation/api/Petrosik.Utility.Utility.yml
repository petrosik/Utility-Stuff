### YamlMime:ManagedReference
items:
- uid: Petrosik.Utility.Utility
  commentId: T:Petrosik.Utility.Utility
  id: Utility
  parent: Petrosik.Utility
  children:
  - Petrosik.Utility.Utility.BlendColors(System.Drawing.Color,System.Drawing.Color)
  - Petrosik.Utility.Utility.ChanceRoll(System.Double)
  - Petrosik.Utility.Utility.ChanceRoll(System.Double,System.Double)
  - Petrosik.Utility.Utility.Compress(System.Byte[])
  - Petrosik.Utility.Utility.ConsoleLog(System.Exception,System.String)
  - Petrosik.Utility.Utility.ConsoleLog(System.Object)
  - Petrosik.Utility.Utility.ConsoleLog(System.String,Petrosik.Enums.InfoType)
  - Petrosik.Utility.Utility.Decompress(System.Byte[])
  - Petrosik.Utility.Utility.Deserialize``1(System.Byte[])
  - Petrosik.Utility.Utility.FitMessageLimit(System.String,System.Int32,System.Int32,System.Int32)
  - Petrosik.Utility.Utility.GetEnumTypes``1
  - Petrosik.Utility.Utility.GetRandomDirection
  - Petrosik.Utility.Utility.MatchAndFillNull``1(System.Int32)
  - Petrosik.Utility.Utility.NextExponential(System.Int32,System.Int32,System.Double@,System.Double)
  - Petrosik.Utility.Utility.Rotate(System.Drawing.PointF,System.Single)
  - Petrosik.Utility.Utility.Serialize``1(``0)
  - Petrosik.Utility.Utility.SplitText(System.String,System.String@,System.Int32,System.Char)
  langs:
  - csharp
  - vb
  name: Utility
  nameWithType: Utility
  fullName: Petrosik.Utility.Utility
  type: Class
  source:
    remote:
      path: Utility/Utility.cs
      branch: master
      repo: https://github.com/petrosik/Utility-Stuff
    id: Utility
    path: ../Utility/Utility.cs
    startLine: 22
  assemblies:
  - PetrosikUtility
  namespace: Petrosik.Utility
  summary: >-
    Main Utility Class

    <p>Recommended when using: using Utility = Petrosik.Utility.Utility;</p>
  example: []
  syntax:
    content: public static class Utility
    content.vb: Public Module Utility
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: Petrosik.Utility.Utility.SplitText(System.String,System.String@,System.Int32,System.Char)
  commentId: M:Petrosik.Utility.Utility.SplitText(System.String,System.String@,System.Int32,System.Char)
  id: SplitText(System.String,System.String@,System.Int32,System.Char)
  parent: Petrosik.Utility.Utility
  langs:
  - csharp
  - vb
  name: SplitText(string, out string?, int, char)
  nameWithType: Utility.SplitText(string, out string?, int, char)
  fullName: Petrosik.Utility.Utility.SplitText(string, out string?, int, char)
  type: Method
  source:
    remote:
      path: Utility/Utility.cs
      branch: master
      repo: https://github.com/petrosik/Utility-Stuff
    id: SplitText
    path: ../Utility/Utility.cs
    startLine: 35
  assemblies:
  - PetrosikUtility
  namespace: Petrosik.Utility
  summary: Splits text based on spaces or by `"`
  example: []
  syntax:
    content: public static string?[] SplitText(string message, out string? tempparam, int paramlenght = 8, char prefix = '$')
    parameters:
    - id: message
      type: System.String
      description: Original text to split
    - id: tempparam
      type: System.String
      description: Remaining text that couldn't fit
    - id: paramlenght
      type: System.Int32
      description: How many words to split for
    - id: prefix
      type: System.Char
      description: Prefix to remove
    return:
      type: System.String[]
      description: >-
        Input:  `Hi, world. "This is a example"`  

        Output: [`Hi,`,`world.`,`"This is a example"`]
    content.vb: Public Shared Function SplitText(message As String, tempparam As String, paramlenght As Integer = 8, prefix As Char = "$"c) As String()
  overload: Petrosik.Utility.Utility.SplitText*
  nameWithType.vb: Utility.SplitText(String, String, Integer, Char)
  fullName.vb: Petrosik.Utility.Utility.SplitText(String, String, Integer, Char)
  name.vb: SplitText(String, String, Integer, Char)
- uid: Petrosik.Utility.Utility.FitMessageLimit(System.String,System.Int32,System.Int32,System.Int32)
  commentId: M:Petrosik.Utility.Utility.FitMessageLimit(System.String,System.Int32,System.Int32,System.Int32)
  id: FitMessageLimit(System.String,System.Int32,System.Int32,System.Int32)
  parent: Petrosik.Utility.Utility
  langs:
  - csharp
  - vb
  name: FitMessageLimit(string, int, int, int)
  nameWithType: Utility.FitMessageLimit(string, int, int, int)
  fullName: Petrosik.Utility.Utility.FitMessageLimit(string, int, int, int)
  type: Method
  source:
    remote:
      path: Utility/Utility.cs
      branch: master
      repo: https://github.com/petrosik/Utility-Stuff
    id: FitMessageLimit
    path: ../Utility/Utility.cs
    startLine: 100
  assemblies:
  - PetrosikUtility
  namespace: Petrosik.Utility
  summary: Splits string into a list of strings by spaces untill it reached message limit, overridechunksize makes it ignore spaces
  example: []
  syntax:
    content: public static List<string> FitMessageLimit(string str, int messagelimit, int overhead = 650, int overridechunksize = 0)
    parameters:
    - id: str
      type: System.String
      description: Original Text
    - id: messagelimit
      type: System.Int32
      description: How long should the split message be max (with overhead)
    - id: overhead
      type: System.Int32
      description: How much space should be at the end of the split part
    - id: overridechunksize
      type: System.Int32
      description: Set lenght how long should the messages be (ignores overhead)
    return:
      type: System.Collections.Generic.List{System.String}
      description: ''
    content.vb: Public Shared Function FitMessageLimit(str As String, messagelimit As Integer, overhead As Integer = 650, overridechunksize As Integer = 0) As List(Of String)
  overload: Petrosik.Utility.Utility.FitMessageLimit*
  nameWithType.vb: Utility.FitMessageLimit(String, Integer, Integer, Integer)
  fullName.vb: Petrosik.Utility.Utility.FitMessageLimit(String, Integer, Integer, Integer)
  name.vb: FitMessageLimit(String, Integer, Integer, Integer)
- uid: Petrosik.Utility.Utility.GetEnumTypes``1
  commentId: M:Petrosik.Utility.Utility.GetEnumTypes``1
  id: GetEnumTypes``1
  parent: Petrosik.Utility.Utility
  langs:
  - csharp
  - vb
  name: GetEnumTypes<T>()
  nameWithType: Utility.GetEnumTypes<T>()
  fullName: Petrosik.Utility.Utility.GetEnumTypes<T>()
  type: Method
  source:
    remote:
      path: Utility/Utility.cs
      branch: master
      repo: https://github.com/petrosik/Utility-Stuff
    id: GetEnumTypes
    path: ../Utility/Utility.cs
    startLine: 155
  assemblies:
  - PetrosikUtility
  namespace: Petrosik.Utility
  summary: Returns list of all options in the enum
  example: []
  syntax:
    content: 'public static List<T> GetEnumTypes<T>() where T : Enum'
    typeParameters:
    - id: T
      description: Enum type
    return:
      type: System.Collections.Generic.List{{T}}
      description: ''
    content.vb: Public Shared Function GetEnumTypes(Of T As [Enum])() As List(Of T)
  overload: Petrosik.Utility.Utility.GetEnumTypes*
  nameWithType.vb: Utility.GetEnumTypes(Of T)()
  fullName.vb: Petrosik.Utility.Utility.GetEnumTypes(Of T)()
  name.vb: GetEnumTypes(Of T)()
- uid: Petrosik.Utility.Utility.MatchAndFillNull``1(System.Int32)
  commentId: M:Petrosik.Utility.Utility.MatchAndFillNull``1(System.Int32)
  id: MatchAndFillNull``1(System.Int32)
  parent: Petrosik.Utility.Utility
  langs:
  - csharp
  - vb
  name: MatchAndFillNull<T>(int)
  nameWithType: Utility.MatchAndFillNull<T>(int)
  fullName: Petrosik.Utility.Utility.MatchAndFillNull<T>(int)
  type: Method
  source:
    remote:
      path: Utility/Utility.cs
      branch: master
      repo: https://github.com/petrosik/Utility-Stuff
    id: MatchAndFillNull
    path: ../Utility/Utility.cs
    startLine: 165
  assemblies:
  - PetrosikUtility
  namespace: Petrosik.Utility
  syntax:
    content: public static List<T?> MatchAndFillNull<T>(int count)
    parameters:
    - id: count
      type: System.Int32
    typeParameters:
    - id: T
    return:
      type: System.Collections.Generic.List{{T}}
    content.vb: Public Shared Function MatchAndFillNull(Of T)(count As Integer) As List(Of T)
  overload: Petrosik.Utility.Utility.MatchAndFillNull*
  nameWithType.vb: Utility.MatchAndFillNull(Of T)(Integer)
  fullName.vb: Petrosik.Utility.Utility.MatchAndFillNull(Of T)(Integer)
  name.vb: MatchAndFillNull(Of T)(Integer)
- uid: Petrosik.Utility.Utility.Rotate(System.Drawing.PointF,System.Single)
  commentId: M:Petrosik.Utility.Utility.Rotate(System.Drawing.PointF,System.Single)
  id: Rotate(System.Drawing.PointF,System.Single)
  parent: Petrosik.Utility.Utility
  langs:
  - csharp
  - vb
  name: Rotate(PointF, float)
  nameWithType: Utility.Rotate(PointF, float)
  fullName: Petrosik.Utility.Utility.Rotate(System.Drawing.PointF, float)
  type: Method
  source:
    remote:
      path: Utility/Utility.cs
      branch: master
      repo: https://github.com/petrosik/Utility-Stuff
    id: Rotate
    path: ../Utility/Utility.cs
    startLine: 183
  assemblies:
  - PetrosikUtility
  namespace: Petrosik.Utility
  summary: rotates vector(normalized direction) by set amount of degres
  example: []
  syntax:
    content: public static PointF Rotate(PointF v, float delta)
    parameters:
    - id: v
      type: System.Drawing.PointF
      description: Original vector
    - id: delta
      type: System.Single
      description: Degres
    return:
      type: System.Drawing.PointF
      description: ''
    content.vb: Public Shared Function Rotate(v As PointF, delta As Single) As PointF
  overload: Petrosik.Utility.Utility.Rotate*
  nameWithType.vb: Utility.Rotate(PointF, Single)
  fullName.vb: Petrosik.Utility.Utility.Rotate(System.Drawing.PointF, Single)
  name.vb: Rotate(PointF, Single)
- uid: Petrosik.Utility.Utility.Compress(System.Byte[])
  commentId: M:Petrosik.Utility.Utility.Compress(System.Byte[])
  id: Compress(System.Byte[])
  parent: Petrosik.Utility.Utility
  langs:
  - csharp
  - vb
  name: Compress(byte[])
  nameWithType: Utility.Compress(byte[])
  fullName: Petrosik.Utility.Utility.Compress(byte[])
  type: Method
  source:
    remote:
      path: Utility/Utility.cs
      branch: master
      repo: https://github.com/petrosik/Utility-Stuff
    id: Compress
    path: ../Utility/Utility.cs
    startLine: 193
  assemblies:
  - PetrosikUtility
  namespace: Petrosik.Utility
  summary: Compresses data using GZip
  example: []
  syntax:
    content: public static byte[] Compress(byte[] data)
    parameters:
    - id: data
      type: System.Byte[]
      description: ''
    return:
      type: System.Byte[]
      description: ''
    content.vb: Public Shared Function Compress(data As Byte()) As Byte()
  overload: Petrosik.Utility.Utility.Compress*
  nameWithType.vb: Utility.Compress(Byte())
  fullName.vb: Petrosik.Utility.Utility.Compress(Byte())
  name.vb: Compress(Byte())
- uid: Petrosik.Utility.Utility.Decompress(System.Byte[])
  commentId: M:Petrosik.Utility.Utility.Decompress(System.Byte[])
  id: Decompress(System.Byte[])
  parent: Petrosik.Utility.Utility
  langs:
  - csharp
  - vb
  name: Decompress(byte[])
  nameWithType: Utility.Decompress(byte[])
  fullName: Petrosik.Utility.Utility.Decompress(byte[])
  type: Method
  source:
    remote:
      path: Utility/Utility.cs
      branch: master
      repo: https://github.com/petrosik/Utility-Stuff
    id: Decompress
    path: ../Utility/Utility.cs
    startLine: 209
  assemblies:
  - PetrosikUtility
  namespace: Petrosik.Utility
  summary: Decompresses data using GZip
  example: []
  syntax:
    content: public static byte[] Decompress(byte[] compressedData)
    parameters:
    - id: compressedData
      type: System.Byte[]
      description: ''
    return:
      type: System.Byte[]
      description: ''
    content.vb: Public Shared Function Decompress(compressedData As Byte()) As Byte()
  overload: Petrosik.Utility.Utility.Decompress*
  nameWithType.vb: Utility.Decompress(Byte())
  fullName.vb: Petrosik.Utility.Utility.Decompress(Byte())
  name.vb: Decompress(Byte())
- uid: Petrosik.Utility.Utility.Serialize``1(``0)
  commentId: M:Petrosik.Utility.Utility.Serialize``1(``0)
  id: Serialize``1(``0)
  parent: Petrosik.Utility.Utility
  langs:
  - csharp
  - vb
  name: Serialize<T>(T)
  nameWithType: Utility.Serialize<T>(T)
  fullName: Petrosik.Utility.Utility.Serialize<T>(T)
  type: Method
  source:
    remote:
      path: Utility/Utility.cs
      branch: master
      repo: https://github.com/petrosik/Utility-Stuff
    id: Serialize
    path: ../Utility/Utility.cs
    startLine: 229
  assemblies:
  - PetrosikUtility
  namespace: Petrosik.Utility
  summary: Serializes obj using JsonSerializer and compresses it before returning byte array
  example: []
  syntax:
    content: public static byte[] Serialize<T>(T obj)
    parameters:
    - id: obj
      type: '{T}'
      description: ''
    typeParameters:
    - id: T
      description: ''
    return:
      type: System.Byte[]
      description: ''
    content.vb: Public Shared Function Serialize(Of T)(obj As T) As Byte()
  overload: Petrosik.Utility.Utility.Serialize*
  nameWithType.vb: Utility.Serialize(Of T)(T)
  fullName.vb: Petrosik.Utility.Utility.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
- uid: Petrosik.Utility.Utility.Deserialize``1(System.Byte[])
  commentId: M:Petrosik.Utility.Utility.Deserialize``1(System.Byte[])
  id: Deserialize``1(System.Byte[])
  parent: Petrosik.Utility.Utility
  langs:
  - csharp
  - vb
  name: Deserialize<T>(byte[])
  nameWithType: Utility.Deserialize<T>(byte[])
  fullName: Petrosik.Utility.Utility.Deserialize<T>(byte[])
  type: Method
  source:
    remote:
      path: Utility/Utility.cs
      branch: master
      repo: https://github.com/petrosik/Utility-Stuff
    id: Deserialize
    path: ../Utility/Utility.cs
    startLine: 239
  assemblies:
  - PetrosikUtility
  namespace: Petrosik.Utility
  summary: Decompresses byte array and deserializes using JsonSerializer before returning the type
  example: []
  syntax:
    content: public static T? Deserialize<T>(byte[] compressedData)
    parameters:
    - id: compressedData
      type: System.Byte[]
    typeParameters:
    - id: T
      description: ''
    return:
      type: '{T}'
      description: ''
    content.vb: Public Shared Function Deserialize(Of T)(compressedData As Byte()) As T
  overload: Petrosik.Utility.Utility.Deserialize*
  nameWithType.vb: Utility.Deserialize(Of T)(Byte())
  fullName.vb: Petrosik.Utility.Utility.Deserialize(Of T)(Byte())
  name.vb: Deserialize(Of T)(Byte())
- uid: Petrosik.Utility.Utility.GetRandomDirection
  commentId: M:Petrosik.Utility.Utility.GetRandomDirection
  id: GetRandomDirection
  parent: Petrosik.Utility.Utility
  langs:
  - csharp
  - vb
  name: GetRandomDirection()
  nameWithType: Utility.GetRandomDirection()
  fullName: Petrosik.Utility.Utility.GetRandomDirection()
  type: Method
  source:
    remote:
      path: Utility/Utility.cs
      branch: master
      repo: https://github.com/petrosik/Utility-Stuff
    id: GetRandomDirection
    path: ../Utility/Utility.cs
    startLine: 249
  assemblies:
  - PetrosikUtility
  namespace: Petrosik.Utility
  summary: Returns random direction
  example: []
  syntax:
    content: public static PointF GetRandomDirection()
    return:
      type: System.Drawing.PointF
      description: ''
    content.vb: Public Shared Function GetRandomDirection() As PointF
  overload: Petrosik.Utility.Utility.GetRandomDirection*
- uid: Petrosik.Utility.Utility.NextExponential(System.Int32,System.Int32,System.Double@,System.Double)
  commentId: M:Petrosik.Utility.Utility.NextExponential(System.Int32,System.Int32,System.Double@,System.Double)
  id: NextExponential(System.Int32,System.Int32,System.Double@,System.Double)
  parent: Petrosik.Utility.Utility
  langs:
  - csharp
  - vb
  name: NextExponential(int, int, out double, double)
  nameWithType: Utility.NextExponential(int, int, out double, double)
  fullName: Petrosik.Utility.Utility.NextExponential(int, int, out double, double)
  type: Method
  source:
    remote:
      path: Utility/Utility.cs
      branch: master
      repo: https://github.com/petrosik/Utility-Stuff
    id: NextExponential
    path: ../Utility/Utility.cs
    startLine: 263
  assemblies:
  - PetrosikUtility
  namespace: Petrosik.Utility
  summary: >-
    Returns a random "chance" from 100 to 0 in the range based on semi exponencial curve.

    <p>Mapped 100 = min , 0 = max</p>
  example: []
  syntax:
    content: public static double NextExponential(int min, int max, out double rngNum, double lambda = 2)
    parameters:
    - id: min
      type: System.Int32
      description: ''
    - id: max
      type: System.Int32
      description: ''
    - id: rngNum
      type: System.Double
      description: The randomly generated number
    - id: lambda
      type: System.Double
      description: How straight the curve is(bigger number straigther it is)
    return:
      type: System.Double
      description: ''
    content.vb: Public Shared Function NextExponential(min As Integer, max As Integer, rngNum As Double, lambda As Double = 2) As Double
  overload: Petrosik.Utility.Utility.NextExponential*
  nameWithType.vb: Utility.NextExponential(Integer, Integer, Double, Double)
  fullName.vb: Petrosik.Utility.Utility.NextExponential(Integer, Integer, Double, Double)
  name.vb: NextExponential(Integer, Integer, Double, Double)
- uid: Petrosik.Utility.Utility.ChanceRoll(System.Double)
  commentId: M:Petrosik.Utility.Utility.ChanceRoll(System.Double)
  id: ChanceRoll(System.Double)
  parent: Petrosik.Utility.Utility
  langs:
  - csharp
  - vb
  name: ChanceRoll(double)
  nameWithType: Utility.ChanceRoll(double)
  fullName: Petrosik.Utility.Utility.ChanceRoll(double)
  type: Method
  source:
    remote:
      path: Utility/Utility.cs
      branch: master
      repo: https://github.com/petrosik/Utility-Stuff
    id: ChanceRoll
    path: ../Utility/Utility.cs
    startLine: 280
  assemblies:
  - PetrosikUtility
  namespace: Petrosik.Utility
  summary: Rolls and returns true or false if the rolled number is smaller than the chance
  example: []
  syntax:
    content: public static bool ChanceRoll(double chance)
    parameters:
    - id: chance
      type: System.Double
      description: clamped 0 to 100
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Shared Function ChanceRoll(chance As Double) As Boolean
  overload: Petrosik.Utility.Utility.ChanceRoll*
  nameWithType.vb: Utility.ChanceRoll(Double)
  fullName.vb: Petrosik.Utility.Utility.ChanceRoll(Double)
  name.vb: ChanceRoll(Double)
- uid: Petrosik.Utility.Utility.ChanceRoll(System.Double,System.Double)
  commentId: M:Petrosik.Utility.Utility.ChanceRoll(System.Double,System.Double)
  id: ChanceRoll(System.Double,System.Double)
  parent: Petrosik.Utility.Utility
  langs:
  - csharp
  - vb
  name: ChanceRoll(double, double)
  nameWithType: Utility.ChanceRoll(double, double)
  fullName: Petrosik.Utility.Utility.ChanceRoll(double, double)
  type: Method
  source:
    remote:
      path: Utility/Utility.cs
      branch: master
      repo: https://github.com/petrosik/Utility-Stuff
    id: ChanceRoll
    path: ../Utility/Utility.cs
    startLine: 297
  assemblies:
  - PetrosikUtility
  namespace: Petrosik.Utility
  summary: Rolls and returns true or false if the rolled number is smaller than the maxChance and bigger than minChance
  example: []
  syntax:
    content: public static bool ChanceRoll(double minChance, double maxChance)
    parameters:
    - id: minChance
      type: System.Double
      description: clamped 0 to 100
    - id: maxChance
      type: System.Double
      description: clamped 0 to 100
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Shared Function ChanceRoll(minChance As Double, maxChance As Double) As Boolean
  overload: Petrosik.Utility.Utility.ChanceRoll*
  nameWithType.vb: Utility.ChanceRoll(Double, Double)
  fullName.vb: Petrosik.Utility.Utility.ChanceRoll(Double, Double)
  name.vb: ChanceRoll(Double, Double)
- uid: Petrosik.Utility.Utility.ConsoleLog(System.String,Petrosik.Enums.InfoType)
  commentId: M:Petrosik.Utility.Utility.ConsoleLog(System.String,Petrosik.Enums.InfoType)
  id: ConsoleLog(System.String,Petrosik.Enums.InfoType)
  parent: Petrosik.Utility.Utility
  langs:
  - csharp
  - vb
  name: ConsoleLog(string, InfoType)
  nameWithType: Utility.ConsoleLog(string, InfoType)
  fullName: Petrosik.Utility.Utility.ConsoleLog(string, Petrosik.Enums.InfoType)
  type: Method
  source:
    remote:
      path: Utility/Utility.cs
      branch: master
      repo: https://github.com/petrosik/Utility-Stuff
    id: ConsoleLog
    path: ../Utility/Utility.cs
    startLine: 316
  assemblies:
  - PetrosikUtility
  namespace: Petrosik.Utility
  summary: >-
    Formatted log method, ie:

    <p>Input: ConsoleLog("Hello World!", InfoType.Info)</p>

    <p>Console: [HH:mm:ss] [i]Hello World!</p>
  example: []
  syntax:
    content: public static void ConsoleLog(string text, InfoType infotype = InfoType.Info)
    parameters:
    - id: text
      type: System.String
      description: Message
    - id: infotype
      type: Petrosik.Enums.InfoType
      description: Severity
    content.vb: Public Shared Sub ConsoleLog(text As String, infotype As InfoType = InfoType.Info)
  overload: Petrosik.Utility.Utility.ConsoleLog*
  nameWithType.vb: Utility.ConsoleLog(String, InfoType)
  fullName.vb: Petrosik.Utility.Utility.ConsoleLog(String, Petrosik.Enums.InfoType)
  name.vb: ConsoleLog(String, InfoType)
- uid: Petrosik.Utility.Utility.ConsoleLog(System.Object)
  commentId: M:Petrosik.Utility.Utility.ConsoleLog(System.Object)
  id: ConsoleLog(System.Object)
  parent: Petrosik.Utility.Utility
  langs:
  - csharp
  - vb
  name: ConsoleLog(object)
  nameWithType: Utility.ConsoleLog(object)
  fullName: Petrosik.Utility.Utility.ConsoleLog(object)
  type: Method
  source:
    remote:
      path: Utility/Utility.cs
      branch: master
      repo: https://github.com/petrosik/Utility-Stuff
    id: ConsoleLog
    path: ../Utility/Utility.cs
    startLine: 348
  assemblies:
  - PetrosikUtility
  namespace: Petrosik.Utility
  summary: Formatted log method, simplified version for quicker use
  example: []
  syntax:
    content: public static void ConsoleLog(object obj)
    parameters:
    - id: obj
      type: System.Object
      description: ''
    content.vb: Public Shared Sub ConsoleLog(obj As Object)
  overload: Petrosik.Utility.Utility.ConsoleLog*
  nameWithType.vb: Utility.ConsoleLog(Object)
  fullName.vb: Petrosik.Utility.Utility.ConsoleLog(Object)
  name.vb: ConsoleLog(Object)
- uid: Petrosik.Utility.Utility.ConsoleLog(System.Exception,System.String)
  commentId: M:Petrosik.Utility.Utility.ConsoleLog(System.Exception,System.String)
  id: ConsoleLog(System.Exception,System.String)
  parent: Petrosik.Utility.Utility
  langs:
  - csharp
  - vb
  name: ConsoleLog(Exception, string?)
  nameWithType: Utility.ConsoleLog(Exception, string?)
  fullName: Petrosik.Utility.Utility.ConsoleLog(System.Exception, string?)
  type: Method
  source:
    remote:
      path: Utility/Utility.cs
      branch: master
      repo: https://github.com/petrosik/Utility-Stuff
    id: ConsoleLog
    path: ../Utility/Utility.cs
    startLine: 357
  assemblies:
  - PetrosikUtility
  namespace: Petrosik.Utility
  summary: Formatted log method based on exception with additional message
  example: []
  syntax:
    content: public static void ConsoleLog(Exception e, string? AdittionalMessage = null)
    parameters:
    - id: e
      type: System.Exception
      description: ''
    - id: AdittionalMessage
      type: System.String
      description: Additional message that will be shown
    content.vb: Public Shared Sub ConsoleLog(e As Exception, AdittionalMessage As String = Nothing)
  overload: Petrosik.Utility.Utility.ConsoleLog*
  nameWithType.vb: Utility.ConsoleLog(Exception, String)
  fullName.vb: Petrosik.Utility.Utility.ConsoleLog(System.Exception, String)
  name.vb: ConsoleLog(Exception, String)
- uid: Petrosik.Utility.Utility.BlendColors(System.Drawing.Color,System.Drawing.Color)
  commentId: M:Petrosik.Utility.Utility.BlendColors(System.Drawing.Color,System.Drawing.Color)
  id: BlendColors(System.Drawing.Color,System.Drawing.Color)
  parent: Petrosik.Utility.Utility
  langs:
  - csharp
  - vb
  name: BlendColors(Color, Color)
  nameWithType: Utility.BlendColors(Color, Color)
  fullName: Petrosik.Utility.Utility.BlendColors(System.Drawing.Color, System.Drawing.Color)
  type: Method
  source:
    remote:
      path: Utility/Utility.cs
      branch: master
      repo: https://github.com/petrosik/Utility-Stuff
    id: BlendColors
    path: ../Utility/Utility.cs
    startLine: 367
  assemblies:
  - PetrosikUtility
  namespace: Petrosik.Utility
  summary: should blend colors additevely
  example: []
  syntax:
    content: public static Color BlendColors(Color basec, Color additivec)
    parameters:
    - id: basec
      type: System.Drawing.Color
      description: Original color
    - id: additivec
      type: System.Drawing.Color
      description: Color that will be added
    return:
      type: System.Drawing.Color
      description: ''
    content.vb: Public Shared Function BlendColors(basec As Color, additivec As Color) As Color
  overload: Petrosik.Utility.Utility.BlendColors*
references:
- uid: Petrosik.Utility
  commentId: N:Petrosik.Utility
  href: Petrosik.html
  name: Petrosik.Utility
  nameWithType: Petrosik.Utility
  fullName: Petrosik.Utility
  spec.csharp:
  - uid: Petrosik
    name: Petrosik
    href: Petrosik.html
  - name: .
  - uid: Petrosik.Utility
    name: Utility
    href: Petrosik.Utility.html
  spec.vb:
  - uid: Petrosik
    name: Petrosik
    href: Petrosik.html
  - name: .
  - uid: Petrosik.Utility
    name: Utility
    href: Petrosik.Utility.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: Petrosik.Utility.Utility.SplitText*
  commentId: Overload:Petrosik.Utility.Utility.SplitText
  href: Petrosik.Utility.Utility.html#Petrosik_Utility_Utility_SplitText_System_String_System_String__System_Int32_System_Char_
  name: SplitText
  nameWithType: Utility.SplitText
  fullName: Petrosik.Utility.Utility.SplitText
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: System.Char
  commentId: T:System.Char
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.char
  name: char
  nameWithType: char
  fullName: char
  nameWithType.vb: Char
  fullName.vb: Char
  name.vb: Char
- uid: System.String[]
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string[]
  nameWithType: string[]
  fullName: string[]
  nameWithType.vb: String()
  fullName.vb: String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '['
  - name: ']'
  spec.vb:
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: (
  - name: )
- uid: Petrosik.Utility.Utility.FitMessageLimit*
  commentId: Overload:Petrosik.Utility.Utility.FitMessageLimit
  href: Petrosik.Utility.Utility.html#Petrosik_Utility_Utility_FitMessageLimit_System_String_System_Int32_System_Int32_System_Int32_
  name: FitMessageLimit
  nameWithType: Utility.FitMessageLimit
  fullName: Petrosik.Utility.Utility.FitMessageLimit
- uid: System.Collections.Generic.List{System.String}
  commentId: T:System.Collections.Generic.List{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<string>
  nameWithType: List<string>
  fullName: System.Collections.Generic.List<string>
  nameWithType.vb: List(Of String)
  fullName.vb: System.Collections.Generic.List(Of String)
  name.vb: List(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: Petrosik.Utility.Utility.GetEnumTypes*
  commentId: Overload:Petrosik.Utility.Utility.GetEnumTypes
  href: Petrosik.Utility.Utility.html#Petrosik_Utility_Utility_GetEnumTypes__1
  name: GetEnumTypes
  nameWithType: Utility.GetEnumTypes
  fullName: Petrosik.Utility.Utility.GetEnumTypes
- uid: System.Collections.Generic.List{{T}}
  commentId: T:System.Collections.Generic.List{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: Petrosik.Utility.Utility.MatchAndFillNull*
  commentId: Overload:Petrosik.Utility.Utility.MatchAndFillNull
  href: Petrosik.Utility.Utility.html#Petrosik_Utility_Utility_MatchAndFillNull__1_System_Int32_
  name: MatchAndFillNull
  nameWithType: Utility.MatchAndFillNull
  fullName: Petrosik.Utility.Utility.MatchAndFillNull
- uid: Petrosik.Utility.Utility.Rotate*
  commentId: Overload:Petrosik.Utility.Utility.Rotate
  href: Petrosik.Utility.Utility.html#Petrosik_Utility_Utility_Rotate_System_Drawing_PointF_System_Single_
  name: Rotate
  nameWithType: Utility.Rotate
  fullName: Petrosik.Utility.Utility.Rotate
- uid: System.Drawing.PointF
  commentId: T:System.Drawing.PointF
  parent: System.Drawing
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.drawing.pointf
  name: PointF
  nameWithType: PointF
  fullName: System.Drawing.PointF
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.single
  name: float
  nameWithType: float
  fullName: float
  nameWithType.vb: Single
  fullName.vb: Single
  name.vb: Single
- uid: System.Drawing
  commentId: N:System.Drawing
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Drawing
  nameWithType: System.Drawing
  fullName: System.Drawing
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Drawing
    name: Drawing
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.drawing
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Drawing
    name: Drawing
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.drawing
- uid: Petrosik.Utility.Utility.Compress*
  commentId: Overload:Petrosik.Utility.Utility.Compress
  href: Petrosik.Utility.Utility.html#Petrosik_Utility_Utility_Compress_System_Byte___
  name: Compress
  nameWithType: Utility.Compress
  fullName: Petrosik.Utility.Utility.Compress
- uid: System.Byte[]
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.byte
  name: byte[]
  nameWithType: byte[]
  fullName: byte[]
  nameWithType.vb: Byte()
  fullName.vb: Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: '['
  - name: ']'
  spec.vb:
  - uid: System.Byte
    name: Byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: (
  - name: )
- uid: Petrosik.Utility.Utility.Decompress*
  commentId: Overload:Petrosik.Utility.Utility.Decompress
  href: Petrosik.Utility.Utility.html#Petrosik_Utility_Utility_Decompress_System_Byte___
  name: Decompress
  nameWithType: Utility.Decompress
  fullName: Petrosik.Utility.Utility.Decompress
- uid: Petrosik.Utility.Utility.Serialize*
  commentId: Overload:Petrosik.Utility.Utility.Serialize
  href: Petrosik.Utility.Utility.html#Petrosik_Utility_Utility_Serialize__1___0_
  name: Serialize
  nameWithType: Utility.Serialize
  fullName: Petrosik.Utility.Utility.Serialize
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: Petrosik.Utility.Utility.Deserialize*
  commentId: Overload:Petrosik.Utility.Utility.Deserialize
  href: Petrosik.Utility.Utility.html#Petrosik_Utility_Utility_Deserialize__1_System_Byte___
  name: Deserialize
  nameWithType: Utility.Deserialize
  fullName: Petrosik.Utility.Utility.Deserialize
- uid: Petrosik.Utility.Utility.GetRandomDirection*
  commentId: Overload:Petrosik.Utility.Utility.GetRandomDirection
  href: Petrosik.Utility.Utility.html#Petrosik_Utility_Utility_GetRandomDirection
  name: GetRandomDirection
  nameWithType: Utility.GetRandomDirection
  fullName: Petrosik.Utility.Utility.GetRandomDirection
- uid: Petrosik.Utility.Utility.NextExponential*
  commentId: Overload:Petrosik.Utility.Utility.NextExponential
  href: Petrosik.Utility.Utility.html#Petrosik_Utility_Utility_NextExponential_System_Int32_System_Int32_System_Double__System_Double_
  name: NextExponential
  nameWithType: Utility.NextExponential
  fullName: Petrosik.Utility.Utility.NextExponential
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.double
  name: double
  nameWithType: double
  fullName: double
  nameWithType.vb: Double
  fullName.vb: Double
  name.vb: Double
- uid: Petrosik.Utility.Utility.ChanceRoll*
  commentId: Overload:Petrosik.Utility.Utility.ChanceRoll
  href: Petrosik.Utility.Utility.html#Petrosik_Utility_Utility_ChanceRoll_System_Double_
  name: ChanceRoll
  nameWithType: Utility.ChanceRoll
  fullName: Petrosik.Utility.Utility.ChanceRoll
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: Petrosik.Utility.Utility.ConsoleLog*
  commentId: Overload:Petrosik.Utility.Utility.ConsoleLog
  href: Petrosik.Utility.Utility.html#Petrosik_Utility_Utility_ConsoleLog_System_String_Petrosik_Enums_InfoType_
  name: ConsoleLog
  nameWithType: Utility.ConsoleLog
  fullName: Petrosik.Utility.Utility.ConsoleLog
- uid: Petrosik.Enums.InfoType
  commentId: T:Petrosik.Enums.InfoType
  parent: Petrosik.Enums
  href: Petrosik.Enums.InfoType.html
  name: InfoType
  nameWithType: InfoType
  fullName: Petrosik.Enums.InfoType
- uid: Petrosik.Enums
  commentId: N:Petrosik.Enums
  href: Petrosik.html
  name: Petrosik.Enums
  nameWithType: Petrosik.Enums
  fullName: Petrosik.Enums
  spec.csharp:
  - uid: Petrosik
    name: Petrosik
    href: Petrosik.html
  - name: .
  - uid: Petrosik.Enums
    name: Enums
    href: Petrosik.Enums.html
  spec.vb:
  - uid: Petrosik
    name: Petrosik
    href: Petrosik.html
  - name: .
  - uid: Petrosik.Enums
    name: Enums
    href: Petrosik.Enums.html
- uid: System.Exception
  commentId: T:System.Exception
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.exception
  name: Exception
  nameWithType: Exception
  fullName: System.Exception
- uid: Petrosik.Utility.Utility.BlendColors*
  commentId: Overload:Petrosik.Utility.Utility.BlendColors
  href: Petrosik.Utility.Utility.html#Petrosik_Utility_Utility_BlendColors_System_Drawing_Color_System_Drawing_Color_
  name: BlendColors
  nameWithType: Utility.BlendColors
  fullName: Petrosik.Utility.Utility.BlendColors
- uid: System.Drawing.Color
  commentId: T:System.Drawing.Color
  parent: System.Drawing
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.drawing.color
  name: Color
  nameWithType: Color
  fullName: System.Drawing.Color
